package me.arpitag.core;
// Generated from plsql.g4 by ANTLR 4.4
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class plsqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, A_LETTER=2, ADD=3, AFTER=4, AGENT=5, AGGREGATE=6, ALL=7, ALTER=8, 
		ANALYZE=9, AND=10, ANY=11, ARRAY=12, AS=13, ASC=14, ASSOCIATE=15, AT=16, 
		ATTRIBUTE=17, AUDIT=18, AUTHID=19, AUTO=20, AUTOMATIC=21, AUTONOMOUS_TRANSACTION=22, 
		BATCH=23, BEFORE=24, BEGIN=25, BETWEEN=26, BFILE=27, BINARY_DOUBLE=28, 
		BINARY_FLOAT=29, BINARY_INTEGER=30, BLOB=31, BLOCK=32, BODY=33, BOOLEAN=34, 
		BOTH=35, BREADTH=36, BULK=37, BY=38, BYTE=39, C_LETTER=40, CACHE=41, CALL=42, 
		CANONICAL=43, CASCADE=44, CASE=45, CAST=46, CHAR=47, CHAR_CS=48, CHARACTER=49, 
		CHECK=50, CHR=51, CLOB=52, CLOSE=53, CLUSTER=54, COLLECT=55, COLUMNS=56, 
		COMMENT=57, COMMIT=58, COMMITTED=59, COMPATIBILITY=60, COMPILE=61, COMPOUND=62, 
		CONNECT=63, CONNECT_BY_ROOT=64, CONSTANT=65, CONSTRAINT=66, CONSTRAINTS=67, 
		CONSTRUCTOR=68, CONTENT=69, CONTEXT=70, CONTINUE=71, CONVERT=72, CORRUPT_XID=73, 
		CORRUPT_XID_ALL=74, COST=75, COUNT=76, CREATE=77, CROSS=78, CUBE=79, CURRENT=80, 
		CURRENT_USER=81, CURSOR=82, CUSTOMDATUM=83, CYCLE=84, DATA=85, DATABASE=86, 
		DATE=87, DAY=88, DB_ROLE_CHANGE=89, DBTIMEZONE=90, DDL=91, DEBUG=92, DEC=93, 
		DECIMAL=94, DECLARE=95, DECOMPOSE=96, DECREMENT=97, DEFAULT=98, DEFAULTS=99, 
		DEFERRED=100, DEFINER=101, DELETE=102, DEPTH=103, DESC=104, DETERMINISTIC=105, 
		DIMENSION=106, DISABLE=107, DISASSOCIATE=108, DISTINCT=109, DOCUMENT=110, 
		DOUBLE=111, DROP=112, DSINTERVAL_UNCONSTRAINED=113, EACH=114, ELEMENT=115, 
		ELSE=116, ELSIF=117, EMPTY=118, ENABLE=119, ENCODING=120, END=121, ENTITYESCAPING=122, 
		ERR=123, ERRORS=124, ESCAPE=125, EVALNAME=126, EXCEPTION=127, EXCEPTION_INIT=128, 
		EXCEPTIONS=129, EXCLUDE=130, EXCLUSIVE=131, EXECUTE=132, EXISTS=133, EXIT=134, 
		EXPLAIN=135, EXTERNAL=136, EXTRACT=137, FAILURE=138, FALSE=139, FETCH=140, 
		FINAL=141, FIRST=142, FIRST_VALUE=143, FLOAT=144, FOLLOWING=145, FOLLOWS=146, 
		FOR=147, FORALL=148, FORCE=149, FROM=150, FULL=151, FUNCTION=152, GOTO=153, 
		GRANT=154, GROUP=155, GROUPING=156, HASH=157, HAVING=158, HIDE=159, HOUR=160, 
		IF=161, IGNORE=162, IMMEDIATE=163, IN=164, INCLUDE=165, INCLUDING=166, 
		INCREMENT=167, INDENT=168, INDEX=169, INDEXED=170, INDICATOR=171, INDICES=172, 
		INFINITE=173, INLINE=174, INNER=175, INOUT=176, INSERT=177, INSTANTIABLE=178, 
		INSTEAD=179, INT=180, INTEGER=181, INTERSECT=182, INTERVAL=183, INTO=184, 
		INVALIDATE=185, IS=186, ISOLATION=187, ITERATE=188, JAVA=189, JOIN=190, 
		KEEP=191, LANGUAGE=192, LAST=193, LAST_VALUE=194, LEADING=195, LEFT=196, 
		LEVEL=197, LIBRARY=198, LIKE=199, LIKE2=200, LIKE4=201, LIKEC=202, LIMIT=203, 
		LOCAL=204, LOCK=205, LOCKED=206, LOG=207, LOGOFF=208, LOGON=209, LONG=210, 
		LOOP=211, MAIN=212, MAP=213, MATCHED=214, MAXVALUE=215, MEASURES=216, 
		MEMBER=217, MERGE=218, MINUS=219, MINUTE=220, MINVALUE=221, MLSLABEL=222, 
		MODE=223, MODEL=224, MODIFY=225, MONTH=226, MULTISET=227, NAME=228, NAN=229, 
		NATURAL=230, NATURALN=231, NAV=232, NCHAR=233, NCHAR_CS=234, NCLOB=235, 
		NESTED=236, NEW=237, NO=238, NOAUDIT=239, NOCACHE=240, NOCOPY=241, NOCYCLE=242, 
		NOENTITYESCAPING=243, NOMAXVALUE=244, NOMINVALUE=245, NONE=246, NOORDER=247, 
		NOSCHEMACHECK=248, NOT=249, NOWAIT=250, NULL=251, NULLS=252, NUMBER=253, 
		NUMERIC=254, NVARCHAR2=255, OBJECT=256, OF=257, OFF=258, OID=259, OLD=260, 
		ON=261, ONLY=262, OPEN=263, OPTION=264, OR=265, ORADATA=266, ORDER=267, 
		ORDINALITY=268, OSERROR=269, OUT=270, OUTER=271, OVER=272, OVERRIDING=273, 
		PACKAGE=274, PARALLEL_ENABLE=275, PARAMETERS=276, PARENT=277, PARTITION=278, 
		PASSING=279, PATH=280, PERCENT_ROWTYPE=281, PERCENT_TYPE=282, PIPELINED=283, 
		PIVOT=284, PLAN=285, PLS_INTEGER=286, POSITIVE=287, POSITIVEN=288, PRAGMA=289, 
		PRECEDING=290, PRECISION=291, PRESENT=292, PRIOR=293, PROCEDURE=294, RAISE=295, 
		RANGE=296, RAW=297, READ=298, REAL=299, RECORD=300, REF=301, REFERENCE=302, 
		REFERENCING=303, REJECT=304, RELIES_ON=305, RENAME=306, REPLACE=307, RESPECT=308, 
		RESTRICT_REFERENCES=309, RESULT=310, RESULT_CACHE=311, RETURN=312, RETURNING=313, 
		REUSE=314, REVERSE=315, REVOKE=316, RIGHT=317, ROLLBACK=318, ROLLUP=319, 
		ROW=320, ROWID=321, ROWS=322, RULES=323, SAMPLE=324, SAVE=325, SAVEPOINT=326, 
		SCHEMA=327, SCHEMACHECK=328, SCN=329, SEARCH=330, SECOND=331, SEED=332, 
		SEGMENT=333, SELECT=334, SELF=335, SEQUENCE=336, SEQUENTIAL=337, SERIALIZABLE=338, 
		SERIALLY_REUSABLE=339, SERVERERROR=340, SESSIONTIMEZONE=341, SET=342, 
		SETS=343, SETTINGS=344, SHARE=345, SHOW=346, SHUTDOWN=347, SIBLINGS=348, 
		SIGNTYPE=349, SIMPLE_INTEGER=350, SINGLE=351, SIZE=352, SKIP_=353, SMALLINT=354, 
		SNAPSHOT=355, SOME=356, SPECIFICATION=357, SQLDATA=358, SQLERROR=359, 
		STANDALONE=360, START=361, STARTUP=362, STATEMENT=363, STATEMENT_ID=364, 
		STATIC=365, STATISTICS=366, STRING=367, SUBMULTISET=368, SUBPARTITION=369, 
		SUBSTITUTABLE=370, SUBTYPE=371, SUCCESS=372, SUSPEND=373, TABLE=374, THE=375, 
		THEN=376, TIME=377, TIMESTAMP=378, TIMESTAMP_LTZ_UNCONSTRAINED=379, TIMESTAMP_TZ_UNCONSTRAINED=380, 
		TIMESTAMP_UNCONSTRAINED=381, TIMEZONE_ABBR=382, TIMEZONE_HOUR=383, TIMEZONE_MINUTE=384, 
		TIMEZONE_REGION=385, TO=386, TRAILING=387, TRANSACTION=388, TRANSLATE=389, 
		TREAT=390, TRIGGER=391, TRIM=392, TRUE=393, TRUNCATE=394, TYPE=395, UNBOUNDED=396, 
		UNDER=397, UNION=398, UNIQUE=399, UNLIMITED=400, UNPIVOT=401, UNTIL=402, 
		UPDATE=403, UPDATED=404, UPSERT=405, UROWID=406, USE=407, USING=408, VALIDATE=409, 
		VALUE=410, VALUES=411, VARCHAR=412, VARCHAR2=413, VARIABLE=414, VARRAY=415, 
		VARYING=416, VERSION=417, VERSIONS=418, WAIT=419, WARNING=420, WELLFORMED=421, 
		WHEN=422, WHENEVER=423, WHERE=424, WHILE=425, WITH=426, WITHIN=427, WORK=428, 
		WRITE=429, XML=430, XMLAGG=431, XMLATTRIBUTES=432, XMLCAST=433, XMLCOLATTVAL=434, 
		XMLELEMENT=435, XMLEXISTS=436, XMLFOREST=437, XMLNAMESPACES=438, XMLPARSE=439, 
		XMLPI=440, XMLQUERY=441, XMLROOT=442, XMLSERIALIZE=443, XMLTABLE=444, 
		YEAR=445, YES=446, YMINTERVAL_UNCONSTRAINED=447, ZONE=448, PREDICTION=449, 
		PREDICTION_BOUNDS=450, PREDICTION_COST=451, PREDICTION_DETAILS=452, PREDICTION_PROBABILITY=453, 
		PREDICTION_SET=454, CUME_DIST=455, DENSE_RANK=456, LISTAGG=457, PERCENT_RANK=458, 
		PERCENTILE_CONT=459, PERCENTILE_DISC=460, RANK=461, AVG=462, CORR=463, 
		LAG=464, LEAD=465, MAX=466, MEDIAN=467, MIN=468, NTILE=469, RATIO_TO_REPORT=470, 
		ROW_NUMBER=471, SUM=472, VARIANCE=473, REGR_=474, STDDEV=475, VAR_=476, 
		COVAR_=477, NATIONAL_CHAR_STRING_LIT=478, BIT_STRING_LIT=479, HEX_STRING_LIT=480, 
		DOUBLE_PERIOD=481, PERIOD=482, UNSIGNED_INTEGER=483, APPROXIMATE_NUM_LIT=484, 
		CHAR_STRING=485, DELIMITED_ID=486, PERCENT=487, AMPERSAND=488, LEFT_PAREN=489, 
		RIGHT_PAREN=490, DOUBLE_ASTERISK=491, ASTERISK=492, PLUS_SIGN=493, MINUS_SIGN=494, 
		COMMA=495, SOLIDUS=496, AT_SIGN=497, ASSIGN_OP=498, BINDVAR=499, COLON=500, 
		SEMICOLON=501, LESS_THAN_OR_EQUALS_OP=502, LESS_THAN_OP=503, GREATER_THAN_OR_EQUALS_OP=504, 
		NOT_EQUAL_OP=505, CARRET_OPERATOR_PART=506, TILDE_OPERATOR_PART=507, EXCLAMATION_OPERATOR_PART=508, 
		GREATER_THAN_OP=509, CONCATENATION_OP=510, VERTICAL_BAR=511, EQUALS_OP=512, 
		LEFT_BRACKET=513, RIGHT_BRACKET=514, INTRODUCER=515, SPACES=516, SINGLE_LINE_COMMENT=517, 
		MULTI_LINE_COMMENT=518, PROMPT=519, SQL92_RESERVED_ALL=520, SQL92_RESERVED_ALTER=521, 
		SQL92_RESERVED_AND=522, SQL92_RESERVED_ANY=523, SQL92_RESERVED_AS=524, 
		SQL92_RESERVED_ASC=525, SQL92_RESERVED_BEGIN=526, SQL92_RESERVED_BETWEEN=527, 
		SQL92_RESERVED_BY=528, SQL92_RESERVED_CASE=529, SQL92_RESERVED_CHECK=530, 
		PLSQL_RESERVED_CLUSTERS=531, PLSQL_RESERVED_COLAUTH=532, PLSQL_RESERVED_COMPRESS=533, 
		SQL92_RESERVED_CONNECT=534, PLSQL_NON_RESERVED_CONNECT_BY_ROOT=535, PLSQL_RESERVED_CRASH=536, 
		SQL92_RESERVED_CREATE=537, SQL92_RESERVED_CURRENT=538, SQL92_RESERVED_CURSOR=539, 
		SQL92_RESERVED_DATE=540, SQL92_RESERVED_DECLARE=541, SQL92_RESERVED_DEFAULT=542, 
		SQL92_RESERVED_DELETE=543, SQL92_RESERVED_DESC=544, SQL92_RESERVED_DISTINCT=545, 
		SQL92_RESERVED_DROP=546, SQL92_RESERVED_ELSE=547, SQL92_RESERVED_END=548, 
		SQL92_RESERVED_EXCEPTION=549, PLSQL_RESERVED_EXCLUSIVE=550, SQL92_RESERVED_EXISTS=551, 
		SQL92_RESERVED_FALSE=552, SQL92_RESERVED_FETCH=553, SQL92_RESERVED_FOR=554, 
		SQL92_RESERVED_FROM=555, SQL92_RESERVED_GOTO=556, SQL92_RESERVED_GRANT=557, 
		SQL92_RESERVED_GROUP=558, SQL92_RESERVED_HAVING=559, PLSQL_RESERVED_IDENTIFIED=560, 
		PLSQL_RESERVED_IF=561, SQL92_RESERVED_IN=562, PLSQL_RESERVED_INDEX=563, 
		PLSQL_RESERVED_INDEXES=564, SQL92_RESERVED_INSERT=565, SQL92_RESERVED_INTERSECT=566, 
		SQL92_RESERVED_INTO=567, SQL92_RESERVED_IS=568, SQL92_RESERVED_LIKE=569, 
		PLSQL_RESERVED_LOCK=570, PLSQL_RESERVED_MINUS=571, PLSQL_RESERVED_MODE=572, 
		PLSQL_RESERVED_NOCOMPRESS=573, SQL92_RESERVED_NOT=574, PLSQL_RESERVED_NOWAIT=575, 
		SQL92_RESERVED_NULL=576, SQL92_RESERVED_OF=577, SQL92_RESERVED_ON=578, 
		SQL92_RESERVED_OPTION=579, SQL92_RESERVED_OR=580, SQL92_RESERVED_ORDER=581, 
		SQL92_RESERVED_OVERLAPS=582, SQL92_RESERVED_PRIOR=583, SQL92_RESERVED_PROCEDURE=584, 
		SQL92_RESERVED_PUBLIC=585, PLSQL_RESERVED_RESOURCE=586, SQL92_RESERVED_REVOKE=587, 
		SQL92_RESERVED_SELECT=588, PLSQL_RESERVED_SHARE=589, SQL92_RESERVED_SIZE=590, 
		PLSQL_RESERVED_START=591, PLSQL_RESERVED_TABAUTH=592, SQL92_RESERVED_TABLE=593, 
		SQL92_RESERVED_THE=594, SQL92_RESERVED_THEN=595, SQL92_RESERVED_TO=596, 
		SQL92_RESERVED_TRUE=597, SQL92_RESERVED_UNION=598, SQL92_RESERVED_UNIQUE=599, 
		SQL92_RESERVED_UPDATE=600, SQL92_RESERVED_VALUES=601, SQL92_RESERVED_VIEW=602, 
		PLSQL_RESERVED_VIEWS=603, SQL92_RESERVED_WHEN=604, SQL92_RESERVED_WHERE=605, 
		SQL92_RESERVED_WITH=606, PLSQL_NON_RESERVED_USING=607, PLSQL_NON_RESERVED_MODEL=608, 
		PLSQL_NON_RESERVED_ELSIF=609, PLSQL_NON_RESERVED_PIVOT=610, PLSQL_NON_RESERVED_UNPIVOT=611, 
		REGULAR_ID=612, ZV=613;
	public static final String[] tokenNames = {
		"<INVALID>", "'..'", "A_LETTER", "ADD", "AFTER", "AGENT", "AGGREGATE", 
		"ALL", "ALTER", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "ASSOCIATE", 
		"AT", "ATTRIBUTE", "AUDIT", "AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", 
		"BATCH", "BEFORE", "BEGIN", "BETWEEN", "BFILE", "BINARY_DOUBLE", "BINARY_FLOAT", 
		"BINARY_INTEGER", "BLOB", "BLOCK", "BODY", "BOOLEAN", "BOTH", "BREADTH", 
		"BULK", "BY", "BYTE", "C_LETTER", "CACHE", "CALL", "CANONICAL", "CASCADE", 
		"CASE", "CAST", "CHAR", "CHAR_CS", "CHARACTER", "CHECK", "CHR", "CLOB", 
		"CLOSE", "CLUSTER", "COLLECT", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", 
		"COMPATIBILITY", "COMPILE", "COMPOUND", "CONNECT", "CONNECT_BY_ROOT", 
		"CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", "CONTENT", "CONTEXT", 
		"CONTINUE", "CONVERT", "CORRUPT_XID", "CORRUPT_XID_ALL", "COST", "COUNT", 
		"CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_USER", "CURSOR", "CUSTOMDATUM", 
		"CYCLE", "DATA", "DATABASE", "DATE", "DAY", "DB_ROLE_CHANGE", "DBTIMEZONE", 
		"DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", "DECOMPOSE", "DECREMENT", 
		"DEFAULT", "DEFAULTS", "DEFERRED", "DEFINER", "DELETE", "DEPTH", "DESC", 
		"DETERMINISTIC", "DIMENSION", "DISABLE", "DISASSOCIATE", "DISTINCT", "DOCUMENT", 
		"DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", "EACH", "ELEMENT", "ELSE", 
		"ELSIF", "EMPTY", "ENABLE", "ENCODING", "END", "ENTITYESCAPING", "ERR", 
		"ERRORS", "ESCAPE", "EVALNAME", "EXCEPTION", "EXCEPTION_INIT", "EXCEPTIONS", 
		"EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXIT", "EXPLAIN", "EXTERNAL", 
		"EXTRACT", "FAILURE", "FALSE", "FETCH", "FINAL", "FIRST", "FIRST_VALUE", 
		"FLOAT", "FOLLOWING", "FOLLOWS", "FOR", "FORALL", "FORCE", "FROM", "FULL", 
		"FUNCTION", "GOTO", "GRANT", "GROUP", "GROUPING", "HASH", "HAVING", "HIDE", 
		"HOUR", "IF", "IGNORE", "IMMEDIATE", "IN", "INCLUDE", "INCLUDING", "INCREMENT", 
		"INDENT", "INDEX", "INDEXED", "INDICATOR", "INDICES", "INFINITE", "INLINE", 
		"INNER", "INOUT", "INSERT", "INSTANTIABLE", "INSTEAD", "INT", "INTEGER", 
		"INTERSECT", "INTERVAL", "INTO", "INVALIDATE", "IS", "ISOLATION", "ITERATE", 
		"JAVA", "JOIN", "KEEP", "LANGUAGE", "LAST", "LAST_VALUE", "LEADING", "LEFT", 
		"LEVEL", "LIBRARY", "LIKE", "LIKE2", "LIKE4", "LIKEC", "LIMIT", "LOCAL", 
		"LOCK", "LOCKED", "LOG", "LOGOFF", "LOGON", "LONG", "LOOP", "MAIN", "MAP", 
		"MATCHED", "MAXVALUE", "MEASURES", "MEMBER", "MERGE", "MINUS", "MINUTE", 
		"MINVALUE", "MLSLABEL", "MODE", "MODEL", "MODIFY", "MONTH", "MULTISET", 
		"NAME", "NAN", "NATURAL", "NATURALN", "NAV", "NCHAR", "NCHAR_CS", "NCLOB", 
		"NESTED", "NEW", "NO", "NOAUDIT", "NOCACHE", "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", 
		"NOMAXVALUE", "NOMINVALUE", "NONE", "NOORDER", "NOSCHEMACHECK", "NOT", 
		"NOWAIT", "NULL", "NULLS", "NUMBER", "NUMERIC", "NVARCHAR2", "OBJECT", 
		"OF", "OFF", "OID", "OLD", "ON", "ONLY", "OPEN", "OPTION", "OR", "ORADATA", 
		"ORDER", "ORDINALITY", "OSERROR", "OUT", "OUTER", "OVER", "OVERRIDING", 
		"PACKAGE", "PARALLEL_ENABLE", "PARAMETERS", "PARENT", "PARTITION", "PASSING", 
		"PATH", "PERCENT_ROWTYPE", "PERCENT_TYPE", "PIPELINED", "PIVOT", "PLAN", 
		"PLS_INTEGER", "POSITIVE", "POSITIVEN", "PRAGMA", "PRECEDING", "PRECISION", 
		"PRESENT", "PRIOR", "PROCEDURE", "RAISE", "RANGE", "RAW", "READ", "REAL", 
		"RECORD", "REF", "REFERENCE", "REFERENCING", "REJECT", "RELIES_ON", "RENAME", 
		"REPLACE", "RESPECT", "RESTRICT_REFERENCES", "RESULT", "RESULT_CACHE", 
		"RETURN", "RETURNING", "REUSE", "REVERSE", "REVOKE", "RIGHT", "ROLLBACK", 
		"ROLLUP", "ROW", "ROWID", "ROWS", "RULES", "SAMPLE", "SAVE", "SAVEPOINT", 
		"SCHEMA", "SCHEMACHECK", "SCN", "SEARCH", "SECOND", "SEED", "SEGMENT", 
		"SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", "SERIALLY_REUSABLE", 
		"SERVERERROR", "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", "SHARE", 
		"SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", "SINGLE", 
		"SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", "SOME", "SPECIFICATION", "SQLDATA", 
		"SQLERROR", "STANDALONE", "START", "STARTUP", "STATEMENT", "STATEMENT_ID", 
		"STATIC", "STATISTICS", "STRING", "SUBMULTISET", "SUBPARTITION", "SUBSTITUTABLE", 
		"SUBTYPE", "SUCCESS", "SUSPEND", "TABLE", "THE", "THEN", "TIME", "TIMESTAMP", 
		"TIMESTAMP_LTZ_UNCONSTRAINED", "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", 
		"TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TIMEZONE_REGION", 
		"TO", "TRAILING", "TRANSACTION", "TRANSLATE", "TREAT", "TRIGGER", "TRIM", 
		"TRUE", "TRUNCATE", "TYPE", "UNBOUNDED", "UNDER", "UNION", "UNIQUE", "UNLIMITED", 
		"UNPIVOT", "UNTIL", "UPDATE", "UPDATED", "UPSERT", "UROWID", "USE", "USING", 
		"VALIDATE", "VALUE", "VALUES", "VARCHAR", "VARCHAR2", "VARIABLE", "VARRAY", 
		"VARYING", "VERSION", "VERSIONS", "WAIT", "WARNING", "WELLFORMED", "WHEN", 
		"WHENEVER", "WHERE", "WHILE", "WITH", "WITHIN", "WORK", "WRITE", "XML", 
		"XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", "XMLELEMENT", "XMLEXISTS", 
		"XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLQUERY", "XMLROOT", 
		"XMLSERIALIZE", "XMLTABLE", "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", 
		"ZONE", "PREDICTION", "PREDICTION_BOUNDS", "PREDICTION_COST", "PREDICTION_DETAILS", 
		"PREDICTION_PROBABILITY", "PREDICTION_SET", "CUME_DIST", "DENSE_RANK", 
		"LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", 
		"AVG", "CORR", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", "RATIO_TO_REPORT", 
		"ROW_NUMBER", "SUM", "VARIANCE", "REGR_", "STDDEV", "VAR_", "COVAR_", 
		"NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", 
		"'.'", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", "CHAR_STRING", "DELIMITED_ID", 
		"'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", "'-'", "','", "'/'", 
		"'@'", "':='", "BINDVAR", "':'", "';'", "'<='", "'<'", "'>='", "NOT_EQUAL_OP", 
		"'^'", "'~'", "'!'", "'>'", "'||'", "'|'", "'='", "'['", "']'", "'_'", 
		"SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "PROMPT", "'all'", 
		"'alter'", "'and'", "'any'", "'as'", "'asc'", "'begin'", "'between'", 
		"'by'", "'case'", "'check'", "'clusters'", "'colauth'", "'compress'", 
		"'connect'", "'connect_by_root'", "'crash'", "'create'", "'current'", 
		"'cursor'", "'date'", "'declare'", "'default'", "'delete'", "'desc'", 
		"'distinct'", "'drop'", "'else'", "'end'", "'exception'", "'exclusive'", 
		"'exists'", "'false'", "'fetch'", "'for'", "'from'", "'goto'", "'grant'", 
		"'group'", "'having'", "'identified'", "'if'", "'in'", "'index'", "'indexes'", 
		"'insert'", "'intersect'", "'into'", "'is'", "'like'", "'lock'", "'minus'", 
		"'mode'", "'nocompress'", "'not'", "'nowait'", "'null'", "'of'", "'on'", 
		"'option'", "'or'", "'order'", "'overlaps'", "'prior'", "'procedure'", 
		"'public'", "'resource'", "'revoke'", "'select'", "'share'", "'size'", 
		"'start'", "'tabauth'", "'table'", "'the'", "'then'", "'to'", "'true'", 
		"'union'", "'unique'", "'update'", "'values'", "'view'", "'views'", "'when'", 
		"'where'", "'with'", "'using'", "'model'", "'elsif'", "'pivot'", "'unpivot'", 
		"REGULAR_ID", "'@!'"
	};
	public static final int
		RULE_swallow_to_semi = 0, RULE_compilation_unit = 1, RULE_sql_script = 2, 
		RULE_unit_statement = 3, RULE_drop_function = 4, RULE_alter_function = 5, 
		RULE_create_function_body = 6, RULE_parallel_enable_clause = 7, RULE_partition_by_clause = 8, 
		RULE_result_cache_clause = 9, RULE_relies_on_part = 10, RULE_streaming_clause = 11, 
		RULE_drop_package = 12, RULE_alter_package = 13, RULE_create_package = 14, 
		RULE_package_body = 15, RULE_package_spec = 16, RULE_package_obj_spec = 17, 
		RULE_procedure_spec = 18, RULE_function_spec = 19, RULE_package_obj_body = 20, 
		RULE_drop_procedure = 21, RULE_alter_procedure = 22, RULE_create_procedure_body = 23, 
		RULE_drop_trigger = 24, RULE_alter_trigger = 25, RULE_create_trigger = 26, 
		RULE_trigger_follows_clause = 27, RULE_trigger_when_clause = 28, RULE_simple_dml_trigger = 29, 
		RULE_for_each_row = 30, RULE_compound_dml_trigger = 31, RULE_non_dml_trigger = 32, 
		RULE_trigger_body = 33, RULE_routine_clause = 34, RULE_compound_trigger_block = 35, 
		RULE_timing_point_section = 36, RULE_non_dml_event = 37, RULE_dml_event_clause = 38, 
		RULE_dml_event_element = 39, RULE_dml_event_nested_clause = 40, RULE_referencing_clause = 41, 
		RULE_referencing_element = 42, RULE_drop_type = 43, RULE_alter_type = 44, 
		RULE_compile_type_clause = 45, RULE_replace_type_clause = 46, RULE_alter_method_spec = 47, 
		RULE_alter_method_element = 48, RULE_alter_attribute_definition = 49, 
		RULE_attribute_definition = 50, RULE_alter_collection_clauses = 51, RULE_dependent_handling_clause = 52, 
		RULE_dependent_exceptions_part = 53, RULE_create_type = 54, RULE_type_definition = 55, 
		RULE_object_type_def = 56, RULE_object_as_part = 57, RULE_object_under_part = 58, 
		RULE_nested_table_type_def = 59, RULE_sqlj_object_type = 60, RULE_type_body = 61, 
		RULE_type_body_elements = 62, RULE_map_order_func_declaration = 63, RULE_subprog_decl_in_type = 64, 
		RULE_proc_decl_in_type = 65, RULE_func_decl_in_type = 66, RULE_constructor_declaration = 67, 
		RULE_modifier_clause = 68, RULE_object_member_spec = 69, RULE_sqlj_object_type_attr = 70, 
		RULE_element_spec = 71, RULE_element_spec_options = 72, RULE_subprogram_spec = 73, 
		RULE_type_procedure_spec = 74, RULE_type_function_spec = 75, RULE_constructor_spec = 76, 
		RULE_map_order_function_spec = 77, RULE_pragma_clause = 78, RULE_pragma_elements = 79, 
		RULE_type_elements_parameter = 80, RULE_drop_sequence = 81, RULE_alter_sequence = 82, 
		RULE_create_sequence = 83, RULE_sequence_spec = 84, RULE_sequence_start_clause = 85, 
		RULE_invoker_rights_clause = 86, RULE_compiler_parameters_clause = 87, 
		RULE_call_spec = 88, RULE_java_spec = 89, RULE_c_spec = 90, RULE_c_agent_in_clause = 91, 
		RULE_c_parameters_clause = 92, RULE_parameter = 93, RULE_default_value_part = 94, 
		RULE_declare_spec = 95, RULE_variable_declaration = 96, RULE_subtype_declaration = 97, 
		RULE_cursor_declaration = 98, RULE_parameter_spec = 99, RULE_exception_declaration = 100, 
		RULE_pragma_declaration = 101, RULE_record_declaration = 102, RULE_record_type_dec = 103, 
		RULE_field_spec = 104, RULE_record_var_dec = 105, RULE_table_declaration = 106, 
		RULE_table_type_dec = 107, RULE_table_indexed_by_part = 108, RULE_varray_type_def = 109, 
		RULE_table_var_dec = 110, RULE_seq_of_statements = 111, RULE_label_declaration = 112, 
		RULE_statement = 113, RULE_assignment_statement = 114, RULE_continue_statement = 115, 
		RULE_exit_statement = 116, RULE_goto_statement = 117, RULE_if_statement = 118, 
		RULE_elsif_part = 119, RULE_else_part = 120, RULE_loop_statement = 121, 
		RULE_cursor_loop_param = 122, RULE_forall_statement = 123, RULE_bounds_clause = 124, 
		RULE_between_bound = 125, RULE_lower_bound = 126, RULE_upper_bound = 127, 
		RULE_null_statement = 128, RULE_raise_statement = 129, RULE_return_statement = 130, 
		RULE_function_call = 131, RULE_body = 132, RULE_exception_clause = 133, 
		RULE_exception_handler = 134, RULE_trigger_block = 135, RULE_block = 136, 
		RULE_sql_statement = 137, RULE_execute_immediate = 138, RULE_dynamic_returning_clause = 139, 
		RULE_data_manipulation_language_statements = 140, RULE_cursor_manipulation_statements = 141, 
		RULE_close_statement = 142, RULE_open_statement = 143, RULE_fetch_statement = 144, 
		RULE_open_for_statement = 145, RULE_transaction_control_statements = 146, 
		RULE_set_transaction_command = 147, RULE_set_constraint_command = 148, 
		RULE_commit_statement = 149, RULE_write_clause = 150, RULE_rollback_statement = 151, 
		RULE_savepoint_statement = 152, RULE_explain_statement = 153, RULE_select_statement = 154, 
		RULE_subquery_factoring_clause = 155, RULE_factoring_element = 156, RULE_search_clause = 157, 
		RULE_cycle_clause = 158, RULE_subquery = 159, RULE_subquery_operation_part = 160, 
		RULE_subquery_basic_elements = 161, RULE_query_block = 162, RULE_selected_element = 163, 
		RULE_from_clause = 164, RULE_select_list_elements = 165, RULE_table_ref_list = 166, 
		RULE_table_ref = 167, RULE_table_ref_aux = 168, RULE_join_clause = 169, 
		RULE_join_on_part = 170, RULE_join_using_part = 171, RULE_outer_join_type = 172, 
		RULE_query_partition_clause = 173, RULE_flashback_query_clause = 174, 
		RULE_pivot_clause = 175, RULE_pivot_element = 176, RULE_pivot_for_clause = 177, 
		RULE_pivot_in_clause = 178, RULE_pivot_in_clause_element = 179, RULE_pivot_in_clause_elements = 180, 
		RULE_unpivot_clause = 181, RULE_unpivot_in_clause = 182, RULE_unpivot_in_elements = 183, 
		RULE_hierarchical_query_clause = 184, RULE_start_part = 185, RULE_group_by_clause = 186, 
		RULE_group_by_elements = 187, RULE_rollup_cube_clause = 188, RULE_grouping_sets_clause = 189, 
		RULE_grouping_sets_elements = 190, RULE_having_clause = 191, RULE_model_clause = 192, 
		RULE_cell_reference_options = 193, RULE_return_rows_clause = 194, RULE_reference_model = 195, 
		RULE_main_model = 196, RULE_model_column_clauses = 197, RULE_model_column_partition_part = 198, 
		RULE_model_column_list = 199, RULE_model_column = 200, RULE_model_rules_clause = 201, 
		RULE_model_rules_part = 202, RULE_model_rules_element = 203, RULE_cell_assignment = 204, 
		RULE_model_iterate_clause = 205, RULE_until_part = 206, RULE_order_by_clause = 207, 
		RULE_order_by_elements = 208, RULE_for_update_clause = 209, RULE_for_update_of_part = 210, 
		RULE_for_update_options = 211, RULE_update_statement = 212, RULE_update_set_clause = 213, 
		RULE_column_based_update_set_clause = 214, RULE_delete_statement = 215, 
		RULE_insert_statement = 216, RULE_single_table_insert = 217, RULE_multi_table_insert = 218, 
		RULE_multi_table_element = 219, RULE_conditional_insert_clause = 220, 
		RULE_conditional_insert_when_part = 221, RULE_conditional_insert_else_part = 222, 
		RULE_insert_into_clause = 223, RULE_values_clause = 224, RULE_merge_statement = 225, 
		RULE_merge_update_clause = 226, RULE_merge_element = 227, RULE_merge_update_delete_part = 228, 
		RULE_merge_insert_clause = 229, RULE_selected_tableview = 230, RULE_lock_table_statement = 231, 
		RULE_wait_nowait_part = 232, RULE_lock_table_element = 233, RULE_lock_mode = 234, 
		RULE_general_table_ref = 235, RULE_static_returning_clause = 236, RULE_error_logging_clause = 237, 
		RULE_error_logging_into_part = 238, RULE_error_logging_reject_part = 239, 
		RULE_dml_table_expression_clause = 240, RULE_table_collection_expression = 241, 
		RULE_subquery_restriction_clause = 242, RULE_sample_clause = 243, RULE_seed_part = 244, 
		RULE_cursor_expression = 245, RULE_expression_list = 246, RULE_condition = 247, 
		RULE_condition_wrapper = 248, RULE_expression = 249, RULE_expression_wrapper = 250, 
		RULE_logical_and_expression = 251, RULE_negated_expression = 252, RULE_equality_expression = 253, 
		RULE_multiset_expression = 254, RULE_multiset_type = 255, RULE_relational_expression = 256, 
		RULE_compound_expression = 257, RULE_like_type = 258, RULE_like_escape_part = 259, 
		RULE_in_elements = 260, RULE_between_elements = 261, RULE_concatenation = 262, 
		RULE_concatenation_wrapper = 263, RULE_additive_expression = 264, RULE_multiply_expression = 265, 
		RULE_datetime_expression = 266, RULE_interval_expression = 267, RULE_model_expression = 268, 
		RULE_model_expression_element = 269, RULE_single_column_for_loop = 270, 
		RULE_for_like_part = 271, RULE_for_increment_decrement_type = 272, RULE_multi_column_for_loop = 273, 
		RULE_unary_expression = 274, RULE_case_statement = 275, RULE_simple_case_statement = 276, 
		RULE_simple_case_when_part = 277, RULE_searched_case_statement = 278, 
		RULE_searched_case_when_part = 279, RULE_case_else_part = 280, RULE_atom = 281, 
		RULE_expression_or_vector = 282, RULE_vector_expr = 283, RULE_quantified_expression = 284, 
		RULE_standard_function = 285, RULE_over_clause_keyword = 286, RULE_within_or_over_clause_keyword = 287, 
		RULE_standard_prediction_function_keyword = 288, RULE_over_clause = 289, 
		RULE_windowing_clause = 290, RULE_windowing_type = 291, RULE_windowing_elements = 292, 
		RULE_using_clause = 293, RULE_using_element = 294, RULE_collect_order_by_part = 295, 
		RULE_within_or_over_part = 296, RULE_cost_matrix_clause = 297, RULE_xml_passing_clause = 298, 
		RULE_xml_attributes_clause = 299, RULE_xml_namespaces_clause = 300, RULE_xml_table_column = 301, 
		RULE_xml_general_default_part = 302, RULE_xml_multiuse_expression_element = 303, 
		RULE_xmlroot_param_version_part = 304, RULE_xmlroot_param_standalone_part = 305, 
		RULE_xmlserialize_param_enconding_part = 306, RULE_xmlserialize_param_version_part = 307, 
		RULE_xmlserialize_param_ident_part = 308, RULE_sql_plus_command = 309, 
		RULE_whenever_command = 310, RULE_set_command = 311, RULE_exit_command = 312, 
		RULE_prompt_command = 313, RULE_show_errors_command = 314, RULE_partition_extension_clause = 315, 
		RULE_column_alias = 316, RULE_table_alias = 317, RULE_alias_quoted_string = 318, 
		RULE_where_clause = 319, RULE_current_of_clause = 320, RULE_into_clause = 321, 
		RULE_xml_column_name = 322, RULE_cost_class_name = 323, RULE_attribute_name = 324, 
		RULE_savepoint_name = 325, RULE_rollback_segment_name = 326, RULE_table_var_name = 327, 
		RULE_schema_name = 328, RULE_routine_name = 329, RULE_package_name = 330, 
		RULE_implementation_type_name = 331, RULE_parameter_name = 332, RULE_reference_model_name = 333, 
		RULE_main_model_name = 334, RULE_aggregate_function_name = 335, RULE_query_name = 336, 
		RULE_constraint_name = 337, RULE_label_name = 338, RULE_type_name = 339, 
		RULE_sequence_name = 340, RULE_exception_name = 341, RULE_function_name = 342, 
		RULE_procedure_name = 343, RULE_trigger_name = 344, RULE_variable_name = 345, 
		RULE_index_name = 346, RULE_cursor_name = 347, RULE_record_name = 348, 
		RULE_collection_name = 349, RULE_link_name = 350, RULE_column_name = 351, 
		RULE_tableview_name = 352, RULE_char_set_name = 353, RULE_keep_clause = 354, 
		RULE_function_argument = 355, RULE_function_argument_analytic = 356, RULE_function_argument_modeling = 357, 
		RULE_respect_or_ignore_nulls = 358, RULE_argument = 359, RULE_type_spec = 360, 
		RULE_datatype = 361, RULE_precision_part = 362, RULE_native_datatype_element = 363, 
		RULE_bind_variable = 364, RULE_general_element = 365, RULE_general_element_part = 366, 
		RULE_table_element = 367, RULE_constant = 368, RULE_numeric = 369, RULE_numeric_negative = 370, 
		RULE_quoted_string = 371, RULE_id = 372, RULE_id_expression = 373, RULE_not_equal_op = 374, 
		RULE_greater_than_or_equals_op = 375, RULE_less_than_or_equals_op = 376, 
		RULE_concatenation_op = 377, RULE_outer_join_sign = 378, RULE_regular_id = 379;
	public static final String[] ruleNames = {
		"swallow_to_semi", "compilation_unit", "sql_script", "unit_statement", 
		"drop_function", "alter_function", "create_function_body", "parallel_enable_clause", 
		"partition_by_clause", "result_cache_clause", "relies_on_part", "streaming_clause", 
		"drop_package", "alter_package", "create_package", "package_body", "package_spec", 
		"package_obj_spec", "procedure_spec", "function_spec", "package_obj_body", 
		"drop_procedure", "alter_procedure", "create_procedure_body", "drop_trigger", 
		"alter_trigger", "create_trigger", "trigger_follows_clause", "trigger_when_clause", 
		"simple_dml_trigger", "for_each_row", "compound_dml_trigger", "non_dml_trigger", 
		"trigger_body", "routine_clause", "compound_trigger_block", "timing_point_section", 
		"non_dml_event", "dml_event_clause", "dml_event_element", "dml_event_nested_clause", 
		"referencing_clause", "referencing_element", "drop_type", "alter_type", 
		"compile_type_clause", "replace_type_clause", "alter_method_spec", "alter_method_element", 
		"alter_attribute_definition", "attribute_definition", "alter_collection_clauses", 
		"dependent_handling_clause", "dependent_exceptions_part", "create_type", 
		"type_definition", "object_type_def", "object_as_part", "object_under_part", 
		"nested_table_type_def", "sqlj_object_type", "type_body", "type_body_elements", 
		"map_order_func_declaration", "subprog_decl_in_type", "proc_decl_in_type", 
		"func_decl_in_type", "constructor_declaration", "modifier_clause", "object_member_spec", 
		"sqlj_object_type_attr", "element_spec", "element_spec_options", "subprogram_spec", 
		"type_procedure_spec", "type_function_spec", "constructor_spec", "map_order_function_spec", 
		"pragma_clause", "pragma_elements", "type_elements_parameter", "drop_sequence", 
		"alter_sequence", "create_sequence", "sequence_spec", "sequence_start_clause", 
		"invoker_rights_clause", "compiler_parameters_clause", "call_spec", "java_spec", 
		"c_spec", "c_agent_in_clause", "c_parameters_clause", "parameter", "default_value_part", 
		"declare_spec", "variable_declaration", "subtype_declaration", "cursor_declaration", 
		"parameter_spec", "exception_declaration", "pragma_declaration", "record_declaration", 
		"record_type_dec", "field_spec", "record_var_dec", "table_declaration", 
		"table_type_dec", "table_indexed_by_part", "varray_type_def", "table_var_dec", 
		"seq_of_statements", "label_declaration", "statement", "assignment_statement", 
		"continue_statement", "exit_statement", "goto_statement", "if_statement", 
		"elsif_part", "else_part", "loop_statement", "cursor_loop_param", "forall_statement", 
		"bounds_clause", "between_bound", "lower_bound", "upper_bound", "null_statement", 
		"raise_statement", "return_statement", "function_call", "body", "exception_clause", 
		"exception_handler", "trigger_block", "block", "sql_statement", "execute_immediate", 
		"dynamic_returning_clause", "data_manipulation_language_statements", "cursor_manipulation_statements", 
		"close_statement", "open_statement", "fetch_statement", "open_for_statement", 
		"transaction_control_statements", "set_transaction_command", "set_constraint_command", 
		"commit_statement", "write_clause", "rollback_statement", "savepoint_statement", 
		"explain_statement", "select_statement", "subquery_factoring_clause", 
		"factoring_element", "search_clause", "cycle_clause", "subquery", "subquery_operation_part", 
		"subquery_basic_elements", "query_block", "selected_element", "from_clause", 
		"select_list_elements", "table_ref_list", "table_ref", "table_ref_aux", 
		"join_clause", "join_on_part", "join_using_part", "outer_join_type", "query_partition_clause", 
		"flashback_query_clause", "pivot_clause", "pivot_element", "pivot_for_clause", 
		"pivot_in_clause", "pivot_in_clause_element", "pivot_in_clause_elements", 
		"unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause", 
		"start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause", 
		"grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause", 
		"cell_reference_options", "return_rows_clause", "reference_model", "main_model", 
		"model_column_clauses", "model_column_partition_part", "model_column_list", 
		"model_column", "model_rules_clause", "model_rules_part", "model_rules_element", 
		"cell_assignment", "model_iterate_clause", "until_part", "order_by_clause", 
		"order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options", 
		"update_statement", "update_set_clause", "column_based_update_set_clause", 
		"delete_statement", "insert_statement", "single_table_insert", "multi_table_insert", 
		"multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
		"conditional_insert_else_part", "insert_into_clause", "values_clause", 
		"merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part", 
		"merge_insert_clause", "selected_tableview", "lock_table_statement", "wait_nowait_part", 
		"lock_table_element", "lock_mode", "general_table_ref", "static_returning_clause", 
		"error_logging_clause", "error_logging_into_part", "error_logging_reject_part", 
		"dml_table_expression_clause", "table_collection_expression", "subquery_restriction_clause", 
		"sample_clause", "seed_part", "cursor_expression", "expression_list", 
		"condition", "condition_wrapper", "expression", "expression_wrapper", 
		"logical_and_expression", "negated_expression", "equality_expression", 
		"multiset_expression", "multiset_type", "relational_expression", "compound_expression", 
		"like_type", "like_escape_part", "in_elements", "between_elements", "concatenation", 
		"concatenation_wrapper", "additive_expression", "multiply_expression", 
		"datetime_expression", "interval_expression", "model_expression", "model_expression_element", 
		"single_column_for_loop", "for_like_part", "for_increment_decrement_type", 
		"multi_column_for_loop", "unary_expression", "case_statement", "simple_case_statement", 
		"simple_case_when_part", "searched_case_statement", "searched_case_when_part", 
		"case_else_part", "atom", "expression_or_vector", "vector_expr", "quantified_expression", 
		"standard_function", "over_clause_keyword", "within_or_over_clause_keyword", 
		"standard_prediction_function_keyword", "over_clause", "windowing_clause", 
		"windowing_type", "windowing_elements", "using_clause", "using_element", 
		"collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
		"xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
		"xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
		"xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part", 
		"xmlserialize_param_version_part", "xmlserialize_param_ident_part", "sql_plus_command", 
		"whenever_command", "set_command", "exit_command", "prompt_command", "show_errors_command", 
		"partition_extension_clause", "column_alias", "table_alias", "alias_quoted_string", 
		"where_clause", "current_of_clause", "into_clause", "xml_column_name", 
		"cost_class_name", "attribute_name", "savepoint_name", "rollback_segment_name", 
		"table_var_name", "schema_name", "routine_name", "package_name", "implementation_type_name", 
		"parameter_name", "reference_model_name", "main_model_name", "aggregate_function_name", 
		"query_name", "constraint_name", "label_name", "type_name", "sequence_name", 
		"exception_name", "function_name", "procedure_name", "trigger_name", "variable_name", 
		"index_name", "cursor_name", "record_name", "collection_name", "link_name", 
		"column_name", "tableview_name", "char_set_name", "keep_clause", "function_argument", 
		"function_argument_analytic", "function_argument_modeling", "respect_or_ignore_nulls", 
		"argument", "type_spec", "datatype", "precision_part", "native_datatype_element", 
		"bind_variable", "general_element", "general_element_part", "table_element", 
		"constant", "numeric", "numeric_negative", "quoted_string", "id", "id_expression", 
		"not_equal_op", "greater_than_or_equals_op", "less_than_or_equals_op", 
		"concatenation_op", "outer_join_sign", "regular_id"
	};

	@Override
	public String getGrammarFileName() { return "plsql.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public plsqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Swallow_to_semiContext extends ParserRuleContext {
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_swallow_to_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSwallow_to_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSwallow_to_semi(this);
		}
	}

	public final Swallow_to_semiContext swallow_to_semi() throws RecognitionException {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_swallow_to_semi);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(761); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(760);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				}
				setState(763); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND) | (1L << CONNECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (END - 64)) | (1L << (ENTITYESCAPING - 64)) | (1L << (ERR - 64)) | (1L << (ERRORS - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVALNAME - 64)) | (1L << (EXCEPTION - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)) | (1L << (INTO - 128)) | (1L << (INVALIDATE - 128)) | (1L << (IS - 128)) | (1L << (ISOLATION - 128)) | (1L << (ITERATE - 128)) | (1L << (JAVA - 128)) | (1L << (JOIN - 128)) | (1L << (KEEP - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)) | (1L << (NONE - 192)) | (1L << (NOORDER - 192)) | (1L << (NOSCHEMACHECK - 192)) | (1L << (NOT - 192)) | (1L << (NOWAIT - 192)) | (1L << (NULL - 192)) | (1L << (NULLS - 192)) | (1L << (NUMBER - 192)) | (1L << (NUMERIC - 192)) | (1L << (NVARCHAR2 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PERCENT_ROWTYPE - 256)) | (1L << (PERCENT_TYPE - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)) | (1L << (RENAME - 256)) | (1L << (REPLACE - 256)) | (1L << (RESPECT - 256)) | (1L << (RESTRICT_REFERENCES - 256)) | (1L << (RESULT - 256)) | (1L << (RESULT_CACHE - 256)) | (1L << (RETURN - 256)) | (1L << (RETURNING - 256)) | (1L << (REUSE - 256)) | (1L << (REVERSE - 256)) | (1L << (REVOKE - 256)) | (1L << (RIGHT - 256)) | (1L << (ROLLBACK - 256)) | (1L << (ROLLUP - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)) | (1L << (SUBMULTISET - 320)) | (1L << (SUBPARTITION - 320)) | (1L << (SUBSTITUTABLE - 320)) | (1L << (SUBTYPE - 320)) | (1L << (SUCCESS - 320)) | (1L << (SUSPEND - 320)) | (1L << (TABLE - 320)) | (1L << (THE - 320)) | (1L << (THEN - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 320)) | (1L << (TIMESTAMP_UNCONSTRAINED - 320)) | (1L << (TIMEZONE_ABBR - 320)) | (1L << (TIMEZONE_HOUR - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)) | (1L << (XML - 384)) | (1L << (XMLAGG - 384)) | (1L << (XMLATTRIBUTES - 384)) | (1L << (XMLCAST - 384)) | (1L << (XMLCOLATTVAL - 384)) | (1L << (XMLELEMENT - 384)) | (1L << (XMLEXISTS - 384)) | (1L << (XMLFOREST - 384)) | (1L << (XMLNAMESPACES - 384)) | (1L << (XMLPARSE - 384)) | (1L << (XMLPI - 384)) | (1L << (XMLQUERY - 384)) | (1L << (XMLROOT - 384)) | (1L << (XMLSERIALIZE - 384)) | (1L << (XMLTABLE - 384)) | (1L << (YEAR - 384)) | (1L << (YES - 384)) | (1L << (YMINTERVAL_UNCONSTRAINED - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (BIT_STRING_LIT - 448)) | (1L << (HEX_STRING_LIT - 448)) | (1L << (DOUBLE_PERIOD - 448)) | (1L << (PERIOD - 448)) | (1L << (UNSIGNED_INTEGER - 448)) | (1L << (APPROXIMATE_NUM_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)) | (1L << (PERCENT - 448)) | (1L << (AMPERSAND - 448)) | (1L << (LEFT_PAREN - 448)) | (1L << (RIGHT_PAREN - 448)) | (1L << (DOUBLE_ASTERISK - 448)) | (1L << (ASTERISK - 448)) | (1L << (PLUS_SIGN - 448)) | (1L << (MINUS_SIGN - 448)) | (1L << (COMMA - 448)) | (1L << (SOLIDUS - 448)) | (1L << (AT_SIGN - 448)) | (1L << (ASSIGN_OP - 448)) | (1L << (BINDVAR - 448)) | (1L << (COLON - 448)) | (1L << (LESS_THAN_OR_EQUALS_OP - 448)) | (1L << (LESS_THAN_OP - 448)) | (1L << (GREATER_THAN_OR_EQUALS_OP - 448)) | (1L << (NOT_EQUAL_OP - 448)) | (1L << (CARRET_OPERATOR_PART - 448)) | (1L << (TILDE_OPERATOR_PART - 448)) | (1L << (EXCLAMATION_OPERATOR_PART - 448)) | (1L << (GREATER_THAN_OP - 448)) | (1L << (CONCATENATION_OP - 448)) | (1L << (VERTICAL_BAR - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (EQUALS_OP - 512)) | (1L << (LEFT_BRACKET - 512)) | (1L << (RIGHT_BRACKET - 512)) | (1L << (INTRODUCER - 512)) | (1L << (SPACES - 512)) | (1L << (SINGLE_LINE_COMMENT - 512)) | (1L << (MULTI_LINE_COMMENT - 512)) | (1L << (PROMPT - 512)) | (1L << (SQL92_RESERVED_ALL - 512)) | (1L << (SQL92_RESERVED_ALTER - 512)) | (1L << (SQL92_RESERVED_AND - 512)) | (1L << (SQL92_RESERVED_ANY - 512)) | (1L << (SQL92_RESERVED_AS - 512)) | (1L << (SQL92_RESERVED_ASC - 512)) | (1L << (SQL92_RESERVED_BEGIN - 512)) | (1L << (SQL92_RESERVED_BETWEEN - 512)) | (1L << (SQL92_RESERVED_BY - 512)) | (1L << (SQL92_RESERVED_CASE - 512)) | (1L << (SQL92_RESERVED_CHECK - 512)) | (1L << (PLSQL_RESERVED_CLUSTERS - 512)) | (1L << (PLSQL_RESERVED_COLAUTH - 512)) | (1L << (PLSQL_RESERVED_COMPRESS - 512)) | (1L << (SQL92_RESERVED_CONNECT - 512)) | (1L << (PLSQL_NON_RESERVED_CONNECT_BY_ROOT - 512)) | (1L << (PLSQL_RESERVED_CRASH - 512)) | (1L << (SQL92_RESERVED_CREATE - 512)) | (1L << (SQL92_RESERVED_CURRENT - 512)) | (1L << (SQL92_RESERVED_CURSOR - 512)) | (1L << (SQL92_RESERVED_DATE - 512)) | (1L << (SQL92_RESERVED_DECLARE - 512)) | (1L << (SQL92_RESERVED_DEFAULT - 512)) | (1L << (SQL92_RESERVED_DELETE - 512)) | (1L << (SQL92_RESERVED_DESC - 512)) | (1L << (SQL92_RESERVED_DISTINCT - 512)) | (1L << (SQL92_RESERVED_DROP - 512)) | (1L << (SQL92_RESERVED_ELSE - 512)) | (1L << (SQL92_RESERVED_END - 512)) | (1L << (SQL92_RESERVED_EXCEPTION - 512)) | (1L << (PLSQL_RESERVED_EXCLUSIVE - 512)) | (1L << (SQL92_RESERVED_EXISTS - 512)) | (1L << (SQL92_RESERVED_FALSE - 512)) | (1L << (SQL92_RESERVED_FETCH - 512)) | (1L << (SQL92_RESERVED_FOR - 512)) | (1L << (SQL92_RESERVED_FROM - 512)) | (1L << (SQL92_RESERVED_GOTO - 512)) | (1L << (SQL92_RESERVED_GRANT - 512)) | (1L << (SQL92_RESERVED_GROUP - 512)) | (1L << (SQL92_RESERVED_HAVING - 512)) | (1L << (PLSQL_RESERVED_IDENTIFIED - 512)) | (1L << (PLSQL_RESERVED_IF - 512)) | (1L << (SQL92_RESERVED_IN - 512)) | (1L << (PLSQL_RESERVED_INDEX - 512)) | (1L << (PLSQL_RESERVED_INDEXES - 512)) | (1L << (SQL92_RESERVED_INSERT - 512)) | (1L << (SQL92_RESERVED_INTERSECT - 512)) | (1L << (SQL92_RESERVED_INTO - 512)) | (1L << (SQL92_RESERVED_IS - 512)) | (1L << (SQL92_RESERVED_LIKE - 512)) | (1L << (PLSQL_RESERVED_LOCK - 512)) | (1L << (PLSQL_RESERVED_MINUS - 512)) | (1L << (PLSQL_RESERVED_MODE - 512)) | (1L << (PLSQL_RESERVED_NOCOMPRESS - 512)) | (1L << (SQL92_RESERVED_NOT - 512)) | (1L << (PLSQL_RESERVED_NOWAIT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (SQL92_RESERVED_NULL - 576)) | (1L << (SQL92_RESERVED_OF - 576)) | (1L << (SQL92_RESERVED_ON - 576)) | (1L << (SQL92_RESERVED_OPTION - 576)) | (1L << (SQL92_RESERVED_OR - 576)) | (1L << (SQL92_RESERVED_ORDER - 576)) | (1L << (SQL92_RESERVED_OVERLAPS - 576)) | (1L << (SQL92_RESERVED_PRIOR - 576)) | (1L << (SQL92_RESERVED_PROCEDURE - 576)) | (1L << (SQL92_RESERVED_PUBLIC - 576)) | (1L << (PLSQL_RESERVED_RESOURCE - 576)) | (1L << (SQL92_RESERVED_REVOKE - 576)) | (1L << (SQL92_RESERVED_SELECT - 576)) | (1L << (PLSQL_RESERVED_SHARE - 576)) | (1L << (SQL92_RESERVED_SIZE - 576)) | (1L << (PLSQL_RESERVED_START - 576)) | (1L << (PLSQL_RESERVED_TABAUTH - 576)) | (1L << (SQL92_RESERVED_TABLE - 576)) | (1L << (SQL92_RESERVED_THE - 576)) | (1L << (SQL92_RESERVED_THEN - 576)) | (1L << (SQL92_RESERVED_TO - 576)) | (1L << (SQL92_RESERVED_TRUE - 576)) | (1L << (SQL92_RESERVED_UNION - 576)) | (1L << (SQL92_RESERVED_UNIQUE - 576)) | (1L << (SQL92_RESERVED_UPDATE - 576)) | (1L << (SQL92_RESERVED_VALUES - 576)) | (1L << (SQL92_RESERVED_VIEW - 576)) | (1L << (PLSQL_RESERVED_VIEWS - 576)) | (1L << (SQL92_RESERVED_WHEN - 576)) | (1L << (SQL92_RESERVED_WHERE - 576)) | (1L << (SQL92_RESERVED_WITH - 576)) | (1L << (PLSQL_NON_RESERVED_USING - 576)) | (1L << (PLSQL_NON_RESERVED_MODEL - 576)) | (1L << (PLSQL_NON_RESERVED_ELSIF - 576)) | (1L << (PLSQL_NON_RESERVED_PIVOT - 576)) | (1L << (PLSQL_NON_RESERVED_UNPIVOT - 576)) | (1L << (REGULAR_ID - 576)) | (1L << (ZV - 576)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compilation_unitContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(plsqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compilation_unit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompilation_unit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompilation_unit(this);
		}
	}

	public final Compilation_unitContext compilation_unit() throws RecognitionException {
		Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_compilation_unit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALTER || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (CREATE - 77)) | (1L << (DELETE - 77)) | (1L << (DROP - 77)) | (1L << (EXPLAIN - 77)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (FUNCTION - 152)) | (1L << (INSERT - 152)) | (1L << (LOCK - 152)))) != 0) || _la==MERGE || _la==PROCEDURE || _la==SELECT || _la==UPDATE || _la==WITH || _la==LEFT_PAREN) {
				{
				{
				setState(765); unit_statement();
				}
				}
				setState(770);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(771); match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_scriptContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(plsqlParser.EOF, 0); }
		public List<Sql_plus_commandContext> sql_plus_command() {
			return getRuleContexts(Sql_plus_commandContext.class);
		}
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public Sql_plus_commandContext sql_plus_command(int i) {
			return getRuleContext(Sql_plus_commandContext.class,i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_script; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_script(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_script(this);
		}
	}

	public final Sql_scriptContext sql_script() throws RecognitionException {
		Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_script);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALTER || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (CREATE - 77)) | (1L << (DELETE - 77)) | (1L << (DROP - 77)) | (1L << (EXIT - 77)) | (1L << (EXPLAIN - 77)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (FUNCTION - 152)) | (1L << (INSERT - 152)) | (1L << (LOCK - 152)))) != 0) || _la==MERGE || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (PROCEDURE - 294)) | (1L << (SELECT - 294)) | (1L << (SET - 294)) | (1L << (SHOW - 294)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (UPDATE - 403)) | (1L << (WHENEVER - 403)) | (1L << (WITH - 403)))) != 0) || ((((_la - 489)) & ~0x3f) == 0 && ((1L << (_la - 489)) & ((1L << (LEFT_PAREN - 489)) | (1L << (SOLIDUS - 489)) | (1L << (PROMPT - 489)))) != 0)) {
				{
				setState(775);
				switch (_input.LA(1)) {
				case ALTER:
				case CREATE:
				case DELETE:
				case DROP:
				case EXPLAIN:
				case FUNCTION:
				case INSERT:
				case LOCK:
				case MERGE:
				case PROCEDURE:
				case SELECT:
				case UPDATE:
				case WITH:
				case LEFT_PAREN:
					{
					setState(773); unit_statement();
					}
					break;
				case EXIT:
				case SET:
				case SHOW:
				case WHENEVER:
				case SOLIDUS:
				case PROMPT:
					{
					setState(774); sql_plus_command();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(779);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(780); match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unit_statementContext extends ParserRuleContext {
		public Create_triggerContext create_trigger() {
			return getRuleContext(Create_triggerContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Alter_typeContext alter_type() {
			return getRuleContext(Alter_typeContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_procedureContext alter_procedure() {
			return getRuleContext(Alter_procedureContext.class,0);
		}
		public Alter_functionContext alter_function() {
			return getRuleContext(Alter_functionContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Drop_packageContext drop_package() {
			return getRuleContext(Drop_packageContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Alter_triggerContext alter_trigger() {
			return getRuleContext(Alter_triggerContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Alter_packageContext alter_package() {
			return getRuleContext(Alter_packageContext.class,0);
		}
		public Create_packageContext create_package() {
			return getRuleContext(Create_packageContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnit_statement(this);
		}
	}

	public final Unit_statementContext unit_statement() throws RecognitionException {
		Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_unit_statement);
		try {
			setState(801);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(782); alter_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(783); alter_package();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(784); alter_procedure();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(785); alter_sequence();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(786); alter_trigger();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(787); alter_type();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(788); create_function_body();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(789); create_procedure_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(790); create_package();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(791); create_sequence();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(792); create_trigger();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(793); create_type();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(794); drop_function();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(795); drop_package();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(796); drop_procedure();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(797); drop_sequence();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(798); drop_trigger();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(799); drop_type();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(800); data_manipulation_language_statements();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_function(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_drop_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(803); match(DROP);
			setState(804); match(FUNCTION);
			setState(805); function_name();
			setState(806); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_functionContext extends ParserRuleContext {
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_function(this);
		}
	}

	public final Alter_functionContext alter_function() throws RecognitionException {
		Alter_functionContext _localctx = new Alter_functionContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_alter_function);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(808); match(ALTER);
			setState(809); match(FUNCTION);
			setState(810); function_name();
			setState(811); match(COMPILE);
			setState(813);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				setState(812); match(DEBUG);
				}
				break;
			}
			setState(818);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(815); compiler_parameters_clause();
					}
					} 
				}
				setState(820);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			}
			setState(823);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(821); match(REUSE);
				setState(822); match(SETTINGS);
				}
			}

			setState(825); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_bodyContext extends ParserRuleContext {
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public TerminalNode AGGREGATE() { return getToken(plsqlParser.AGGREGATE, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(plsqlParser.DETERMINISTIC); }
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Implementation_type_nameContext implementation_type_name() {
			return getRuleContext(Implementation_type_nameContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(plsqlParser.DETERMINISTIC, i);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public TerminalNode PIPELINED() { return getToken(plsqlParser.PIPELINED, 0); }
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_function_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_function_body(this);
		}
	}

	public final Create_function_bodyContext create_function_body() throws RecognitionException {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_create_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(832);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(827); match(CREATE);
				setState(830);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(828); match(OR);
					setState(829); match(REPLACE);
					}
				}

				}
			}

			setState(834); match(FUNCTION);
			setState(835); function_name();
			setState(847);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(836); match(LEFT_PAREN);
				setState(837); parameter();
				setState(842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(838); match(COMMA);
					setState(839); parameter();
					}
					}
					setState(844);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(845); match(RIGHT_PAREN);
				}
			}

			setState(849); match(RETURN);
			setState(850); type_spec();
			setState(857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				setState(855);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(851); invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(852); parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(853); result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(854); match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(859);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(880);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				{
				setState(861);
				_la = _input.LA(1);
				if (_la==PIPELINED) {
					{
					setState(860); match(PIPELINED);
					}
				}

				setState(863);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(875);
				switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
				case 1:
					{
					setState(865);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(864); match(DECLARE);
						}
					}

					setState(870);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)) | (1L << (BINDVAR - 451)) | (1L << (COLON - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						{
						setState(867); declare_spec();
						}
						}
						setState(872);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(873); body();
					}
					break;
				case 2:
					{
					setState(874); call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(877);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(878); match(USING);
				setState(879); implementation_type_name();
				}
				break;
			}
			setState(882); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parallel_enable_clauseContext extends ParserRuleContext {
		public Partition_by_clauseContext partition_by_clause() {
			return getRuleContext(Partition_by_clauseContext.class,0);
		}
		public TerminalNode PARALLEL_ENABLE() { return getToken(plsqlParser.PARALLEL_ENABLE, 0); }
		public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_enable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParallel_enable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParallel_enable_clause(this);
		}
	}

	public final Parallel_enable_clauseContext parallel_enable_clause() throws RecognitionException {
		Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_parallel_enable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(884); match(PARALLEL_ENABLE);
			setState(886);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(885); partition_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_by_clauseContext extends ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Streaming_clauseContext streaming_clause() {
			return getRuleContext(Streaming_clauseContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode ANY() { return getToken(plsqlParser.ANY, 0); }
		public TerminalNode HASH() { return getToken(plsqlParser.HASH, 0); }
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPartition_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPartition_by_clause(this);
		}
	}

	public final Partition_by_clauseContext partition_by_clause() throws RecognitionException {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_partition_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(888); match(LEFT_PAREN);
			setState(889); match(PARTITION);
			setState(890); expression();
			setState(891); match(BY);
			setState(905);
			switch (_input.LA(1)) {
			case ANY:
				{
				setState(892); match(ANY);
				}
				break;
			case HASH:
			case RANGE:
				{
				setState(893);
				_la = _input.LA(1);
				if ( !(_la==HASH || _la==RANGE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(894); match(LEFT_PAREN);
				setState(895); column_name();
				setState(900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(896); match(COMMA);
					setState(897); column_name();
					}
					}
					setState(902);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(903); match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(908);
			_la = _input.LA(1);
			if (_la==CLUSTER || _la==ORDER) {
				{
				setState(907); streaming_clause();
				}
			}

			setState(910); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_cache_clauseContext extends ParserRuleContext {
		public TerminalNode RESULT_CACHE() { return getToken(plsqlParser.RESULT_CACHE, 0); }
		public Relies_on_partContext relies_on_part() {
			return getRuleContext(Relies_on_partContext.class,0);
		}
		public Result_cache_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_cache_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterResult_cache_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitResult_cache_clause(this);
		}
	}

	public final Result_cache_clauseContext result_cache_clause() throws RecognitionException {
		Result_cache_clauseContext _localctx = new Result_cache_clauseContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_result_cache_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(912); match(RESULT_CACHE);
			setState(914);
			_la = _input.LA(1);
			if (_la==RELIES_ON) {
				{
				setState(913); relies_on_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relies_on_partContext extends ParserRuleContext {
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public TerminalNode RELIES_ON() { return getToken(plsqlParser.RELIES_ON, 0); }
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public Relies_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relies_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRelies_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRelies_on_part(this);
		}
	}

	public final Relies_on_partContext relies_on_part() throws RecognitionException {
		Relies_on_partContext _localctx = new Relies_on_partContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_relies_on_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(916); match(RELIES_ON);
			setState(917); match(LEFT_PAREN);
			setState(918); tableview_name();
			setState(923);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(919); match(COMMA);
				setState(920); tableview_name();
				}
				}
				setState(925);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(926); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Streaming_clauseContext extends ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public TerminalNode CLUSTER() { return getToken(plsqlParser.CLUSTER, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Streaming_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_streaming_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStreaming_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStreaming_clause(this);
		}
	}

	public final Streaming_clauseContext streaming_clause() throws RecognitionException {
		Streaming_clauseContext _localctx = new Streaming_clauseContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_streaming_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(928);
			_la = _input.LA(1);
			if ( !(_la==CLUSTER || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(929); expression();
			setState(930); match(BY);
			setState(931); match(LEFT_PAREN);
			setState(932); column_name();
			setState(937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(933); match(COMMA);
				setState(934); column_name();
				}
				}
				setState(939);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(940); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_packageContext extends ParserRuleContext {
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public Drop_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_package(this);
		}
	}

	public final Drop_packageContext drop_package() throws RecognitionException {
		Drop_packageContext _localctx = new Drop_packageContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_drop_package);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(942); match(DROP);
			setState(943); match(PACKAGE);
			setState(945);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(944); match(BODY);
				}
				break;
			}
			setState(947); package_name();
			setState(948); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_packageContext extends ParserRuleContext {
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public List<TerminalNode> PACKAGE() { return getTokens(plsqlParser.PACKAGE); }
		public TerminalNode PACKAGE(int i) {
			return getToken(plsqlParser.PACKAGE, i);
		}
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public Alter_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_package(this);
		}
	}

	public final Alter_packageContext alter_package() throws RecognitionException {
		Alter_packageContext _localctx = new Alter_packageContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_alter_package);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(950); match(ALTER);
			setState(951); match(PACKAGE);
			setState(952); package_name();
			setState(953); match(COMPILE);
			setState(955);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				setState(954); match(DEBUG);
				}
				break;
			}
			setState(958);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				setState(957);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			}
			setState(963);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,29,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(960); compiler_parameters_clause();
					}
					} 
				}
				setState(965);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,29,_ctx);
			}
			setState(968);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(966); match(REUSE);
				setState(967); match(SETTINGS);
				}
			}

			setState(970); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_packageContext extends ParserRuleContext {
		public Package_specContext package_spec() {
			return getRuleContext(Package_specContext.class,0);
		}
		public Package_bodyContext package_body() {
			return getRuleContext(Package_bodyContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public Create_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_package(this);
		}
	}

	public final Create_packageContext create_package() throws RecognitionException {
		Create_packageContext _localctx = new Create_packageContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_create_package);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(972); match(CREATE);
			setState(975);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(973); match(OR);
				setState(974); match(REPLACE);
				}
			}

			setState(977); match(PACKAGE);
			setState(980);
			switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				setState(978); package_spec();
				}
				break;
			case 2:
				{
				setState(979); package_body();
				}
				break;
			}
			setState(982); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_bodyContext extends ParserRuleContext {
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<Package_obj_bodyContext> package_obj_body() {
			return getRuleContexts(Package_obj_bodyContext.class);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Package_obj_bodyContext package_obj_body(int i) {
			return getRuleContext(Package_obj_bodyContext.class,i);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode BEGIN() { return getToken(plsqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Package_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_body(this);
		}
	}

	public final Package_bodyContext package_body() throws RecognitionException {
		Package_bodyContext _localctx = new Package_bodyContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_package_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(984); match(BODY);
			setState(985); package_name();
			setState(986);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)) | (1L << (BINDVAR - 451)) | (1L << (COLON - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				{
				setState(987); package_obj_body();
				}
				}
				setState(992);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(999);
			switch (_input.LA(1)) {
			case BEGIN:
				{
				setState(993); match(BEGIN);
				setState(994); seq_of_statements();
				}
				break;
			case END:
				{
				setState(995); match(END);
				setState(997);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					setState(996); package_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_specContext extends ParserRuleContext {
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public List<Package_obj_specContext> package_obj_spec() {
			return getRuleContexts(Package_obj_specContext.class);
		}
		public Package_obj_specContext package_obj_spec(int i) {
			return getRuleContext(Package_obj_specContext.class,i);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Package_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_spec(this);
		}
	}

	public final Package_specContext package_spec() throws RecognitionException {
		Package_specContext _localctx = new Package_specContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_package_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1001); package_name();
			setState(1003);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1002); invoker_rights_clause();
				}
			}

			setState(1005);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1009);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)) | (1L << (BINDVAR - 451)) | (1L << (COLON - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				{
				setState(1006); package_obj_spec();
				}
				}
				setState(1011);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1012); match(END);
			setState(1014);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(1013); package_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_specContext extends ParserRuleContext {
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Package_obj_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_obj_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_obj_spec(this);
		}
	}

	public final Package_obj_specContext package_obj_spec() throws RecognitionException {
		Package_obj_specContext _localctx = new Package_obj_specContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_package_obj_spec);
		try {
			setState(1025);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1016); variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1017); subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1018); cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1019); exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1020); pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1021); record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1022); table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1023); procedure_spec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1024); function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_specContext extends ParserRuleContext {
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProcedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProcedure_spec(this);
		}
	}

	public final Procedure_specContext procedure_spec() throws RecognitionException {
		Procedure_specContext _localctx = new Procedure_specContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1027); match(PROCEDURE);
			setState(1028); procedure_name();
			setState(1040);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1029); match(LEFT_PAREN);
				setState(1030); parameter();
				setState(1035);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1031); match(COMMA);
					setState(1032); parameter();
					}
					}
					setState(1037);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1038); match(RIGHT_PAREN);
				}
			}

			setState(1042); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_specContext extends ParserRuleContext {
		public TerminalNode DETERMINISTIC() { return getToken(plsqlParser.DETERMINISTIC, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode RESULT_CACHE() { return getToken(plsqlParser.RESULT_CACHE, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_spec(this);
		}
	}

	public final Function_specContext function_spec() throws RecognitionException {
		Function_specContext _localctx = new Function_specContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1044); match(FUNCTION);
			setState(1045); function_name();
			setState(1057);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1046); match(LEFT_PAREN);
				setState(1047); parameter();
				setState(1052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1048); match(COMMA);
					setState(1049); parameter();
					}
					}
					setState(1054);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1055); match(RIGHT_PAREN);
				}
			}

			setState(1059); match(RETURN);
			setState(1060); type_spec();
			setState(1062);
			_la = _input.LA(1);
			if (_la==DETERMINISTIC) {
				{
				setState(1061); match(DETERMINISTIC);
				}
			}

			setState(1065);
			_la = _input.LA(1);
			if (_la==RESULT_CACHE) {
				{
				setState(1064); match(RESULT_CACHE);
				}
			}

			setState(1067); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_bodyContext extends ParserRuleContext {
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Package_obj_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_obj_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_obj_body(this);
		}
	}

	public final Package_obj_bodyContext package_obj_body() throws RecognitionException {
		Package_obj_bodyContext _localctx = new Package_obj_bodyContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_package_obj_body);
		try {
			setState(1079);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1069); variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1070); subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1071); cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1072); exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1073); record_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1074); table_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1075); create_procedure_body();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1076); create_function_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1077); procedure_spec();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1078); function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_procedure(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_drop_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1081); match(DROP);
			setState(1082); match(PROCEDURE);
			setState(1083); procedure_name();
			setState(1084); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_procedureContext extends ParserRuleContext {
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_procedure(this);
		}
	}

	public final Alter_procedureContext alter_procedure() throws RecognitionException {
		Alter_procedureContext _localctx = new Alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_alter_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1086); match(ALTER);
			setState(1087); match(PROCEDURE);
			setState(1088); procedure_name();
			setState(1089); match(COMPILE);
			setState(1091);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				setState(1090); match(DEBUG);
				}
				break;
			}
			setState(1096);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1093); compiler_parameters_clause();
					}
					} 
				}
				setState(1098);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			}
			setState(1101);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1099); match(REUSE);
				setState(1100); match(SETTINGS);
				}
			}

			setState(1103); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedure_bodyContext extends ParserRuleContext {
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_procedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_procedure_body(this);
		}
	}

	public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_create_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1110);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(1105); match(CREATE);
				setState(1108);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1106); match(OR);
					setState(1107); match(REPLACE);
					}
				}

				}
			}

			setState(1112); match(PROCEDURE);
			setState(1113); procedure_name();
			setState(1125);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1114); match(LEFT_PAREN);
				setState(1115); parameter();
				setState(1120);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1116); match(COMMA);
					setState(1117); parameter();
					}
					}
					setState(1122);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1123); match(RIGHT_PAREN);
				}
			}

			setState(1128);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1127); invoker_rights_clause();
				}
			}

			setState(1130);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1143);
			switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				setState(1132);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1131); match(DECLARE);
					}
				}

				setState(1137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)) | (1L << (BINDVAR - 451)) | (1L << (COLON - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					{
					setState(1134); declare_spec();
					}
					}
					setState(1139);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1140); body();
				}
				break;
			case 2:
				{
				setState(1141); call_spec();
				}
				break;
			case 3:
				{
				setState(1142); match(EXTERNAL);
				}
				break;
			}
			setState(1145); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_trigger(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_drop_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1147); match(DROP);
			setState(1148); match(TRIGGER);
			setState(1149); trigger_name();
			setState(1150); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_triggerContext extends ParserRuleContext {
		public Trigger_nameContext tn1;
		public Trigger_nameContext tn2;
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public Alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_trigger(this);
		}
	}

	public final Alter_triggerContext alter_trigger() throws RecognitionException {
		Alter_triggerContext _localctx = new Alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_alter_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1152); match(ALTER);
			setState(1153); match(TRIGGER);
			setState(1154); ((Alter_triggerContext)_localctx).tn1 = trigger_name();
			setState(1173);
			switch (_input.LA(1)) {
			case DISABLE:
			case ENABLE:
				{
				setState(1155);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case RENAME:
				{
				setState(1156); match(RENAME);
				setState(1157); match(TO);
				setState(1158); ((Alter_triggerContext)_localctx).tn2 = trigger_name();
				}
				break;
			case COMPILE:
				{
				setState(1159); match(COMPILE);
				setState(1161);
				switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					setState(1160); match(DEBUG);
					}
					break;
				}
				setState(1166);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,59,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1163); compiler_parameters_clause();
						}
						} 
					}
					setState(1168);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,59,_ctx);
				}
				setState(1171);
				_la = _input.LA(1);
				if (_la==REUSE) {
					{
					setState(1169); match(REUSE);
					setState(1170); match(SETTINGS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1175); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_triggerContext extends ParserRuleContext {
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public Trigger_bodyContext trigger_body() {
			return getRuleContext(Trigger_bodyContext.class,0);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public Simple_dml_triggerContext simple_dml_trigger() {
			return getRuleContext(Simple_dml_triggerContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Trigger_when_clauseContext trigger_when_clause() {
			return getRuleContext(Trigger_when_clauseContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public Non_dml_triggerContext non_dml_trigger() {
			return getRuleContext(Non_dml_triggerContext.class,0);
		}
		public Compound_dml_triggerContext compound_dml_trigger() {
			return getRuleContext(Compound_dml_triggerContext.class,0);
		}
		public Trigger_follows_clauseContext trigger_follows_clause() {
			return getRuleContext(Trigger_follows_clauseContext.class,0);
		}
		public Create_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_trigger(this);
		}
	}

	public final Create_triggerContext create_trigger() throws RecognitionException {
		Create_triggerContext _localctx = new Create_triggerContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_create_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1177); match(CREATE);
			setState(1180);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1178); match(OR);
				setState(1179); match(REPLACE);
				}
			}

			setState(1182); match(TRIGGER);
			setState(1183); trigger_name();
			setState(1187);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				setState(1184); simple_dml_trigger();
				}
				break;
			case 2:
				{
				setState(1185); compound_dml_trigger();
				}
				break;
			case 3:
				{
				setState(1186); non_dml_trigger();
				}
				break;
			}
			setState(1190);
			switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				setState(1189); trigger_follows_clause();
				}
				break;
			}
			setState(1193);
			switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				setState(1192);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			}
			setState(1196);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(1195); trigger_when_clause();
				}
			}

			setState(1198); trigger_body();
			setState(1199); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_follows_clauseContext extends ParserRuleContext {
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_follows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_follows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_follows_clause(this);
		}
	}

	public final Trigger_follows_clauseContext trigger_follows_clause() throws RecognitionException {
		Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_trigger_follows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1201); match(FOLLOWS);
			setState(1202); trigger_name();
			setState(1207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1203); match(COMMA);
				setState(1204); trigger_name();
				}
				}
				setState(1209);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_when_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_when_clause(this);
		}
	}

	public final Trigger_when_clauseContext trigger_when_clause() throws RecognitionException {
		Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_trigger_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1210); match(WHEN);
			setState(1211); match(LEFT_PAREN);
			setState(1212); condition();
			setState(1213); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_dml_triggerContext extends ParserRuleContext {
		public For_each_rowContext for_each_row() {
			return getRuleContext(For_each_rowContext.class,0);
		}
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public TerminalNode INSTEAD() { return getToken(plsqlParser.INSTEAD, 0); }
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_dml_trigger(this);
		}
	}

	public final Simple_dml_triggerContext simple_dml_trigger() throws RecognitionException {
		Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_simple_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1219);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(1215); match(BEFORE);
				}
				break;
			case AFTER:
				{
				setState(1216); match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(1217); match(INSTEAD);
				setState(1218); match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1221); dml_event_clause();
			setState(1223);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				setState(1222); referencing_clause();
				}
				break;
			}
			setState(1226);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1225); for_each_row();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_each_rowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(plsqlParser.EACH, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_each_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_each_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_each_row(this);
		}
	}

	public final For_each_rowContext for_each_row() throws RecognitionException {
		For_each_rowContext _localctx = new For_each_rowContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_for_each_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1228); match(FOR);
			setState(1229); match(EACH);
			setState(1230); match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_dml_triggerContext extends ParserRuleContext {
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompound_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompound_dml_trigger(this);
		}
	}

	public final Compound_dml_triggerContext compound_dml_trigger() throws RecognitionException {
		Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_compound_dml_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1232); match(FOR);
			setState(1233); dml_event_clause();
			setState(1235);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				setState(1234); referencing_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_triggerContext extends ParserRuleContext {
		public Non_dml_eventContext non_dml_event(int i) {
			return getRuleContext(Non_dml_eventContext.class,i);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public List<Non_dml_eventContext> non_dml_event() {
			return getRuleContexts(Non_dml_eventContext.class);
		}
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public Non_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNon_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNon_dml_trigger(this);
		}
	}

	public final Non_dml_triggerContext non_dml_trigger() throws RecognitionException {
		Non_dml_triggerContext _localctx = new Non_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_non_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1237);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1238); non_dml_event();
			setState(1243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1239); match(OR);
				setState(1240); non_dml_event();
				}
				}
				setState(1245);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1246); match(ON);
			setState(1254);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				setState(1247); match(DATABASE);
				}
				break;
			case 2:
				{
				setState(1251);
				switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
				case 1:
					{
					setState(1248); schema_name();
					setState(1249); match(PERIOD);
					}
					break;
				}
				setState(1253); match(SCHEMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_bodyContext extends ParserRuleContext {
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public Trigger_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_body(this);
		}
	}

	public final Trigger_bodyContext trigger_body() throws RecognitionException {
		Trigger_bodyContext _localctx = new Trigger_bodyContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_trigger_body);
		try {
			setState(1261);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1256); match(COMPOUND);
				setState(1257); match(TRIGGER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1258); match(CALL);
				setState(1259); id();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1260); trigger_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_clauseContext extends ParserRuleContext {
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public Routine_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRoutine_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRoutine_clause(this);
		}
	}

	public final Routine_clauseContext routine_clause() throws RecognitionException {
		Routine_clauseContext _localctx = new Routine_clauseContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_routine_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1263); routine_name();
			setState(1265);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1264); function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_trigger_blockContext extends ParserRuleContext {
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Timing_point_sectionContext timing_point_section(int i) {
			return getRuleContext(Timing_point_sectionContext.class,i);
		}
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public List<Timing_point_sectionContext> timing_point_section() {
			return getRuleContexts(Timing_point_sectionContext.class);
		}
		public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompound_trigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompound_trigger_block(this);
		}
	}

	public final Compound_trigger_blockContext compound_trigger_block() throws RecognitionException {
		Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_compound_trigger_block);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1267); match(COMPOUND);
			setState(1268); match(TRIGGER);
			setState(1272);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1269); declare_spec();
					}
					} 
				}
				setState(1274);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
			}
			setState(1276); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1275); timing_point_section();
				}
				}
				setState(1278); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AFTER || _la==BEFORE );
			setState(1280); match(END);
			setState(1281); trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timing_point_sectionContext extends ParserRuleContext {
		public Token bk;
		public Token ak;
		public List<TerminalNode> ROW() { return getTokens(plsqlParser.ROW); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public TerminalNode ROW(int i) {
			return getToken(plsqlParser.ROW, i);
		}
		public List<TerminalNode> BEFORE() { return getTokens(plsqlParser.BEFORE); }
		public List<TerminalNode> STATEMENT() { return getTokens(plsqlParser.STATEMENT); }
		public TerminalNode STATEMENT(int i) {
			return getToken(plsqlParser.STATEMENT, i);
		}
		public TerminalNode AFTER(int i) {
			return getToken(plsqlParser.AFTER, i);
		}
		public TerminalNode EACH(int i) {
			return getToken(plsqlParser.EACH, i);
		}
		public List<TerminalNode> EACH() { return getTokens(plsqlParser.EACH); }
		public TerminalNode BEFORE(int i) {
			return getToken(plsqlParser.BEFORE, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(plsqlParser.AFTER); }
		public Timing_point_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timing_point_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTiming_point_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTiming_point_section(this);
		}
	}

	public final Timing_point_sectionContext timing_point_section() throws RecognitionException {
		Timing_point_sectionContext _localctx = new Timing_point_sectionContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_timing_point_section);
		try {
			setState(1319);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1283); ((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1284); match(STATEMENT);
				setState(1285); match(IS);
				setState(1286); trigger_block();
				setState(1287); match(BEFORE);
				setState(1288); match(STATEMENT);
				setState(1289); match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1291); ((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1292); match(EACH);
				setState(1293); match(ROW);
				setState(1294); match(IS);
				setState(1295); trigger_block();
				setState(1296); match(BEFORE);
				setState(1297); match(EACH);
				setState(1298); match(ROW);
				setState(1299); match(SEMICOLON);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1301); ((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1302); match(STATEMENT);
				setState(1303); match(IS);
				setState(1304); trigger_block();
				setState(1305); match(AFTER);
				setState(1306); match(STATEMENT);
				setState(1307); match(SEMICOLON);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1309); ((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1310); match(EACH);
				setState(1311); match(ROW);
				setState(1312); match(IS);
				setState(1313); trigger_block();
				setState(1314); match(AFTER);
				setState(1315); match(EACH);
				setState(1316); match(ROW);
				setState(1317); match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_eventContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public TerminalNode LOGON() { return getToken(plsqlParser.LOGON, 0); }
		public TerminalNode REVOKE() { return getToken(plsqlParser.REVOKE, 0); }
		public TerminalNode SUSPEND() { return getToken(plsqlParser.SUSPEND, 0); }
		public TerminalNode ANALYZE() { return getToken(plsqlParser.ANALYZE, 0); }
		public TerminalNode SERVERERROR() { return getToken(plsqlParser.SERVERERROR, 0); }
		public TerminalNode STATISTICS() { return getToken(plsqlParser.STATISTICS, 0); }
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public TerminalNode SHUTDOWN() { return getToken(plsqlParser.SHUTDOWN, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(plsqlParser.DISASSOCIATE, 0); }
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public TerminalNode ASSOCIATE() { return getToken(plsqlParser.ASSOCIATE, 0); }
		public TerminalNode STARTUP() { return getToken(plsqlParser.STARTUP, 0); }
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode GRANT() { return getToken(plsqlParser.GRANT, 0); }
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode LOGOFF() { return getToken(plsqlParser.LOGOFF, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(plsqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode DDL() { return getToken(plsqlParser.DDL, 0); }
		public TerminalNode NOAUDIT() { return getToken(plsqlParser.NOAUDIT, 0); }
		public TerminalNode AUDIT() { return getToken(plsqlParser.AUDIT, 0); }
		public Non_dml_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNon_dml_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNon_dml_event(this);
		}
	}

	public final Non_dml_eventContext non_dml_event() throws RecognitionException {
		Non_dml_eventContext _localctx = new Non_dml_eventContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_non_dml_event);
		try {
			setState(1347);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1321); match(ALTER);
				}
				break;
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1322); match(ANALYZE);
				}
				break;
			case ASSOCIATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1323); match(ASSOCIATE);
				setState(1324); match(STATISTICS);
				}
				break;
			case AUDIT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1325); match(AUDIT);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1326); match(COMMENT);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1327); match(CREATE);
				}
				break;
			case DISASSOCIATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1328); match(DISASSOCIATE);
				setState(1329); match(STATISTICS);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 8);
				{
				setState(1330); match(DROP);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(1331); match(GRANT);
				}
				break;
			case NOAUDIT:
				enterOuterAlt(_localctx, 10);
				{
				setState(1332); match(NOAUDIT);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 11);
				{
				setState(1333); match(RENAME);
				}
				break;
			case REVOKE:
				enterOuterAlt(_localctx, 12);
				{
				setState(1334); match(REVOKE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 13);
				{
				setState(1335); match(TRUNCATE);
				}
				break;
			case DDL:
				enterOuterAlt(_localctx, 14);
				{
				setState(1336); match(DDL);
				}
				break;
			case STARTUP:
				enterOuterAlt(_localctx, 15);
				{
				setState(1337); match(STARTUP);
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 16);
				{
				setState(1338); match(SHUTDOWN);
				}
				break;
			case DB_ROLE_CHANGE:
				enterOuterAlt(_localctx, 17);
				{
				setState(1339); match(DB_ROLE_CHANGE);
				}
				break;
			case LOGON:
				enterOuterAlt(_localctx, 18);
				{
				setState(1340); match(LOGON);
				}
				break;
			case LOGOFF:
				enterOuterAlt(_localctx, 19);
				{
				setState(1341); match(LOGOFF);
				}
				break;
			case SERVERERROR:
				enterOuterAlt(_localctx, 20);
				{
				setState(1342); match(SERVERERROR);
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 21);
				{
				setState(1343); match(SUSPEND);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 22);
				{
				setState(1344); match(DATABASE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 23);
				{
				setState(1345); match(SCHEMA);
				}
				break;
			case FOLLOWS:
				enterOuterAlt(_localctx, 24);
				{
				setState(1346); match(FOLLOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_clauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Dml_event_elementContext dml_event_element(int i) {
			return getRuleContext(Dml_event_elementContext.class,i);
		}
		public List<Dml_event_elementContext> dml_event_element() {
			return getRuleContexts(Dml_event_elementContext.class);
		}
		public Dml_event_nested_clauseContext dml_event_nested_clause() {
			return getRuleContext(Dml_event_nested_clauseContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public Dml_event_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_clause(this);
		}
	}

	public final Dml_event_clauseContext dml_event_clause() throws RecognitionException {
		Dml_event_clauseContext _localctx = new Dml_event_clauseContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_dml_event_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1349); dml_event_element();
			setState(1354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1350); match(OR);
				setState(1351); dml_event_element();
				}
				}
				setState(1356);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1357); match(ON);
			setState(1359);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				setState(1358); dml_event_nested_clause();
				}
				break;
			}
			setState(1361); tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_elementContext extends ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public Dml_event_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_element(this);
		}
	}

	public final Dml_event_elementContext dml_event_element() throws RecognitionException {
		Dml_event_elementContext _localctx = new Dml_event_elementContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_dml_event_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1363);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1373);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(1364); match(OF);
				setState(1365); column_name();
				setState(1370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1366); match(COMMA);
					setState(1367); column_name();
					}
					}
					setState(1372);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_nested_clauseContext extends ParserRuleContext {
		public TerminalNode NESTED() { return getToken(plsqlParser.NESTED, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_nested_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_nested_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_nested_clause(this);
		}
	}

	public final Dml_event_nested_clauseContext dml_event_nested_clause() throws RecognitionException {
		Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_dml_event_nested_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1375); match(NESTED);
			setState(1376); match(TABLE);
			setState(1377); tableview_name();
			setState(1378); match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_clauseContext extends ParserRuleContext {
		public Referencing_elementContext referencing_element(int i) {
			return getRuleContext(Referencing_elementContext.class,i);
		}
		public List<Referencing_elementContext> referencing_element() {
			return getRuleContexts(Referencing_elementContext.class);
		}
		public TerminalNode REFERENCING() { return getToken(plsqlParser.REFERENCING, 0); }
		public Referencing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReferencing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReferencing_clause(this);
		}
	}

	public final Referencing_clauseContext referencing_clause() throws RecognitionException {
		Referencing_clauseContext _localctx = new Referencing_clauseContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_referencing_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1380); match(REFERENCING);
			setState(1382); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1381); referencing_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1384); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,85,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_elementContext extends ParserRuleContext {
		public TerminalNode OLD() { return getToken(plsqlParser.OLD, 0); }
		public TerminalNode PARENT() { return getToken(plsqlParser.PARENT, 0); }
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Referencing_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReferencing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReferencing_element(this);
		}
	}

	public final Referencing_elementContext referencing_element() throws RecognitionException {
		Referencing_elementContext _localctx = new Referencing_elementContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_referencing_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1386);
			_la = _input.LA(1);
			if ( !(((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (NEW - 237)) | (1L << (OLD - 237)) | (1L << (PARENT - 237)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1387); column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode VALIDATE() { return getToken(plsqlParser.VALIDATE, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_type(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1389); match(DROP);
			setState(1390); match(TYPE);
			setState(1392);
			switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				setState(1391); match(BODY);
				}
				break;
			}
			setState(1394); type_name();
			setState(1396);
			_la = _input.LA(1);
			if (_la==FORCE || _la==VALIDATE) {
				{
				setState(1395);
				_la = _input.LA(1);
				if ( !(_la==FORCE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(1398); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_typeContext extends ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public Alter_collection_clausesContext alter_collection_clauses() {
			return getRuleContext(Alter_collection_clausesContext.class,0);
		}
		public Replace_type_clauseContext replace_type_clause() {
			return getRuleContext(Replace_type_clauseContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Alter_method_specContext alter_method_spec() {
			return getRuleContext(Alter_method_specContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public Dependent_handling_clauseContext dependent_handling_clause() {
			return getRuleContext(Dependent_handling_clauseContext.class,0);
		}
		public Compile_type_clauseContext compile_type_clause() {
			return getRuleContext(Compile_type_clauseContext.class,0);
		}
		public Alter_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_type(this);
		}
	}

	public final Alter_typeContext alter_type() throws RecognitionException {
		Alter_typeContext _localctx = new Alter_typeContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_alter_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1400); match(ALTER);
			setState(1401); match(TYPE);
			setState(1402); type_name();
			setState(1408);
			switch (_input.LA(1)) {
			case COMPILE:
				{
				setState(1403); compile_type_clause();
				}
				break;
			case REPLACE:
				{
				setState(1404); replace_type_clause();
				}
				break;
			case ADD:
			case DROP:
				{
				setState(1405); alter_method_spec();
				}
				break;
			case MODIFY:
				{
				setState(1406); alter_collection_clauses();
				}
				break;
			case FINAL:
			case INSTANTIABLE:
			case NOT:
			case OVERRIDING:
				{
				setState(1407); modifier_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1411);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==INVALIDATE) {
				{
				setState(1410); dependent_handling_clause();
				}
			}

			setState(1413); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compile_type_clauseContext extends ParserRuleContext {
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public Compile_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compile_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompile_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompile_type_clause(this);
		}
	}

	public final Compile_type_clauseContext compile_type_clause() throws RecognitionException {
		Compile_type_clauseContext _localctx = new Compile_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_compile_type_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1415); match(COMPILE);
			setState(1417);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				setState(1416); match(DEBUG);
				}
				break;
			}
			setState(1420);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				setState(1419);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			}
			setState(1425);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,92,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1422); compiler_parameters_clause();
					}
					} 
				}
				setState(1427);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,92,_ctx);
			}
			setState(1430);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1428); match(REUSE);
				setState(1429); match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_type_clauseContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Replace_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReplace_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReplace_type_clause(this);
		}
	}

	public final Replace_type_clauseContext replace_type_clause() throws RecognitionException {
		Replace_type_clauseContext _localctx = new Replace_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_replace_type_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1432); match(REPLACE);
			setState(1434);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1433); invoker_rights_clause();
				}
			}

			setState(1436); match(AS);
			setState(1437); match(OBJECT);
			setState(1438); match(LEFT_PAREN);
			setState(1439); object_member_spec();
			setState(1444);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1440); match(COMMA);
				setState(1441); object_member_spec();
				}
				}
				setState(1446);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1447); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_specContext extends ParserRuleContext {
		public Alter_method_elementContext alter_method_element(int i) {
			return getRuleContext(Alter_method_elementContext.class,i);
		}
		public List<Alter_method_elementContext> alter_method_element() {
			return getRuleContexts(Alter_method_elementContext.class);
		}
		public Alter_method_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_method_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_method_spec(this);
		}
	}

	public final Alter_method_specContext alter_method_spec() throws RecognitionException {
		Alter_method_specContext _localctx = new Alter_method_specContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_alter_method_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1449); alter_method_element();
			setState(1454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1450); match(COMMA);
				setState(1451); alter_method_element();
				}
				}
				setState(1456);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_elementContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Alter_method_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_method_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_method_element(this);
		}
	}

	public final Alter_method_elementContext alter_method_element() throws RecognitionException {
		Alter_method_elementContext _localctx = new Alter_method_elementContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_alter_method_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1457);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1460);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				{
				setState(1458); map_order_function_spec();
				}
				break;
			case MEMBER:
			case STATIC:
				{
				setState(1459); subprogram_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_attribute_definitionContext extends ParserRuleContext {
		public Attribute_definitionContext attribute_definition(int i) {
			return getRuleContext(Attribute_definitionContext.class,i);
		}
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(plsqlParser.ATTRIBUTE, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public List<Attribute_definitionContext> attribute_definition() {
			return getRuleContexts(Attribute_definitionContext.class);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_attribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_attribute_definition(this);
		}
	}

	public final Alter_attribute_definitionContext alter_attribute_definition() throws RecognitionException {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_alter_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1462);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1463); match(ATTRIBUTE);
			setState(1476);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(1464); attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				setState(1465); match(LEFT_PAREN);
				setState(1466); attribute_definition();
				setState(1471);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1467); match(COMMA);
					setState(1468); attribute_definition();
					}
					}
					setState(1473);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1474); match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_definitionContext extends ParserRuleContext {
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAttribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAttribute_definition(this);
		}
	}

	public final Attribute_definitionContext attribute_definition() throws RecognitionException {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1478); attribute_name();
			setState(1480);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==REGULAR_ID) {
				{
				setState(1479); type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_collection_clausesContext extends ParserRuleContext {
		public TerminalNode ELEMENT() { return getToken(plsqlParser.ELEMENT, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collection_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_collection_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_collection_clauses(this);
		}
	}

	public final Alter_collection_clausesContext alter_collection_clauses() throws RecognitionException {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_alter_collection_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1482); match(MODIFY);
			setState(1488);
			switch (_input.LA(1)) {
			case LIMIT:
				{
				setState(1483); match(LIMIT);
				setState(1484); expression();
				}
				break;
			case ELEMENT:
				{
				setState(1485); match(ELEMENT);
				setState(1486); match(TYPE);
				setState(1487); type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_handling_clauseContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(plsqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode CONVERT() { return getToken(plsqlParser.CONVERT, 0); }
		public TerminalNode INCLUDING() { return getToken(plsqlParser.INCLUDING, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode DATA() { return getToken(plsqlParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return getRuleContext(Dependent_exceptions_partContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode INVALIDATE() { return getToken(plsqlParser.INVALIDATE, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_handling_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDependent_handling_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDependent_handling_clause(this);
		}
	}

	public final Dependent_handling_clauseContext dependent_handling_clause() throws RecognitionException {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_dependent_handling_clause);
		int _la;
		try {
			setState(1506);
			switch (_input.LA(1)) {
			case INVALIDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1490); match(INVALIDATE);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1491); match(CASCADE);
				setState(1501);
				switch (_input.LA(1)) {
				case CONVERT:
					{
					setState(1492); match(CONVERT);
					setState(1493); match(TO);
					setState(1494); match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					setState(1496);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(1495); match(NOT);
						}
					}

					setState(1498); match(INCLUDING);
					setState(1499); match(TABLE);
					setState(1500); match(DATA);
					}
					break;
				case EXCEPTIONS:
				case FORCE:
				case SEMICOLON:
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1504);
				_la = _input.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					setState(1503); dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_exceptions_partContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_exceptions_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDependent_exceptions_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDependent_exceptions_part(this);
		}
	}

	public final Dependent_exceptions_partContext dependent_exceptions_part() throws RecognitionException {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_dependent_exceptions_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1509);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(1508); match(FORCE);
				}
			}

			setState(1511); match(EXCEPTIONS);
			setState(1512); match(INTO);
			setState(1513); tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public Type_definitionContext type_definition() {
			return getRuleContext(Type_definitionContext.class,0);
		}
		public Type_bodyContext type_body() {
			return getRuleContext(Type_bodyContext.class,0);
		}
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_type(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1515); match(CREATE);
			setState(1518);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1516); match(OR);
				setState(1517); match(REPLACE);
				}
			}

			setState(1520); match(TYPE);
			setState(1523);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				setState(1521); type_definition();
				}
				break;
			case 2:
				{
				setState(1522); type_body();
				}
				break;
			}
			setState(1525); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_definitionContext extends ParserRuleContext {
		public Object_type_defContext object_type_def() {
			return getRuleContext(Object_type_defContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public TerminalNode OID() { return getToken(plsqlParser.OID, 0); }
		public Type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_definition(this);
		}
	}

	public final Type_definitionContext type_definition() throws RecognitionException {
		Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1527); type_name();
			setState(1530);
			_la = _input.LA(1);
			if (_la==OID) {
				{
				setState(1528); match(OID);
				setState(1529); match(CHAR_STRING);
				}
			}

			setState(1533);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				setState(1532); object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_defContext extends ParserRuleContext {
		public Modifier_clauseContext modifier_clause(int i) {
			return getRuleContext(Modifier_clauseContext.class,i);
		}
		public List<Modifier_clauseContext> modifier_clause() {
			return getRuleContexts(Modifier_clauseContext.class);
		}
		public Object_as_partContext object_as_part() {
			return getRuleContext(Object_as_partContext.class,0);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public Object_under_partContext object_under_part() {
			return getRuleContext(Object_under_partContext.class,0);
		}
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return getRuleContext(Sqlj_object_typeContext.class,0);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_type_def(this);
		}
	}

	public final Object_type_defContext object_type_def() throws RecognitionException {
		Object_type_defContext _localctx = new Object_type_defContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_object_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1536);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1535); invoker_rights_clause();
				}
			}

			setState(1540);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1538); object_as_part();
				}
				break;
			case UNDER:
				{
				setState(1539); object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1543);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(1542); sqlj_object_type();
				}
			}

			setState(1556);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1545); match(LEFT_PAREN);
				setState(1546); object_member_spec();
				setState(1551);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1547); match(COMMA);
					setState(1548); object_member_spec();
					}
					}
					setState(1553);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1554); match(RIGHT_PAREN);
				}
			}

			setState(1561);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				setState(1558); modifier_clause();
				}
				}
				setState(1563);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_as_partContext extends ParserRuleContext {
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public Nested_table_type_defContext nested_table_type_def() {
			return getRuleContext(Nested_table_type_defContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Object_as_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_as_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_as_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_as_part(this);
		}
	}

	public final Object_as_partContext object_as_part() throws RecognitionException {
		Object_as_partContext _localctx = new Object_as_partContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_object_as_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1564);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1568);
			switch (_input.LA(1)) {
			case OBJECT:
				{
				setState(1565); match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(1566); varray_type_def();
				}
				break;
			case TABLE:
				{
				setState(1567); nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_under_partContext extends ParserRuleContext {
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode UNDER() { return getToken(plsqlParser.UNDER, 0); }
		public Object_under_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_under_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_under_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_under_part(this);
		}
	}

	public final Object_under_partContext object_under_part() throws RecognitionException {
		Object_under_partContext _localctx = new Object_under_partContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_object_under_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1570); match(UNDER);
			setState(1571); type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_table_type_defContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNested_table_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNested_table_type_def(this);
		}
	}

	public final Nested_table_type_defContext nested_table_type_def() throws RecognitionException {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_nested_table_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1573); match(TABLE);
			setState(1574); match(OF);
			setState(1575); type_spec();
			setState(1578);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				setState(1576); match(NOT);
				setState(1577); match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_typeContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(plsqlParser.CUSTOMDATUM, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SQLDATA() { return getToken(plsqlParser.SQLDATA, 0); }
		public TerminalNode ORADATA() { return getToken(plsqlParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSqlj_object_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSqlj_object_type(this);
		}
	}

	public final Sqlj_object_typeContext sqlj_object_type() throws RecognitionException {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_sqlj_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1580); match(EXTERNAL);
			setState(1581); match(NAME);
			setState(1582); expression();
			setState(1583); match(LANGUAGE);
			setState(1584); match(JAVA);
			setState(1585); match(USING);
			setState(1586);
			_la = _input.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_bodyContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public List<Type_body_elementsContext> type_body_elements() {
			return getRuleContexts(Type_body_elementsContext.class);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_body_elementsContext type_body_elements(int i) {
			return getRuleContext(Type_body_elementsContext.class,i);
		}
		public Type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_body(this);
		}
	}

	public final Type_bodyContext type_body() throws RecognitionException {
		Type_bodyContext _localctx = new Type_bodyContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1588); match(BODY);
			setState(1589); type_name();
			setState(1590);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1592); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1591); type_body_elements();
				}
				}
				setState(1594); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 213)) & ~0x3f) == 0 && ((1L << (_la - 213)) & ((1L << (MAP - 213)) | (1L << (MEMBER - 213)) | (1L << (ORDER - 213)))) != 0) || _la==STATIC );
			setState(1596); match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_body_elementsContext extends ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return getRuleContext(Map_order_func_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return getRuleContext(Subprog_decl_in_typeContext.class,0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_body_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_body_elements(this);
		}
	}

	public final Type_body_elementsContext type_body_elements() throws RecognitionException {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_type_body_elements);
		try {
			setState(1600);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1598); map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(1599); subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_func_declarationContext extends ParserRuleContext {
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_func_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMap_order_func_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMap_order_func_declaration(this);
		}
	}

	public final Map_order_func_declarationContext map_order_func_declaration() throws RecognitionException {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_map_order_func_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1602);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1603); match(MEMBER);
			setState(1604); func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprog_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return getRuleContext(Proc_decl_in_typeContext.class,0);
		}
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return getRuleContext(Constructor_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprog_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubprog_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubprog_decl_in_type(this);
		}
	}

	public final Subprog_decl_in_typeContext subprog_decl_in_type() throws RecognitionException {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_subprog_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1606);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1610);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1607); proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				setState(1608); func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				setState(1609); constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_decl_in_typeContext extends ParserRuleContext {
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProc_decl_in_type(this);
		}
	}

	public final Proc_decl_in_typeContext proc_decl_in_type() throws RecognitionException {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_proc_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1612); match(PROCEDURE);
			setState(1613); procedure_name();
			setState(1614); match(LEFT_PAREN);
			setState(1615); type_elements_parameter();
			setState(1620);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1616); match(COMMA);
				setState(1617); type_elements_parameter();
				}
				}
				setState(1622);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1623); match(RIGHT_PAREN);
			setState(1624);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1638);
			switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
			case 1:
				{
				setState(1625); call_spec();
				}
				break;
			case 2:
				{
				setState(1627);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1626); match(DECLARE);
					}
				}

				setState(1632);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)) | (1L << (BINDVAR - 451)) | (1L << (COLON - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					{
					setState(1629); declare_spec();
					}
					}
					setState(1634);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1635); body();
				setState(1636); match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_decl_in_typeContext extends ParserRuleContext {
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunc_decl_in_type(this);
		}
	}

	public final Func_decl_in_typeContext func_decl_in_type() throws RecognitionException {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_func_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1640); match(FUNCTION);
			setState(1641); function_name();
			setState(1653);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1642); match(LEFT_PAREN);
				setState(1643); type_elements_parameter();
				setState(1648);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1644); match(COMMA);
					setState(1645); type_elements_parameter();
					}
					}
					setState(1650);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1651); match(RIGHT_PAREN);
				}
			}

			setState(1655); match(RETURN);
			setState(1656); type_spec();
			setState(1657);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1671);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				setState(1658); call_spec();
				}
				break;
			case 2:
				{
				setState(1660);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1659); match(DECLARE);
					}
				}

				setState(1665);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)) | (1L << (BINDVAR - 451)) | (1L << (COLON - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					{
					setState(1662); declare_spec();
					}
					}
					setState(1667);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1668); body();
				setState(1669); match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_declarationContext extends ParserRuleContext {
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public List<TerminalNode> SELF() { return getTokens(plsqlParser.SELF); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public TerminalNode SELF(int i) {
			return getToken(plsqlParser.SELF, i);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstructor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstructor_declaration(this);
		}
	}

	public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_constructor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1674);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1673); match(FINAL);
				}
			}

			setState(1677);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1676); match(INSTANTIABLE);
				}
			}

			setState(1679); match(CONSTRUCTOR);
			setState(1680); match(FUNCTION);
			setState(1681); type_spec();
			setState(1699);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1682); match(LEFT_PAREN);
				{
				setState(1683); match(SELF);
				setState(1684); match(IN);
				setState(1685); match(OUT);
				setState(1686); type_spec();
				setState(1687); match(COMMA);
				}
				setState(1689); type_elements_parameter();
				setState(1694);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1690); match(COMMA);
					setState(1691); type_elements_parameter();
					}
					}
					setState(1696);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1697); match(RIGHT_PAREN);
				}
			}

			setState(1701); match(RETURN);
			setState(1702); match(SELF);
			setState(1703); match(AS);
			setState(1704); match(RESULT);
			setState(1705);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1719);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				setState(1706); call_spec();
				}
				break;
			case 2:
				{
				setState(1708);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1707); match(DECLARE);
					}
				}

				setState(1713);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)) | (1L << (BINDVAR - 451)) | (1L << (COLON - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					{
					setState(1710); declare_spec();
					}
					}
					setState(1715);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1716); body();
				setState(1717); match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modifier_clauseContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode OVERRIDING() { return getToken(plsqlParser.OVERRIDING, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifier_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModifier_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModifier_clause(this);
		}
	}

	public final Modifier_clauseContext modifier_clause() throws RecognitionException {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_modifier_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1722);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1721); match(NOT);
				}
			}

			setState(1724);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_member_specContext extends ParserRuleContext {
		public Element_specContext element_spec() {
			return getRuleContext(Element_specContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return getRuleContext(Sqlj_object_type_attrContext.class,0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_member_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_member_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_member_spec(this);
		}
	}

	public final Object_member_specContext object_member_spec() throws RecognitionException {
		Object_member_specContext _localctx = new Object_member_specContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_object_member_spec);
		int _la;
		try {
			setState(1732);
			switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1726); id();
				setState(1727); type_spec();
				setState(1729);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(1728); sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1731); element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_type_attrContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type_attr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSqlj_object_type_attr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSqlj_object_type_attr(this);
		}
	}

	public final Sqlj_object_type_attrContext sqlj_object_type_attr() throws RecognitionException {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_sqlj_object_type_attr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1734); match(EXTERNAL);
			setState(1735); match(NAME);
			setState(1736); expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_specContext extends ParserRuleContext {
		public List<Element_spec_optionsContext> element_spec_options() {
			return getRuleContexts(Element_spec_optionsContext.class);
		}
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public Pragma_clauseContext pragma_clause() {
			return getRuleContext(Pragma_clauseContext.class,0);
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return getRuleContext(Element_spec_optionsContext.class,i);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElement_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElement_spec(this);
		}
	}

	public final Element_specContext element_spec() throws RecognitionException {
		Element_specContext _localctx = new Element_specContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_element_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1739);
			switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
			case 1:
				{
				setState(1738); modifier_clause();
				}
				break;
			}
			setState(1742); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1741); element_spec_options();
				}
				}
				setState(1744); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || ((((_la - 213)) & ~0x3f) == 0 && ((1L << (_la - 213)) & ((1L << (MAP - 213)) | (1L << (MEMBER - 213)) | (1L << (ORDER - 213)))) != 0) || _la==STATIC );
			setState(1748);
			switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
			case 1:
				{
				setState(1746); match(COMMA);
				setState(1747); pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_spec_optionsContext extends ParserRuleContext {
		public Constructor_specContext constructor_spec() {
			return getRuleContext(Constructor_specContext.class,0);
		}
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElement_spec_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElement_spec_options(this);
		}
	}

	public final Element_spec_optionsContext element_spec_options() throws RecognitionException {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_element_spec_options);
		try {
			setState(1753);
			switch (_input.LA(1)) {
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(1750); subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1751); constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1752); map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprogram_specContext extends ParserRuleContext {
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return getRuleContext(Type_procedure_specContext.class,0);
		}
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public Subprogram_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprogram_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubprogram_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubprogram_spec(this);
		}
	}

	public final Subprogram_specContext subprogram_spec() throws RecognitionException {
		Subprogram_specContext _localctx = new Subprogram_specContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_subprogram_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1755);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1758);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1756); type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				setState(1757); type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_procedure_specContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_procedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_procedure_spec(this);
		}
	}

	public final Type_procedure_specContext type_procedure_spec() throws RecognitionException {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_type_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1760); match(PROCEDURE);
			setState(1761); procedure_name();
			setState(1762); match(LEFT_PAREN);
			setState(1763); type_elements_parameter();
			setState(1768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1764); match(COMMA);
				setState(1765); type_elements_parameter();
				}
				}
				setState(1770);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1771); match(RIGHT_PAREN);
			setState(1774);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(1772);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1773); call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_specContext extends ParserRuleContext {
		public TerminalNode SELF() { return getToken(plsqlParser.SELF, 0); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode VARIABLE() { return getToken(plsqlParser.VARIABLE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public Type_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_function_spec(this);
		}
	}

	public final Type_function_specContext type_function_spec() throws RecognitionException {
		Type_function_specContext _localctx = new Type_function_specContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_type_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1776); match(FUNCTION);
			setState(1777); function_name();
			setState(1789);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1778); match(LEFT_PAREN);
				setState(1779); type_elements_parameter();
				setState(1784);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1780); match(COMMA);
					setState(1781); type_elements_parameter();
					}
					}
					setState(1786);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1787); match(RIGHT_PAREN);
				}
			}

			setState(1791); match(RETURN);
			setState(1796);
			switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				setState(1792); type_spec();
				}
				break;
			case 2:
				{
				setState(1793); match(SELF);
				setState(1794); match(AS);
				setState(1795); match(RESULT);
				}
				break;
			}
			setState(1806);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1798);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1799); call_spec();
				}
				break;
			case EXTERNAL:
				{
				setState(1800); match(EXTERNAL);
				setState(1802);
				_la = _input.LA(1);
				if (_la==VARIABLE) {
					{
					setState(1801); match(VARIABLE);
					}
				}

				setState(1804); match(NAME);
				setState(1805); expression();
				}
				break;
			case CASCADE:
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
			case INVALIDATE:
			case MAP:
			case MEMBER:
			case ORDER:
			case STATIC:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_specContext extends ParserRuleContext {
		public List<TerminalNode> SELF() { return getTokens(plsqlParser.SELF); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public TerminalNode SELF(int i) {
			return getToken(plsqlParser.SELF, i);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public Constructor_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstructor_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstructor_spec(this);
		}
	}

	public final Constructor_specContext constructor_spec() throws RecognitionException {
		Constructor_specContext _localctx = new Constructor_specContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_constructor_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1809);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1808); match(FINAL);
				}
			}

			setState(1812);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1811); match(INSTANTIABLE);
				}
			}

			setState(1814); match(CONSTRUCTOR);
			setState(1815); match(FUNCTION);
			setState(1816); type_spec();
			setState(1834);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1817); match(LEFT_PAREN);
				{
				setState(1818); match(SELF);
				setState(1819); match(IN);
				setState(1820); match(OUT);
				setState(1821); type_spec();
				setState(1822); match(COMMA);
				}
				setState(1824); type_elements_parameter();
				setState(1829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1825); match(COMMA);
					setState(1826); type_elements_parameter();
					}
					}
					setState(1831);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1832); match(RIGHT_PAREN);
				}
			}

			setState(1836); match(RETURN);
			setState(1837); match(SELF);
			setState(1838); match(AS);
			setState(1839); match(RESULT);
			setState(1842);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(1840);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1841); call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_function_specContext extends ParserRuleContext {
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMap_order_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMap_order_function_spec(this);
		}
	}

	public final Map_order_function_specContext map_order_function_spec() throws RecognitionException {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_map_order_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1844);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1845); match(MEMBER);
			setState(1846); type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_clauseContext extends ParserRuleContext {
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public List<Pragma_elementsContext> pragma_elements() {
			return getRuleContexts(Pragma_elementsContext.class);
		}
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public Pragma_elementsContext pragma_elements(int i) {
			return getRuleContext(Pragma_elementsContext.class,i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_clause(this);
		}
	}

	public final Pragma_clauseContext pragma_clause() throws RecognitionException {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_pragma_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1848); match(PRAGMA);
			setState(1849); match(RESTRICT_REFERENCES);
			setState(1850); match(LEFT_PAREN);
			setState(1851); pragma_elements();
			setState(1856);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1852); match(COMMA);
				setState(1853); pragma_elements();
				}
				}
				setState(1858);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1859); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_elementsContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_elements(this);
		}
	}

	public final Pragma_elementsContext pragma_elements() throws RecognitionException {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_pragma_elements);
		try {
			setState(1863);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1861); id();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1862); match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_elements_parameterContext extends ParserRuleContext {
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_elements_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_elements_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_elements_parameter(this);
		}
	}

	public final Type_elements_parameterContext type_elements_parameter() throws RecognitionException {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_type_elements_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1865); parameter_name();
			setState(1866); type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_sequence(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_drop_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1868); match(DROP);
			setState(1869); match(SEQUENCE);
			setState(1870); sequence_name();
			setState(1871); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_sequence(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1873); match(ALTER);
			setState(1874); match(SEQUENCE);
			setState(1875); sequence_name();
			setState(1877); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1876); sequence_spec();
				}
				}
				setState(1879); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CACHE || _la==CYCLE || ((((_la - 167)) & ~0x3f) == 0 && ((1L << (_la - 167)) & ((1L << (INCREMENT - 167)) | (1L << (MAXVALUE - 167)) | (1L << (MINVALUE - 167)))) != 0) || ((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (NOCACHE - 240)) | (1L << (NOCYCLE - 240)) | (1L << (NOMAXVALUE - 240)) | (1L << (NOMINVALUE - 240)) | (1L << (NOORDER - 240)) | (1L << (ORDER - 240)))) != 0) );
			setState(1881); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Sequence_start_clauseContext sequence_start_clause(int i) {
			return getRuleContext(Sequence_start_clauseContext.class,i);
		}
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public List<Sequence_start_clauseContext> sequence_start_clause() {
			return getRuleContexts(Sequence_start_clauseContext.class);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_sequence(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1883); match(CREATE);
			setState(1884); match(SEQUENCE);
			setState(1885); sequence_name();
			setState(1890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CACHE || _la==CYCLE || ((((_la - 167)) & ~0x3f) == 0 && ((1L << (_la - 167)) & ((1L << (INCREMENT - 167)) | (1L << (MAXVALUE - 167)) | (1L << (MINVALUE - 167)))) != 0) || ((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (NOCACHE - 240)) | (1L << (NOCYCLE - 240)) | (1L << (NOMAXVALUE - 240)) | (1L << (NOMINVALUE - 240)) | (1L << (NOORDER - 240)) | (1L << (ORDER - 240)))) != 0) || _la==START) {
				{
				setState(1888);
				switch (_input.LA(1)) {
				case START:
					{
					setState(1886); sequence_start_clause();
					}
					break;
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NOCACHE:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOORDER:
				case ORDER:
					{
					setState(1887); sequence_spec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1892);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1893); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_specContext extends ParserRuleContext {
		public TerminalNode NOMINVALUE() { return getToken(plsqlParser.NOMINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public TerminalNode NOORDER() { return getToken(plsqlParser.NOORDER, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode CACHE() { return getToken(plsqlParser.CACHE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(plsqlParser.NOMAXVALUE, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode NOCACHE() { return getToken(plsqlParser.NOCACHE, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_spec(this);
		}
	}

	public final Sequence_specContext sequence_spec() throws RecognitionException {
		Sequence_specContext _localctx = new Sequence_specContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_sequence_spec);
		try {
			setState(1911);
			switch (_input.LA(1)) {
			case INCREMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1895); match(INCREMENT);
				setState(1896); match(BY);
				setState(1897); match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1898); match(MAXVALUE);
				setState(1899); match(UNSIGNED_INTEGER);
				}
				break;
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1900); match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1901); match(MINVALUE);
				setState(1902); match(UNSIGNED_INTEGER);
				}
				break;
			case NOMINVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1903); match(NOMINVALUE);
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1904); match(CYCLE);
				}
				break;
			case NOCYCLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1905); match(NOCYCLE);
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 8);
				{
				setState(1906); match(CACHE);
				setState(1907); match(UNSIGNED_INTEGER);
				}
				break;
			case NOCACHE:
				enterOuterAlt(_localctx, 9);
				{
				setState(1908); match(NOCACHE);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 10);
				{
				setState(1909); match(ORDER);
				}
				break;
			case NOORDER:
				enterOuterAlt(_localctx, 11);
				{
				setState(1910); match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_start_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode START() { return getToken(plsqlParser.START, 0); }
		public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_start_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_start_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_start_clause(this);
		}
	}

	public final Sequence_start_clauseContext sequence_start_clause() throws RecognitionException {
		Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_sequence_start_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1913); match(START);
			setState(1914); match(WITH);
			setState(1915); match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Invoker_rights_clauseContext extends ParserRuleContext {
		public TerminalNode AUTHID() { return getToken(plsqlParser.AUTHID, 0); }
		public TerminalNode CURRENT_USER() { return getToken(plsqlParser.CURRENT_USER, 0); }
		public TerminalNode DEFINER() { return getToken(plsqlParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invoker_rights_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInvoker_rights_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInvoker_rights_clause(this);
		}
	}

	public final Invoker_rights_clauseContext invoker_rights_clause() throws RecognitionException {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_invoker_rights_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1917); match(AUTHID);
			setState(1918);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compiler_parameters_clauseContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compiler_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompiler_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompiler_parameters_clause(this);
		}
	}

	public final Compiler_parameters_clauseContext compiler_parameters_clause() throws RecognitionException {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_compiler_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1920); id();
			setState(1921); match(EQUALS_OP);
			setState(1922); expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_specContext extends ParserRuleContext {
		public Java_specContext java_spec() {
			return getRuleContext(Java_specContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public C_specContext c_spec() {
			return getRuleContext(C_specContext.class,0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCall_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCall_spec(this);
		}
	}

	public final Call_specContext call_spec() throws RecognitionException {
		Call_specContext _localctx = new Call_specContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_call_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1924); match(LANGUAGE);
			setState(1927);
			switch (_input.LA(1)) {
			case JAVA:
				{
				setState(1925); java_spec();
				}
				break;
			case C_LETTER:
				{
				setState(1926); c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Java_specContext extends ParserRuleContext {
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_java_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJava_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJava_spec(this);
		}
	}

	public final Java_specContext java_spec() throws RecognitionException {
		Java_specContext _localctx = new Java_specContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_java_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1929); match(JAVA);
			setState(1930); match(NAME);
			setState(1931); match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_specContext extends ParserRuleContext {
		public TerminalNode C_LETTER() { return getToken(plsqlParser.C_LETTER, 0); }
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return getRuleContext(C_parameters_clauseContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode LIBRARY() { return getToken(plsqlParser.LIBRARY, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return getRuleContext(C_agent_in_clauseContext.class,0);
		}
		public TerminalNode CONTEXT() { return getToken(plsqlParser.CONTEXT, 0); }
		public C_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_spec(this);
		}
	}

	public final C_specContext c_spec() throws RecognitionException {
		C_specContext _localctx = new C_specContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_c_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1933); match(C_LETTER);
			setState(1936);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(1934); match(NAME);
				setState(1935); match(CHAR_STRING);
				}
			}

			setState(1938); match(LIBRARY);
			setState(1939); id();
			setState(1941);
			_la = _input.LA(1);
			if (_la==AGENT) {
				{
				setState(1940); c_agent_in_clause();
				}
			}

			setState(1945);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1943); match(WITH);
				setState(1944); match(CONTEXT);
				}
			}

			setState(1948);
			_la = _input.LA(1);
			if (_la==PARAMETERS) {
				{
				setState(1947); c_parameters_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_agent_in_clauseContext extends ParserRuleContext {
		public TerminalNode AGENT() { return getToken(plsqlParser.AGENT, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_agent_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_agent_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_agent_in_clause(this);
		}
	}

	public final C_agent_in_clauseContext c_agent_in_clause() throws RecognitionException {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_c_agent_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1950); match(AGENT);
			setState(1951); match(IN);
			setState(1952); match(LEFT_PAREN);
			setState(1953); expression();
			setState(1958);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1954); match(COMMA);
				setState(1955); expression();
				}
				}
				setState(1960);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1961); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_parameters_clauseContext extends ParserRuleContext {
		public TerminalNode PARAMETERS() { return getToken(plsqlParser.PARAMETERS, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_parameters_clause(this);
		}
	}

	public final C_parameters_clauseContext c_parameters_clause() throws RecognitionException {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_c_parameters_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1963); match(PARAMETERS);
			setState(1964); match(LEFT_PAREN);
			setState(1976);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(1965); expression();
				setState(1970);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1966); match(COMMA);
					setState(1967); expression();
					}
					}
					setState(1972);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case PERIOD:
				{
				setState(1973); match(PERIOD);
				setState(1974); match(PERIOD);
				setState(1975); match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1978); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterContext extends ParserRuleContext {
		public TerminalNode NOCOPY(int i) {
			return getToken(plsqlParser.NOCOPY, i);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public TerminalNode IN(int i) {
			return getToken(plsqlParser.IN, i);
		}
		public List<TerminalNode> NOCOPY() { return getTokens(plsqlParser.NOCOPY); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode INOUT(int i) {
			return getToken(plsqlParser.INOUT, i);
		}
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public List<TerminalNode> INOUT() { return getTokens(plsqlParser.INOUT); }
		public List<TerminalNode> IN() { return getTokens(plsqlParser.IN); }
		public TerminalNode OUT(int i) {
			return getToken(plsqlParser.OUT, i);
		}
		public List<TerminalNode> OUT() { return getTokens(plsqlParser.OUT); }
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_parameter);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1980); parameter_name();
			setState(1984);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,172,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1981);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					} 
				}
				setState(1986);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,172,_ctx);
			}
			setState(1988);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==REGULAR_ID) {
				{
				setState(1987); type_spec();
				}
			}

			setState(1991);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(1990); default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_value_partContext extends ParserRuleContext {
		public TerminalNode ASSIGN_OP() { return getToken(plsqlParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDefault_value_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDefault_value_part(this);
		}
	}

	public final Default_value_partContext default_value_part() throws RecognitionException {
		Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_default_value_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1993);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(1994); expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_specContext extends ParserRuleContext {
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDeclare_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDeclare_spec(this);
		}
	}

	public final Declare_specContext declare_spec() throws RecognitionException {
		Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_declare_spec);
		try {
			setState(2005);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1996); variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1997); subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1998); cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1999); exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2000); pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2001); record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2002); table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2003); create_procedure_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2004); create_function_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_declarationContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode CONSTANT() { return getToken(plsqlParser.CONSTANT, 0); }
		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVariable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVariable_declaration(this);
		}
	}

	public final Variable_declarationContext variable_declaration() throws RecognitionException {
		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_variable_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2007); variable_name();
			setState(2009);
			switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				setState(2008); match(CONSTANT);
				}
				break;
			}
			setState(2011); type_spec();
			setState(2014);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2012); match(NOT);
				setState(2013); match(NULL);
				}
			}

			setState(2017);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2016); default_value_part();
				}
			}

			setState(2019); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subtype_declarationContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode SUBTYPE() { return getToken(plsqlParser.SUBTYPE, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtype_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubtype_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubtype_declaration(this);
		}
	}

	public final Subtype_declarationContext subtype_declaration() throws RecognitionException {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_subtype_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2021); match(SUBTYPE);
			setState(2022); type_name();
			setState(2023); match(IS);
			setState(2024); type_spec();
			setState(2030);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(2025); match(RANGE);
				setState(2026); expression();
				setState(2027); match(T__0);
				setState(2028); expression();
				}
			}

			setState(2034);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2032); match(NOT);
				setState(2033); match(NULL);
				}
			}

			setState(2036); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_declarationContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public List<Parameter_specContext> parameter_spec() {
			return getRuleContexts(Parameter_specContext.class);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Parameter_specContext parameter_spec(int i) {
			return getRuleContext(Parameter_specContext.class,i);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_declaration(this);
		}
	}

	public final Cursor_declarationContext cursor_declaration() throws RecognitionException {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_cursor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2038); match(CURSOR);
			setState(2039); cursor_name();
			setState(2051);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2040); match(LEFT_PAREN);
				setState(2041); parameter_spec();
				setState(2046);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2042); match(COMMA);
					setState(2043); parameter_spec();
					}
					}
					setState(2048);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2049); match(RIGHT_PAREN);
				}
			}

			setState(2055);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(2053); match(RETURN);
				setState(2054); type_spec();
				}
			}

			setState(2059);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(2057); match(IS);
				setState(2058); select_statement();
				}
			}

			setState(2061); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_specContext extends ParserRuleContext {
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter_spec(this);
		}
	}

	public final Parameter_specContext parameter_spec() throws RecognitionException {
		Parameter_specContext _localctx = new Parameter_specContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_parameter_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2063); parameter_name();
			setState(2068);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (IN - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2065);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(2064); match(IN);
					}
				}

				setState(2067); type_spec();
				}
			}

			setState(2071);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2070); default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_declarationContext extends ParserRuleContext {
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public TerminalNode EXCEPTION() { return getToken(plsqlParser.EXCEPTION, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_declaration(this);
		}
	}

	public final Exception_declarationContext exception_declaration() throws RecognitionException {
		Exception_declarationContext _localctx = new Exception_declarationContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_exception_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2073); exception_name();
			setState(2074); match(EXCEPTION);
			setState(2075); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_declarationContext extends ParserRuleContext {
		public IdContext id1;
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(plsqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(plsqlParser.EXCEPTION_INIT, 0); }
		public TerminalNode INLINE() { return getToken(plsqlParser.INLINE, 0); }
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Numeric_negativeContext numeric_negative() {
			return getRuleContext(Numeric_negativeContext.class,0);
		}
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_declaration(this);
		}
	}

	public final Pragma_declarationContext pragma_declaration() throws RecognitionException {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_pragma_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2077); match(PRAGMA);
			setState(2108);
			switch (_input.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				setState(2078); match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				setState(2079); match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				setState(2080); match(EXCEPTION_INIT);
				setState(2081); match(LEFT_PAREN);
				setState(2082); exception_name();
				setState(2083); match(COMMA);
				setState(2084); numeric_negative();
				setState(2085); match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				setState(2087); match(INLINE);
				setState(2088); match(LEFT_PAREN);
				setState(2089); ((Pragma_declarationContext)_localctx).id1 = id();
				setState(2090); match(COMMA);
				setState(2091); expression();
				setState(2092); match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				setState(2094); match(RESTRICT_REFERENCES);
				setState(2095); match(LEFT_PAREN);
				setState(2098);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2096); id();
					}
					break;
				case DEFAULT:
					{
					setState(2097); match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2102); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2100); match(COMMA);
					setState(2101); id();
					}
					}
					setState(2104); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(2106); match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2110); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_declarationContext extends ParserRuleContext {
		public Record_var_decContext record_var_dec() {
			return getRuleContext(Record_var_decContext.class,0);
		}
		public Record_type_decContext record_type_dec() {
			return getRuleContext(Record_type_decContext.class,0);
		}
		public Record_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_declaration(this);
		}
	}

	public final Record_declarationContext record_declaration() throws RecognitionException {
		Record_declarationContext _localctx = new Record_declarationContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_record_declaration);
		try {
			setState(2114);
			switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2112); record_type_dec();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2113); record_var_dec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_type_decContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		public TerminalNode RECORD() { return getToken(plsqlParser.RECORD, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		public Record_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_type_dec(this);
		}
	}

	public final Record_type_decContext record_type_dec() throws RecognitionException {
		Record_type_decContext _localctx = new Record_type_decContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_record_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2116); match(TYPE);
			setState(2117); type_name();
			setState(2118); match(IS);
			setState(2137);
			switch (_input.LA(1)) {
			case RECORD:
				{
				setState(2119); match(RECORD);
				setState(2120); match(LEFT_PAREN);
				setState(2121); field_spec();
				setState(2126);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2122); match(COMMA);
					setState(2123); field_spec();
					}
					}
					setState(2128);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2129); match(RIGHT_PAREN);
				}
				break;
			case REF:
				{
				setState(2131); match(REF);
				setState(2132); match(CURSOR);
				setState(2135);
				_la = _input.LA(1);
				if (_la==RETURN) {
					{
					setState(2133); match(RETURN);
					setState(2134); type_spec();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2139); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_specContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterField_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitField_spec(this);
		}
	}

	public final Field_specContext field_spec() throws RecognitionException {
		Field_specContext _localctx = new Field_specContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_field_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2141); column_name();
			setState(2143);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2142); type_spec();
				}
			}

			setState(2147);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2145); match(NOT);
				setState(2146); match(NULL);
				}
			}

			setState(2150);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2149); default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_var_decContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode PERCENT_ROWTYPE() { return getToken(plsqlParser.PERCENT_ROWTYPE, 0); }
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public TerminalNode PERCENT_TYPE() { return getToken(plsqlParser.PERCENT_TYPE, 0); }
		public Record_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_var_dec(this);
		}
	}

	public final Record_var_decContext record_var_dec() throws RecognitionException {
		Record_var_decContext _localctx = new Record_var_decContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_record_var_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2152); record_name();
			setState(2153); type_name();
			setState(2154);
			_la = _input.LA(1);
			if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2155); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_declarationContext extends ParserRuleContext {
		public Table_type_decContext table_type_dec() {
			return getRuleContext(Table_type_decContext.class,0);
		}
		public Table_var_decContext table_var_dec() {
			return getRuleContext(Table_var_decContext.class,0);
		}
		public Table_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_declaration(this);
		}
	}

	public final Table_declarationContext table_declaration() throws RecognitionException {
		Table_declarationContext _localctx = new Table_declarationContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_table_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2159);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				{
				setState(2157); table_type_dec();
				}
				break;
			case 2:
				{
				setState(2158); table_var_dec();
				}
				break;
			}
			setState(2161); match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_decContext extends ParserRuleContext {
		public Table_indexed_by_partContext table_indexed_by_part() {
			return getRuleContext(Table_indexed_by_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Table_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_type_dec(this);
		}
	}

	public final Table_type_decContext table_type_dec() throws RecognitionException {
		Table_type_decContext _localctx = new Table_type_decContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_table_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2163); match(TYPE);
			setState(2164); type_name();
			setState(2165); match(IS);
			setState(2177);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(2166); match(TABLE);
				setState(2167); match(OF);
				setState(2168); type_spec();
				setState(2170);
				_la = _input.LA(1);
				if (_la==INDEX || _la==INDEXED) {
					{
					setState(2169); table_indexed_by_part();
					}
				}

				setState(2174);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2172); match(NOT);
					setState(2173); match(NULL);
					}
				}

				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(2176); varray_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_indexed_by_partContext extends ParserRuleContext {
		public Token idx1;
		public Token idx2;
		public TerminalNode INDEX() { return getToken(plsqlParser.INDEX, 0); }
		public TerminalNode INDEXED() { return getToken(plsqlParser.INDEXED, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_indexed_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_indexed_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_indexed_by_part(this);
		}
	}

	public final Table_indexed_by_partContext table_indexed_by_part() throws RecognitionException {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_table_indexed_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2181);
			switch (_input.LA(1)) {
			case INDEXED:
				{
				setState(2179); ((Table_indexed_by_partContext)_localctx).idx1 = match(INDEXED);
				}
				break;
			case INDEX:
				{
				setState(2180); ((Table_indexed_by_partContext)_localctx).idx2 = match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2183); match(BY);
			setState(2184); type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_type_defContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode ARRAY() { return getToken(plsqlParser.ARRAY, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public TerminalNode VARYING() { return getToken(plsqlParser.VARYING, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode VARRAY() { return getToken(plsqlParser.VARRAY, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVarray_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVarray_type_def(this);
		}
	}

	public final Varray_type_defContext varray_type_def() throws RecognitionException {
		Varray_type_defContext _localctx = new Varray_type_defContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_varray_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2189);
			switch (_input.LA(1)) {
			case VARRAY:
				{
				setState(2186); match(VARRAY);
				}
				break;
			case VARYING:
				{
				setState(2187); match(VARYING);
				setState(2188); match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2191); match(LEFT_PAREN);
			setState(2192); expression();
			setState(2193); match(RIGHT_PAREN);
			setState(2194); match(OF);
			setState(2195); type_spec();
			setState(2198);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				{
				setState(2196); match(NOT);
				setState(2197); match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_decContext extends ParserRuleContext {
		public Table_var_nameContext table_var_name() {
			return getRuleContext(Table_var_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Table_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_var_dec(this);
		}
	}

	public final Table_var_decContext table_var_dec() throws RecognitionException {
		Table_var_decContext _localctx = new Table_var_decContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_table_var_dec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2200); table_var_name();
			setState(2201); type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seq_of_statementsContext extends ParserRuleContext {
		public TerminalNode EOF(int i) {
			return getToken(plsqlParser.EOF, i);
		}
		public Label_declarationContext label_declaration(int i) {
			return getRuleContext(Label_declarationContext.class,i);
		}
		public List<TerminalNode> EOF() { return getTokens(plsqlParser.EOF); }
		public List<Label_declarationContext> label_declaration() {
			return getRuleContexts(Label_declarationContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSeq_of_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSeq_of_statements(this);
		}
	}

	public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_seq_of_statements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2207); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2207);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BEGIN:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FETCH:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FOR:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GOTO:
				case GRANT:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IF:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSERT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCK:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROCEDURE:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELECT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATE:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITH:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2203); statement();
					setState(2204);
					_la = _input.LA(1);
					if ( !(_la==EOF || _la==SEMICOLON) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					break;
				case LESS_THAN_OP:
					{
					setState(2206); label_declaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2209); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECLARE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DELETE - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FETCH - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FOR - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GOTO - 129)) | (1L << (GRANT - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IF - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSERT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCK - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULL - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELECT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATE - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITH - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)) | (1L << (LEFT_PAREN - 451)) | (1L << (BINDVAR - 451)) | (1L << (COLON - 451)) | (1L << (LESS_THAN_OP - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_declarationContext extends ParserRuleContext {
		public Token ltp1;
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLabel_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLabel_declaration(this);
		}
	}

	public final Label_declarationContext label_declaration() throws RecognitionException {
		Label_declarationContext _localctx = new Label_declarationContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_label_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2211); ((Label_declarationContext)_localctx).ltp1 = match(LESS_THAN_OP);
			setState(2212); match(LESS_THAN_OP);
			setState(2213); label_name();
			setState(2214); match(GREATER_THAN_OP);
			setState(2215); match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Null_statementContext null_statement() {
			return getRuleContext(Null_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Raise_statementContext raise_statement() {
			return getRuleContext(Raise_statementContext.class,0);
		}
		public TerminalNode GRANT() { return getToken(plsqlParser.GRANT, 0); }
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Forall_statementContext forall_statement() {
			return getRuleContext(Forall_statementContext.class,0);
		}
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Swallow_to_semiContext swallow_to_semi() {
			return getRuleContext(Swallow_to_semiContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public Assignment_statementContext assignment_statement() {
			return getRuleContext(Assignment_statementContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStatement(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_statement);
		try {
			setState(2240);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2217); match(CREATE);
				setState(2218); swallow_to_semi();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2219); match(ALTER);
				setState(2220); swallow_to_semi();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2221); match(GRANT);
				setState(2222); swallow_to_semi();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2223); match(TRUNCATE);
				setState(2224); swallow_to_semi();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2225); body();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2226); block();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2227); assignment_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2228); continue_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2229); exit_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2230); goto_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2231); if_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2232); loop_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2233); forall_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2234); null_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2235); raise_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2236); return_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2237); case_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2238); sql_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2239); function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_statementContext extends ParserRuleContext {
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public TerminalNode ASSIGN_OP() { return getToken(plsqlParser.ASSIGN_OP, 0); }
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAssignment_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAssignment_statement(this);
		}
	}

	public final Assignment_statementContext assignment_statement() throws RecognitionException {
		Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_assignment_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2244);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2242); general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				{
				setState(2243); bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2246); match(ASSIGN_OP);
			setState(2247); expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitContinue_statement(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_continue_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2249); match(CONTINUE);
			setState(2251);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2250); label_name();
				}
			}

			setState(2255);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2253); match(WHEN);
				setState(2254); condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_statementContext extends ParserRuleContext {
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExit_statement(this);
		}
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_exit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2257); match(EXIT);
			setState(2259);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2258); label_name();
				}
			}

			setState(2263);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2261); match(WHEN);
				setState(2262); condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode GOTO() { return getToken(plsqlParser.GOTO, 0); }
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGoto_statement(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_goto_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2265); match(GOTO);
			setState(2266); label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<TerminalNode> IF() { return getTokens(plsqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(plsqlParser.IF, i);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public List<Elsif_partContext> elsif_part() {
			return getRuleContexts(Elsif_partContext.class);
		}
		public Elsif_partContext elsif_part(int i) {
			return getRuleContext(Elsif_partContext.class,i);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public Else_partContext else_part() {
			return getRuleContext(Else_partContext.class,0);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIf_statement(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2268); match(IF);
			setState(2269); condition();
			setState(2270); match(THEN);
			setState(2271); seq_of_statements();
			setState(2275);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(2272); elsif_part();
				}
				}
				setState(2277);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2279);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2278); else_part();
				}
			}

			setState(2281); match(END);
			setState(2282); match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Elsif_partContext extends ParserRuleContext {
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode ELSIF() { return getToken(plsqlParser.ELSIF, 0); }
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elsif_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElsif_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElsif_part(this);
		}
	}

	public final Elsif_partContext elsif_part() throws RecognitionException {
		Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_elsif_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2284); match(ELSIF);
			setState(2285); condition();
			setState(2286); match(THEN);
			setState(2287); seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_partContext extends ParserRuleContext {
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public Else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElse_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElse_part(this);
		}
	}

	public final Else_partContext else_part() throws RecognitionException {
		Else_partContext _localctx = new Else_partContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2289); match(ELSE);
			setState(2290); seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_statementContext extends ParserRuleContext {
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<TerminalNode> LOOP() { return getTokens(plsqlParser.LOOP); }
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public TerminalNode LOOP(int i) {
			return getToken(plsqlParser.LOOP, i);
		}
		public TerminalNode WHILE() { return getToken(plsqlParser.WHILE, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return getRuleContext(Cursor_loop_paramContext.class,0);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLoop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLoop_statement(this);
		}
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_loop_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2293);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				{
				setState(2292); label_name();
				}
				break;
			}
			setState(2299);
			switch (_input.LA(1)) {
			case WHILE:
				{
				setState(2295); match(WHILE);
				setState(2296); condition();
				}
				break;
			case FOR:
				{
				setState(2297); match(FOR);
				setState(2298); cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2301); match(LOOP);
			setState(2302); seq_of_statements();
			setState(2303); match(END);
			setState(2304); match(LOOP);
			setState(2306);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2305); label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_loop_paramContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode REVERSE() { return getToken(plsqlParser.REVERSE, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_loop_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_loop_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_loop_param(this);
		}
	}

	public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_cursor_loop_param);
		int _la;
		try {
			setState(2329);
			switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2308); index_name();
				setState(2309); match(IN);
				setState(2311);
				switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
				case 1:
					{
					setState(2310); match(REVERSE);
					}
					break;
				}
				setState(2313); lower_bound();
				setState(2314); match(T__0);
				setState(2315); upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2317); record_name();
				setState(2318); match(IN);
				setState(2327);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2319); cursor_name();
					setState(2321);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(2320); expression_list();
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					setState(2323); match(LEFT_PAREN);
					setState(2324); select_statement();
					setState(2325); match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Forall_statementContext extends ParserRuleContext {
		public Bounds_clauseContext bounds_clause() {
			return getRuleContext(Bounds_clauseContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public TerminalNode SAVE() { return getToken(plsqlParser.SAVE, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode FORALL() { return getToken(plsqlParser.FORALL, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forall_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterForall_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitForall_statement(this);
		}
	}

	public final Forall_statementContext forall_statement() throws RecognitionException {
		Forall_statementContext _localctx = new Forall_statementContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_forall_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2331); match(FORALL);
			setState(2332); index_name();
			setState(2333); match(IN);
			setState(2334); bounds_clause();
			setState(2335); sql_statement();
			setState(2338);
			_la = _input.LA(1);
			if (_la==SAVE) {
				{
				setState(2336); match(SAVE);
				setState(2337); match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bounds_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode INDICES() { return getToken(plsqlParser.INDICES, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Between_boundContext between_bound() {
			return getRuleContext(Between_boundContext.class,0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bounds_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBounds_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBounds_clause(this);
		}
	}

	public final Bounds_clauseContext bounds_clause() throws RecognitionException {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_bounds_clause);
		int _la;
		try {
			setState(2353);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2340); lower_bound();
				setState(2341); match(T__0);
				setState(2342); upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2344); match(INDICES);
				setState(2345); match(OF);
				setState(2346); collection_name();
				setState(2348);
				_la = _input.LA(1);
				if (_la==BETWEEN) {
					{
					setState(2347); between_bound();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2350); match(VALUES);
				setState(2351); match(OF);
				setState(2352); index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_boundContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBetween_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBetween_bound(this);
		}
	}

	public final Between_boundContext between_bound() throws RecognitionException {
		Between_boundContext _localctx = new Between_boundContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_between_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2355); match(BETWEEN);
			setState(2356); lower_bound();
			setState(2357); match(AND);
			setState(2358); upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lower_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lower_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLower_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLower_bound(this);
		}
	}

	public final Lower_boundContext lower_bound() throws RecognitionException {
		Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_lower_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2360); concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Upper_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpper_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpper_bound(this);
		}
	}

	public final Upper_boundContext upper_bound() throws RecognitionException {
		Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_upper_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2362); concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_statementContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNull_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNull_statement(this);
		}
	}

	public final Null_statementContext null_statement() throws RecognitionException {
		Null_statementContext _localctx = new Null_statementContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_null_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2364); match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raise_statementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(plsqlParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRaise_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRaise_statement(this);
		}
	}

	public final Raise_statementContext raise_statement() throws RecognitionException {
		Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_raise_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2366); match(RAISE);
			setState(2368);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(2367); exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public ConditionContext cn1;
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReturn_statement(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2370); match(RETURN);
			setState(2372);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENTITYESCAPING - 64)) | (1L << (ERR - 64)) | (1L << (ERRORS - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVALNAME - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)) | (1L << (ISOLATION - 128)) | (1L << (ITERATE - 128)) | (1L << (JAVA - 128)) | (1L << (JOIN - 128)) | (1L << (KEEP - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NONE - 192)) | (1L << (NOSCHEMACHECK - 192)) | (1L << (NOT - 192)) | (1L << (NULL - 192)) | (1L << (NULLS - 192)) | (1L << (NUMBER - 192)) | (1L << (NUMERIC - 192)) | (1L << (NVARCHAR2 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)) | (1L << (RENAME - 256)) | (1L << (REPLACE - 256)) | (1L << (RESPECT - 256)) | (1L << (RESTRICT_REFERENCES - 256)) | (1L << (RESULT - 256)) | (1L << (RESULT_CACHE - 256)) | (1L << (RETURN - 256)) | (1L << (RETURNING - 256)) | (1L << (REUSE - 256)) | (1L << (REVERSE - 256)) | (1L << (RIGHT - 256)) | (1L << (ROLLBACK - 256)) | (1L << (ROLLUP - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)) | (1L << (SUBMULTISET - 320)) | (1L << (SUBPARTITION - 320)) | (1L << (SUBSTITUTABLE - 320)) | (1L << (SUBTYPE - 320)) | (1L << (SUCCESS - 320)) | (1L << (SUSPEND - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 320)) | (1L << (TIMESTAMP_UNCONSTRAINED - 320)) | (1L << (TIMEZONE_ABBR - 320)) | (1L << (TIMEZONE_HOUR - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHILE - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)) | (1L << (XML - 384)) | (1L << (XMLAGG - 384)) | (1L << (XMLATTRIBUTES - 384)) | (1L << (XMLCAST - 384)) | (1L << (XMLCOLATTVAL - 384)) | (1L << (XMLELEMENT - 384)) | (1L << (XMLEXISTS - 384)) | (1L << (XMLFOREST - 384)) | (1L << (XMLNAMESPACES - 384)) | (1L << (XMLPARSE - 384)) | (1L << (XMLPI - 384)) | (1L << (XMLQUERY - 384)) | (1L << (XMLROOT - 384)) | (1L << (XMLSERIALIZE - 384)) | (1L << (XMLTABLE - 384)) | (1L << (YEAR - 384)) | (1L << (YES - 384)) | (1L << (YMINTERVAL_UNCONSTRAINED - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (UNSIGNED_INTEGER - 448)) | (1L << (APPROXIMATE_NUM_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)) | (1L << (LEFT_PAREN - 448)) | (1L << (PLUS_SIGN - 448)) | (1L << (MINUS_SIGN - 448)) | (1L << (BINDVAR - 448)) | (1L << (COLON - 448)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(2371); ((Return_statementContext)_localctx).cn1 = condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_call(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_function_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2375);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				{
				setState(2374); match(CALL);
				}
				break;
			}
			setState(2377); routine_name();
			setState(2379);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2378); function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyContext extends ParserRuleContext {
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode BEGIN() { return getToken(plsqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBody(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_body);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2381); match(BEGIN);
			setState(2385);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,229,_ctx);
			while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					setState(2382);
					matchWildcard();
					}
					} 
				}
				setState(2387);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,229,_ctx);
			}
			setState(2388); match(END);
			setState(2390);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				setState(2389); label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_clauseContext extends ParserRuleContext {
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public TerminalNode EXCEPTION() { return getToken(plsqlParser.EXCEPTION, 0); }
		public Exception_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_clause(this);
		}
	}

	public final Exception_clauseContext exception_clause() throws RecognitionException {
		Exception_clauseContext _localctx = new Exception_clauseContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_exception_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2392); match(EXCEPTION);
			setState(2394); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2393); exception_handler();
				}
				}
				setState(2396); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_handlerContext extends ParserRuleContext {
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Exception_nameContext exception_name(int i) {
			return getRuleContext(Exception_nameContext.class,i);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public List<Exception_nameContext> exception_name() {
			return getRuleContexts(Exception_nameContext.class);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_handler(this);
		}
	}

	public final Exception_handlerContext exception_handler() throws RecognitionException {
		Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_exception_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2398); match(WHEN);
			setState(2399); exception_name();
			setState(2404);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(2400); match(OR);
				setState(2401); exception_name();
				}
				}
				setState(2406);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2407); match(THEN);
			setState(2408); seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_blockContext extends ParserRuleContext {
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_block(this);
		}
	}

	public final Trigger_blockContext trigger_block() throws RecognitionException {
		Trigger_blockContext _localctx = new Trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2418);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECLARE - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)) | (1L << (BINDVAR - 451)) | (1L << (COLON - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(2411);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(2410); match(DECLARE);
					}
				}

				setState(2414); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2413); declare_spec();
					}
					}
					setState(2416); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)) | (1L << (BINDVAR - 451)) | (1L << (COLON - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
				}
			}

			setState(2420); body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockContext extends ParserRuleContext {
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBlock(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2423);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(2422); match(DECLARE);
				}
			}

			setState(2426); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2425); declare_spec();
				}
				}
				setState(2428); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CREATE - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)) | (1L << (BINDVAR - 451)) | (1L << (COLON - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
			setState(2430); body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statementContext extends ParserRuleContext {
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		public Execute_immediateContext execute_immediate() {
			return getRuleContext(Execute_immediateContext.class,0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return getRuleContext(Cursor_manipulation_statementsContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_statement(this);
		}
	}

	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_sql_statement);
		try {
			setState(2436);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2432); execute_immediate();
				}
				break;
			case DELETE:
			case EXPLAIN:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2433); data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2434); cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(2435); transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_immediateContext extends ParserRuleContext {
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return getRuleContext(Dynamic_returning_clauseContext.class,0);
		}
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(plsqlParser.EXECUTE, 0); }
		public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExecute_immediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExecute_immediate(this);
		}
	}

	public final Execute_immediateContext execute_immediate() throws RecognitionException {
		Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_execute_immediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2438); match(EXECUTE);
			setState(2439); match(IMMEDIATE);
			setState(2440); expression();
			setState(2450);
			switch (_input.LA(1)) {
			case BULK:
			case INTO:
				{
				setState(2441); into_clause();
				setState(2443);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2442); using_clause();
					}
				}

				}
				break;
			case USING:
				{
				setState(2445); using_clause();
				setState(2447);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(2446); dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURN:
			case RETURNING:
				{
				setState(2449); dynamic_returning_clause();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_returning_clauseContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDynamic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDynamic_returning_clause(this);
		}
	}

	public final Dynamic_returning_clauseContext dynamic_returning_clause() throws RecognitionException {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_dynamic_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2452);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2453); into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return getRuleContext(Lock_table_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterData_manipulation_language_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitData_manipulation_language_statements(this);
		}
	}

	public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_data_manipulation_language_statements);
		try {
			setState(2462);
			switch (_input.LA(1)) {
			case MERGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2455); merge_statement();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2456); lock_table_statement();
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2457); select_statement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2458); update_statement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2459); delete_statement();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2460); insert_statement();
				}
				break;
			case EXPLAIN:
				enterOuterAlt(_localctx, 7);
				{
				setState(2461); explain_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_manipulation_statementsContext extends ParserRuleContext {
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Open_for_statementContext open_for_statement() {
			return getRuleContext(Open_for_statementContext.class,0);
		}
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_manipulation_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_manipulation_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_manipulation_statements(this);
		}
	}

	public final Cursor_manipulation_statementsContext cursor_manipulation_statements() throws RecognitionException {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_cursor_manipulation_statements);
		try {
			setState(2468);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2464); close_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2465); open_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2466); fetch_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2467); open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(plsqlParser.CLOSE, 0); }
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterClose_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitClose_statement(this);
		}
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2470); match(CLOSE);
			setState(2471); cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOpen_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOpen_statement(this);
		}
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2473); match(OPEN);
			setState(2474); cursor_name();
			setState(2476);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2475); expression_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_statementContext extends ParserRuleContext {
		public Token it1;
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public TerminalNode FETCH() { return getToken(plsqlParser.FETCH, 0); }
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFetch_statement(this);
		}
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2478); match(FETCH);
			setState(2479); cursor_name();
			setState(2500);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(2480); ((Fetch_statementContext)_localctx).it1 = match(INTO);
				setState(2481); variable_name();
				setState(2486);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2482); match(COMMA);
					setState(2483); variable_name();
					}
					}
					setState(2488);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				{
				setState(2489); match(BULK);
				setState(2490); match(COLLECT);
				setState(2491); match(INTO);
				setState(2492); variable_name();
				setState(2497);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2493); match(COMMA);
					setState(2494); variable_name();
					}
					}
					setState(2499);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_for_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_for_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOpen_for_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOpen_for_statement(this);
		}
	}

	public final Open_for_statementContext open_for_statement() throws RecognitionException {
		Open_for_statementContext _localctx = new Open_for_statementContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_open_for_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2502); match(OPEN);
			setState(2503); variable_name();
			setState(2504); match(FOR);
			setState(2507);
			switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
			case 1:
				{
				setState(2505); select_statement();
				}
				break;
			case 2:
				{
				setState(2506); expression();
				}
				break;
			}
			setState(2510);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2509); using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_control_statementsContext extends ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return getRuleContext(Set_transaction_commandContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return getRuleContext(Set_constraint_commandContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_control_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTransaction_control_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTransaction_control_statements(this);
		}
	}

	public final Transaction_control_statementsContext transaction_control_statements() throws RecognitionException {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_transaction_control_statements);
		try {
			setState(2517);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2512); set_transaction_command();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2513); set_constraint_command();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2514); commit_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2515); rollback_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2516); savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_commandContext extends ParserRuleContext {
		public TerminalNode SEGMENT() { return getToken(plsqlParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return getRuleContext(Rollback_segment_nameContext.class,0);
		}
		public TerminalNode LEVEL() { return getToken(plsqlParser.LEVEL, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode TRANSACTION() { return getToken(plsqlParser.TRANSACTION, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode USE() { return getToken(plsqlParser.USE, 0); }
		public TerminalNode COMMITTED() { return getToken(plsqlParser.COMMITTED, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode ISOLATION() { return getToken(plsqlParser.ISOLATION, 0); }
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(plsqlParser.SERIALIZABLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_transaction_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_transaction_command(this);
		}
	}

	public final Set_transaction_commandContext set_transaction_command() throws RecognitionException {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_set_transaction_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2519); match(SET);
			setState(2520); match(TRANSACTION);
			setState(2534);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(2521); match(READ);
				setState(2522);
				_la = _input.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case ISOLATION:
				{
				setState(2523); match(ISOLATION);
				setState(2524); match(LEVEL);
				setState(2528);
				switch (_input.LA(1)) {
				case SERIALIZABLE:
					{
					setState(2525); match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					setState(2526); match(READ);
					setState(2527); match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case USE:
				{
				setState(2530); match(USE);
				setState(2531); match(ROLLBACK);
				setState(2532); match(SEGMENT);
				setState(2533); rollback_segment_name();
				}
				break;
			case EOF:
			case NAME:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2538);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(2536); match(NAME);
				setState(2537); quoted_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_constraint_commandContext extends ParserRuleContext {
		public TerminalNode DEFERRED() { return getToken(plsqlParser.DEFERRED, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(plsqlParser.CONSTRAINTS, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraint_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_constraint_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_constraint_command(this);
		}
	}

	public final Set_constraint_commandContext set_constraint_command() throws RecognitionException {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_set_constraint_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2540); match(SET);
			setState(2541);
			_la = _input.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2551);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(2542); match(ALL);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2543); constraint_name();
				setState(2548);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2544); match(COMMA);
					setState(2545); constraint_name();
					}
					}
					setState(2550);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2553);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(plsqlParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Write_clauseContext write_clause() {
			return getRuleContext(Write_clauseContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode CORRUPT_XID() { return getToken(plsqlParser.CORRUPT_XID, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCommit_statement(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2555); match(COMMIT);
			setState(2557);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2556); match(WORK);
				}
			}

			setState(2572);
			switch (_input.LA(1)) {
			case COMMENT:
				{
				setState(2559); match(COMMENT);
				setState(2560); expression();
				}
				break;
			case FORCE:
				{
				setState(2561); match(FORCE);
				setState(2570);
				switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					setState(2562); match(CORRUPT_XID);
					setState(2563); expression();
					}
					break;
				case 2:
					{
					setState(2564); match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					setState(2565); expression();
					setState(2568);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2566); match(COMMA);
						setState(2567); expression();
						}
					}

					}
					break;
				}
				}
				break;
			case EOF:
			case SAVE:
			case WRITE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2575);
			_la = _input.LA(1);
			if (_la==WRITE) {
				{
				setState(2574); write_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Write_clauseContext extends ParserRuleContext {
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public TerminalNode BATCH() { return getToken(plsqlParser.BATCH, 0); }
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public Write_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_write_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWrite_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWrite_clause(this);
		}
	}

	public final Write_clauseContext write_clause() throws RecognitionException {
		Write_clauseContext _localctx = new Write_clauseContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_write_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2577); match(WRITE);
			setState(2579);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(2578);
				_la = _input.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2582);
			_la = _input.LA(1);
			if (_la==BATCH || _la==IMMEDIATE) {
				{
				setState(2581);
				_la = _input.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollback_statement(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2584); match(ROLLBACK);
			setState(2586);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2585); match(WORK);
				}
			}

			setState(2595);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(2588); match(TO);
				setState(2590);
				switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
				case 1:
					{
					setState(2589); match(SAVEPOINT);
					}
					break;
				}
				setState(2592); savepoint_name();
				}
				break;
			case FORCE:
				{
				setState(2593); match(FORCE);
				setState(2594); quoted_string();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSavepoint_statement(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2597); match(SAVEPOINT);
			setState(2598); savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_statementContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode PLAN() { return getToken(plsqlParser.PLAN, 0); }
		public TerminalNode EXPLAIN() { return getToken(plsqlParser.EXPLAIN, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public TerminalNode STATEMENT_ID() { return getToken(plsqlParser.STATEMENT_ID, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExplain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExplain_statement(this);
		}
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2600); match(EXPLAIN);
			setState(2601); match(PLAN);
			setState(2606);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2602); match(SET);
				setState(2603); match(STATEMENT_ID);
				setState(2604); match(EQUALS_OP);
				setState(2605); quoted_string();
				}
			}

			setState(2610);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2608); match(INTO);
				setState(2609); tableview_name();
				}
			}

			setState(2612); match(FOR);
			setState(2618);
			switch (_input.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(2613); select_statement();
				}
				break;
			case UPDATE:
				{
				setState(2614); update_statement();
				}
				break;
			case DELETE:
				{
				setState(2615); delete_statement();
				}
				break;
			case INSERT:
				{
				setState(2616); insert_statement();
				}
				break;
			case MERGE:
				{
				setState(2617); merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return getRuleContext(Order_by_clauseContext.class,i);
		}
		public List<Order_by_clauseContext> order_by_clause() {
			return getRuleContexts(Order_by_clauseContext.class);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return getRuleContext(Subquery_factoring_clauseContext.class,0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelect_statement(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2621);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2620); subquery_factoring_clause();
				}
			}

			setState(2623); subquery();
			setState(2628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==ORDER) {
				{
				setState(2626);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(2624); for_update_clause();
					}
					break;
				case ORDER:
					{
					setState(2625); order_by_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2630);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_factoring_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public Factoring_elementContext factoring_element(int i) {
			return getRuleContext(Factoring_elementContext.class,i);
		}
		public List<Factoring_elementContext> factoring_element() {
			return getRuleContexts(Factoring_elementContext.class);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_factoring_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_factoring_clause(this);
		}
	}

	public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_subquery_factoring_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2631); match(WITH);
			setState(2632); factoring_element();
			setState(2637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2633); match(COMMA);
				setState(2634); factoring_element();
				}
				}
				setState(2639);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Factoring_elementContext extends ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Factoring_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factoring_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFactoring_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFactoring_element(this);
		}
	}

	public final Factoring_elementContext factoring_element() throws RecognitionException {
		Factoring_elementContext _localctx = new Factoring_elementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_factoring_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2640); query_name();
			setState(2652);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2641); match(LEFT_PAREN);
				setState(2642); column_name();
				setState(2647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2643); match(COMMA);
					setState(2644); column_name();
					}
					}
					setState(2649);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2650); match(RIGHT_PAREN);
				}
			}

			setState(2654); match(AS);
			setState(2655); match(LEFT_PAREN);
			setState(2656); subquery();
			setState(2658);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2657); order_by_clause();
				}
			}

			setState(2660); match(RIGHT_PAREN);
			setState(2662);
			_la = _input.LA(1);
			if (_la==SEARCH) {
				{
				setState(2661); search_clause();
				}
			}

			setState(2665);
			_la = _input.LA(1);
			if (_la==CYCLE) {
				{
				setState(2664); cycle_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_clauseContext extends ParserRuleContext {
		public List<TerminalNode> ASC() { return getTokens(plsqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(plsqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(plsqlParser.DESC); }
		public List<TerminalNode> FIRST() { return getTokens(plsqlParser.FIRST); }
		public List<TerminalNode> LAST() { return getTokens(plsqlParser.LAST); }
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SEARCH() { return getToken(plsqlParser.SEARCH, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public TerminalNode DEPTH() { return getToken(plsqlParser.DEPTH, 0); }
		public TerminalNode FIRST(int i) {
			return getToken(plsqlParser.FIRST, i);
		}
		public TerminalNode LAST(int i) {
			return getToken(plsqlParser.LAST, i);
		}
		public TerminalNode DESC(int i) {
			return getToken(plsqlParser.DESC, i);
		}
		public TerminalNode NULLS(int i) {
			return getToken(plsqlParser.NULLS, i);
		}
		public TerminalNode BREADTH() { return getToken(plsqlParser.BREADTH, 0); }
		public List<TerminalNode> NULLS() { return getTokens(plsqlParser.NULLS); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearch_clause(this);
		}
	}

	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_search_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2667); match(SEARCH);
			setState(2668);
			_la = _input.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2669); match(FIRST);
			setState(2670); match(BY);
			setState(2671); column_name();
			setState(2673);
			_la = _input.LA(1);
			if (_la==ASC) {
				{
				setState(2672); match(ASC);
				}
			}

			setState(2676);
			_la = _input.LA(1);
			if (_la==DESC) {
				{
				setState(2675); match(DESC);
				}
			}

			setState(2680);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				{
				setState(2678); match(NULLS);
				setState(2679); match(FIRST);
				}
				break;
			}
			setState(2684);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(2682); match(NULLS);
				setState(2683); match(LAST);
				}
			}

			setState(2704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2686); match(COMMA);
				setState(2687); column_name();
				setState(2689);
				_la = _input.LA(1);
				if (_la==ASC) {
					{
					setState(2688); match(ASC);
					}
				}

				setState(2692);
				_la = _input.LA(1);
				if (_la==DESC) {
					{
					setState(2691); match(DESC);
					}
				}

				setState(2696);
				switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
				case 1:
					{
					setState(2694); match(NULLS);
					setState(2695); match(FIRST);
					}
					break;
				}
				setState(2700);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(2698); match(NULLS);
					setState(2699); match(LAST);
					}
				}

				}
				}
				setState(2706);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2707); match(SET);
			setState(2708); column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_clauseContext extends ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCycle_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCycle_clause(this);
		}
	}

	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_cycle_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2710); match(CYCLE);
			setState(2711); column_name();
			setState(2716);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2712); match(COMMA);
				setState(2713); column_name();
				}
				}
				setState(2718);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2719); match(SET);
			setState(2720); column_name();
			setState(2721); match(TO);
			setState(2722); expression();
			setState(2723); match(DEFAULT);
			setState(2724); expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_subquery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2726); subquery_basic_elements();
			setState(2730);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTERSECT || _la==MINUS || _la==UNION) {
				{
				{
				setState(2727); subquery_operation_part();
				}
				}
				setState(2732);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_operation_partContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(plsqlParser.UNION, 0); }
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public TerminalNode INTERSECT() { return getToken(plsqlParser.INTERSECT, 0); }
		public TerminalNode MINUS() { return getToken(plsqlParser.MINUS, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_operation_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_operation_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_operation_part(this);
		}
	}

	public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_subquery_operation_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2739);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(2733); match(UNION);
				setState(2735);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(2734); match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				setState(2737); match(INTERSECT);
				}
				break;
			case MINUS:
				{
				setState(2738); match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2741); subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_basic_elementsContext extends ParserRuleContext {
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_basic_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_basic_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_basic_elements(this);
		}
	}

	public final Subquery_basic_elementsContext subquery_basic_elements() throws RecognitionException {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_subquery_basic_elements);
		try {
			setState(2748);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2743); query_block();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2744); match(LEFT_PAREN);
				setState(2745); subquery();
				setState(2746); match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_blockContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Selected_elementContext selected_element(int i) {
			return getRuleContext(Selected_elementContext.class,i);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public List<Selected_elementContext> selected_element() {
			return getRuleContexts(Selected_elementContext.class);
		}
		public TerminalNode SELECT() { return getToken(plsqlParser.SELECT, 0); }
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_block(this);
		}
	}

	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_query_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2750); match(SELECT);
			setState(2752);
			switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
			case 1:
				{
				setState(2751);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			}
			setState(2763);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(2754); match(ASTERISK);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2755); selected_element();
				setState(2760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2756); match(COMMA);
					setState(2757); selected_element();
					}
					}
					setState(2762);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2766);
			_la = _input.LA(1);
			if (_la==BULK || _la==INTO) {
				{
				setState(2765); into_clause();
				}
			}

			setState(2768); from_clause();
			setState(2770);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				{
				setState(2769); where_clause();
				}
				break;
			}
			setState(2773);
			switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				setState(2772); hierarchical_query_clause();
				}
				break;
			}
			setState(2776);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				setState(2775); group_by_clause();
				}
				break;
			}
			setState(2779);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				setState(2778); model_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Selected_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelected_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelected_element(this);
		}
	}

	public final Selected_elementContext selected_element() throws RecognitionException {
		Selected_elementContext _localctx = new Selected_elementContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_selected_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2781); select_list_elements();
			setState(2783);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				{
				setState(2782); column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public Table_ref_listContext table_ref_list() {
			return getRuleContext(Table_ref_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFrom_clause(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2785); match(FROM);
			setState(2786); table_ref_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elementsContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Select_list_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelect_list_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelect_list_elements(this);
		}
	}

	public final Select_list_elementsContext select_list_elements() throws RecognitionException {
		Select_list_elementsContext _localctx = new Select_list_elementsContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_select_list_elements);
		try {
			setState(2793);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2788); tableview_name();
				setState(2789); match(PERIOD);
				setState(2790); match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2792); expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_listContext extends ParserRuleContext {
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_ref_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_ref_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_ref_list(this);
		}
	}

	public final Table_ref_listContext table_ref_list() throws RecognitionException {
		Table_ref_listContext _localctx = new Table_ref_listContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_table_ref_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2795); table_ref();
			setState(2800);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,302,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2796); match(COMMA);
					setState(2797); table_ref();
					}
					} 
				}
				setState(2802);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,302,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public List<Join_clauseContext> join_clause() {
			return getRuleContexts(Join_clauseContext.class);
		}
		public Join_clauseContext join_clause(int i) {
			return getRuleContext(Join_clauseContext.class,i);
		}
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_ref(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_table_ref);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2803); table_ref_aux();
			setState(2807);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,303,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2804); join_clause();
					}
					} 
				}
				setState(2809);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,303,_ctx);
			}
			setState(2812);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				{
				setState(2810); pivot_clause();
				}
				break;
			case 2:
				{
				setState(2811); unpivot_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_auxContext extends ParserRuleContext {
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_ref_aux(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_ref_aux(this);
		}
	}

	public final Table_ref_auxContext table_ref_aux() throws RecognitionException {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_table_ref_aux);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2842);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				setState(2814); dml_table_expression_clause();
				setState(2817);
				switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
				case 1:
					{
					setState(2815); pivot_clause();
					}
					break;
				case 2:
					{
					setState(2816); unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2819); match(LEFT_PAREN);
				setState(2820); table_ref();
				setState(2824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INTERSECT || _la==MINUS || _la==UNION) {
					{
					{
					setState(2821); subquery_operation_part();
					}
					}
					setState(2826);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2827); match(RIGHT_PAREN);
				setState(2830);
				switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					setState(2828); pivot_clause();
					}
					break;
				case 2:
					{
					setState(2829); unpivot_clause();
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(2832); match(ONLY);
				setState(2833); match(LEFT_PAREN);
				setState(2834); dml_table_expression_clause();
				setState(2835); match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				setState(2837); dml_table_expression_clause();
				setState(2840);
				switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					setState(2838); pivot_clause();
					}
					break;
				case 2:
					{
					setState(2839); unpivot_clause();
					}
					break;
				}
				}
				break;
			}
			setState(2847);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,310,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2844); flashback_query_clause();
					}
					} 
				}
				setState(2849);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,310,_ctx);
			}
			setState(2851);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				{
				setState(2850); table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_clauseContext extends ParserRuleContext {
		public List<Join_on_partContext> join_on_part() {
			return getRuleContexts(Join_on_partContext.class);
		}
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public Join_using_partContext join_using_part(int i) {
			return getRuleContext(Join_using_partContext.class,i);
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return getRuleContext(Query_partition_clauseContext.class,i);
		}
		public TerminalNode INNER() { return getToken(plsqlParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(plsqlParser.CROSS, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public List<Query_partition_clauseContext> query_partition_clause() {
			return getRuleContexts(Query_partition_clauseContext.class);
		}
		public TerminalNode JOIN() { return getToken(plsqlParser.JOIN, 0); }
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public Join_on_partContext join_on_part(int i) {
			return getRuleContext(Join_on_partContext.class,i);
		}
		public List<Join_using_partContext> join_using_part() {
			return getRuleContexts(Join_using_partContext.class);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_clause(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_join_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2854);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2853); query_partition_clause();
				}
			}

			setState(2857);
			_la = _input.LA(1);
			if (_la==CROSS || _la==NATURAL) {
				{
				setState(2856);
				_la = _input.LA(1);
				if ( !(_la==CROSS || _la==NATURAL) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2861);
			switch (_input.LA(1)) {
			case INNER:
				{
				setState(2859); match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				setState(2860); outer_join_type();
				}
				break;
			case JOIN:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2863); match(JOIN);
			setState(2864); table_ref_aux();
			setState(2866);
			switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
			case 1:
				{
				setState(2865); query_partition_clause();
				}
				break;
			}
			setState(2872);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,317,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2870);
					switch (_input.LA(1)) {
					case ON:
						{
						setState(2868); join_on_part();
						}
						break;
					case USING:
						{
						setState(2869); join_using_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2874);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,317,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_on_partContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_on_part(this);
		}
	}

	public final Join_on_partContext join_on_part() throws RecognitionException {
		Join_on_partContext _localctx = new Join_on_partContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_join_on_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2875); match(ON);
			setState(2876); condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_using_partContext extends ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public Join_using_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_using_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_using_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_using_part(this);
		}
	}

	public final Join_using_partContext join_using_part() throws RecognitionException {
		Join_using_partContext _localctx = new Join_using_partContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_join_using_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2878); match(USING);
			setState(2879); match(LEFT_PAREN);
			setState(2880); column_name();
			setState(2885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2881); match(COMMA);
				setState(2882); column_name();
				}
				}
				setState(2887);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2888); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public TerminalNode LEFT() { return getToken(plsqlParser.LEFT, 0); }
		public TerminalNode OUTER() { return getToken(plsqlParser.OUTER, 0); }
		public TerminalNode RIGHT() { return getToken(plsqlParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(plsqlParser.FULL, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOuter_join_type(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2890);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2892);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(2891); match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_partition_clauseContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_partition_clause(this);
		}
	}

	public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_query_partition_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2894); match(PARTITION);
			setState(2895); match(BY);
			setState(2909);
			switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
			case 1:
				{
				setState(2896); match(LEFT_PAREN);
				setState(2897); subquery();
				setState(2898); match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(2900); expression_list();
				}
				break;
			case 3:
				{
				setState(2901); expression();
				setState(2906);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,320,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2902); match(COMMA);
						setState(2903); expression();
						}
						} 
					}
					setState(2908);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,320,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_query_clauseContext extends ParserRuleContext {
		public TerminalNode VERSIONS() { return getToken(plsqlParser.VERSIONS, 0); }
		public TerminalNode SNAPSHOT() { return getToken(plsqlParser.SNAPSHOT, 0); }
		public TerminalNode SCN() { return getToken(plsqlParser.SCN, 0); }
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFlashback_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFlashback_query_clause(this);
		}
	}

	public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_flashback_query_clause);
		int _la;
		try {
			setState(2919);
			switch (_input.LA(1)) {
			case VERSIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2911); match(VERSIONS);
				setState(2912); match(BETWEEN);
				setState(2913);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(2914); expression();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2915); match(AS);
				setState(2916); match(OF);
				setState(2917);
				_la = _input.LA(1);
				if ( !(((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (SCN - 329)) | (1L << (SNAPSHOT - 329)) | (1L << (TIMESTAMP - 329)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(2918); expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public List<Pivot_elementContext> pivot_element() {
			return getRuleContexts(Pivot_elementContext.class);
		}
		public Pivot_elementContext pivot_element(int i) {
			return getRuleContext(Pivot_elementContext.class,i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public TerminalNode PIVOT() { return getToken(plsqlParser.PIVOT, 0); }
		public Pivot_in_clauseContext pivot_in_clause() {
			return getRuleContext(Pivot_in_clauseContext.class,0);
		}
		public TerminalNode XML() { return getToken(plsqlParser.XML, 0); }
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_clause(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_pivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2921); match(PIVOT);
			setState(2923);
			_la = _input.LA(1);
			if (_la==XML) {
				{
				setState(2922); match(XML);
				}
			}

			setState(2925); match(LEFT_PAREN);
			setState(2926); pivot_element();
			setState(2931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2927); match(COMMA);
				setState(2928); pivot_element();
				}
				}
				setState(2933);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2934); pivot_for_clause();
			setState(2935); pivot_in_clause();
			setState(2936); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_elementContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_element(this);
		}
	}

	public final Pivot_elementContext pivot_element() throws RecognitionException {
		Pivot_elementContext _localctx = new Pivot_elementContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_pivot_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2938); aggregate_function_name();
			setState(2939); match(LEFT_PAREN);
			setState(2940); expression();
			setState(2941); match(RIGHT_PAREN);
			setState(2943);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (NATIONAL_CHAR_STRING_LIT - 451)) | (1L << (CHAR_STRING - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(2942); column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_for_clauseContext extends ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_for_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_for_clause(this);
		}
	}

	public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_pivot_for_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2945); match(FOR);
			setState(2958);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2946); column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(2947); match(LEFT_PAREN);
				setState(2948); column_name();
				setState(2953);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2949); match(COMMA);
					setState(2950); column_name();
					}
					}
					setState(2955);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2956); match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clauseContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return getRuleContext(Pivot_in_clause_elementContext.class,i);
		}
		public TerminalNode ANY(int i) {
			return getToken(plsqlParser.ANY, i);
		}
		public List<Pivot_in_clause_elementContext> pivot_in_clause_element() {
			return getRuleContexts(Pivot_in_clause_elementContext.class);
		}
		public List<TerminalNode> ANY() { return getTokens(plsqlParser.ANY); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause(this);
		}
	}

	public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_pivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2960); match(IN);
			setState(2961); match(LEFT_PAREN);
			setState(2979);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				{
				setState(2962); subquery();
				}
				break;
			case 2:
				{
				setState(2963); match(ANY);
				setState(2968);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2964); match(COMMA);
					setState(2965); match(ANY);
					}
					}
					setState(2970);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				{
				setState(2971); pivot_in_clause_element();
				setState(2976);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2972); match(COMMA);
					setState(2973); pivot_in_clause_element();
					}
					}
					setState(2978);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2981); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementContext extends ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return getRuleContext(Pivot_in_clause_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause_element(this);
		}
	}

	public final Pivot_in_clause_elementContext pivot_in_clause_element() throws RecognitionException {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_pivot_in_clause_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2983); pivot_in_clause_elements();
			setState(2985);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (NATIONAL_CHAR_STRING_LIT - 451)) | (1L << (CHAR_STRING - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(2984); column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementsContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause_elements(this);
		}
	}

	public final Pivot_in_clause_elementsContext pivot_in_clause_elements() throws RecognitionException {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_pivot_in_clause_elements);
		try {
			setState(2989);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2987); expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2988); expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return getRuleContext(Unpivot_in_clauseContext.class,0);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public TerminalNode EXCLUDE() { return getToken(plsqlParser.EXCLUDE, 0); }
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode UNPIVOT() { return getToken(plsqlParser.UNPIVOT, 0); }
		public TerminalNode INCLUDE() { return getToken(plsqlParser.INCLUDE, 0); }
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_clause(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_unpivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2991); match(UNPIVOT);
			setState(2994);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(2992);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(2993); match(NULLS);
				}
			}

			setState(2996); match(LEFT_PAREN);
			setState(3009);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2997); column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(2998); match(LEFT_PAREN);
				setState(2999); column_name();
				setState(3004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3000); match(COMMA);
					setState(3001); column_name();
					}
					}
					setState(3006);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3007); match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3011); pivot_for_clause();
			setState(3012); unpivot_in_clause();
			setState(3013); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_clauseContext extends ParserRuleContext {
		public List<Unpivot_in_elementsContext> unpivot_in_elements() {
			return getRuleContexts(Unpivot_in_elementsContext.class);
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return getRuleContext(Unpivot_in_elementsContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_in_clause(this);
		}
	}

	public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_unpivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3015); match(IN);
			setState(3016); match(LEFT_PAREN);
			setState(3017); unpivot_in_elements();
			setState(3022);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3018); match(COMMA);
				setState(3019); unpivot_in_elements();
				}
				}
				setState(3024);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3025); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_elementsContext extends ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_in_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_in_elements(this);
		}
	}

	public final Unpivot_in_elementsContext unpivot_in_elements() throws RecognitionException {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_unpivot_in_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3039);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3027); column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3028); match(LEFT_PAREN);
				setState(3029); column_name();
				setState(3034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3030); match(COMMA);
					setState(3031); column_name();
					}
					}
					setState(3036);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3037); match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3056);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3041); match(AS);
				setState(3054);
				switch (_input.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
					{
					setState(3042); constant();
					}
					break;
				case LEFT_PAREN:
					{
					setState(3043); match(LEFT_PAREN);
					setState(3044); constant();
					setState(3049);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3045); match(COMMA);
						setState(3046); constant();
						}
						}
						setState(3051);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3052); match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hierarchical_query_clauseContext extends ParserRuleContext {
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public TerminalNode CONNECT() { return getToken(plsqlParser.CONNECT, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Start_partContext start_part() {
			return getRuleContext(Start_partContext.class,0);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterHierarchical_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitHierarchical_query_clause(this);
		}
	}

	public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_hierarchical_query_clause);
		try {
			setState(3075);
			switch (_input.LA(1)) {
			case CONNECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3058); match(CONNECT);
				setState(3059); match(BY);
				setState(3061);
				switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
				case 1:
					{
					setState(3060); match(NOCYCLE);
					}
					break;
				}
				setState(3063); condition();
				setState(3065);
				switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
				case 1:
					{
					setState(3064); start_part();
					}
					break;
				}
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(3067); start_part();
				setState(3068); match(CONNECT);
				setState(3069); match(BY);
				setState(3071);
				switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
				case 1:
					{
					setState(3070); match(NOCYCLE);
					}
					break;
				}
				setState(3073); condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_partContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode START() { return getToken(plsqlParser.START, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStart_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStart_part(this);
		}
	}

	public final Start_partContext start_part() throws RecognitionException {
		Start_partContext _localctx = new Start_partContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_start_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3077); match(START);
			setState(3078); match(WITH);
			setState(3079); condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public List<Group_by_elementsContext> group_by_elements() {
			return getRuleContexts(Group_by_elementsContext.class);
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return getRuleContext(Group_by_elementsContext.class,i);
		}
		public TerminalNode GROUP() { return getToken(plsqlParser.GROUP, 0); }
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGroup_by_clause(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_group_by_clause);
		try {
			int _alt;
			setState(3107);
			switch (_input.LA(1)) {
			case GROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3081); match(GROUP);
				setState(3082); match(BY);
				setState(3083); group_by_elements();
				setState(3088);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,346,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3084); match(COMMA);
						setState(3085); group_by_elements();
						}
						} 
					}
					setState(3090);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,346,_ctx);
				}
				setState(3092);
				switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
				case 1:
					{
					setState(3091); having_clause();
					}
					break;
				}
				}
				break;
			case HAVING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3094); having_clause();
				setState(3105);
				switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
				case 1:
					{
					setState(3095); match(GROUP);
					setState(3096); match(BY);
					setState(3097); group_by_elements();
					setState(3102);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,348,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3098); match(COMMA);
							setState(3099); group_by_elements();
							}
							} 
						}
						setState(3104);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,348,_ctx);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_elementsContext extends ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGroup_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGroup_by_elements(this);
		}
	}

	public final Group_by_elementsContext group_by_elements() throws RecognitionException {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_group_by_elements);
		try {
			setState(3112);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3109); grouping_sets_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3110); rollup_cube_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3111); expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		public TerminalNode ROLLUP() { return getToken(plsqlParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(plsqlParser.CUBE, 0); }
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollup_cube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollup_cube_clause(this);
		}
	}

	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_rollup_cube_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3114);
			_la = _input.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(3115); match(LEFT_PAREN);
			setState(3116); grouping_sets_elements();
			setState(3121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3117); match(COMMA);
				setState(3118); grouping_sets_elements();
				}
				}
				setState(3123);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3124); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode SETS() { return getToken(plsqlParser.SETS, 0); }
		public TerminalNode GROUPING() { return getToken(plsqlParser.GROUPING, 0); }
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGrouping_sets_clause(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_grouping_sets_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3126); match(GROUPING);
			setState(3127); match(SETS);
			setState(3128); match(LEFT_PAREN);
			setState(3129); grouping_sets_elements();
			setState(3134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3130); match(COMMA);
				setState(3131); grouping_sets_elements();
				}
				}
				setState(3136);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3137); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_elementsContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGrouping_sets_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGrouping_sets_elements(this);
		}
	}

	public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_grouping_sets_elements);
		try {
			setState(3142);
			switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3139); rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3140); expression_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3141); expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(plsqlParser.HAVING, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitHaving_clause(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3144); match(HAVING);
			setState(3145); condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_clauseContext extends ParserRuleContext {
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Reference_modelContext reference_model(int i) {
			return getRuleContext(Reference_modelContext.class,i);
		}
		public List<Reference_modelContext> reference_model() {
			return getRuleContexts(Reference_modelContext.class);
		}
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public Return_rows_clauseContext return_rows_clause() {
			return getRuleContext(Return_rows_clauseContext.class,0);
		}
		public Main_modelContext main_model() {
			return getRuleContext(Main_modelContext.class,0);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_clause(this);
		}
	}

	public final Model_clauseContext model_clause() throws RecognitionException {
		Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_model_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3147); match(MODEL);
			setState(3151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3148); cell_reference_options();
				}
				}
				setState(3153);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3155);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(3154); return_rows_clause();
				}
			}

			setState(3160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REFERENCE) {
				{
				{
				setState(3157); reference_model();
				}
				}
				setState(3162);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3163); main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_reference_optionsContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode NAV() { return getToken(plsqlParser.NAV, 0); }
		public TerminalNode SINGLE() { return getToken(plsqlParser.SINGLE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_reference_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCell_reference_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCell_reference_options(this);
		}
	}

	public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_cell_reference_options);
		int _la;
		try {
			setState(3173);
			switch (_input.LA(1)) {
			case IGNORE:
			case KEEP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3165);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(3166); match(NAV);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3167); match(UNIQUE);
				setState(3171);
				switch (_input.LA(1)) {
				case DIMENSION:
					{
					setState(3168); match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					setState(3169); match(SINGLE);
					setState(3170); match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_rows_clauseContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode UPDATED() { return getToken(plsqlParser.UPDATED, 0); }
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_rows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReturn_rows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReturn_rows_clause(this);
		}
	}

	public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_return_rows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3175); match(RETURN);
			setState(3176);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(3177); match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_modelContext extends ParserRuleContext {
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Reference_model_nameContext reference_model_name() {
			return getRuleContext(Reference_model_nameContext.class,0);
		}
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReference_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReference_model(this);
		}
	}

	public final Reference_modelContext reference_model() throws RecognitionException {
		Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_reference_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3179); match(REFERENCE);
			setState(3180); reference_model_name();
			setState(3181); match(ON);
			setState(3182); match(LEFT_PAREN);
			setState(3183); subquery();
			setState(3184); match(RIGHT_PAREN);
			setState(3185); model_column_clauses();
			setState(3189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3186); cell_reference_options();
				}
				}
				setState(3191);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_modelContext extends ParserRuleContext {
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Main_model_nameContext main_model_name() {
			return getRuleContext(Main_model_nameContext.class,0);
		}
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return getRuleContext(Model_rules_clauseContext.class,0);
		}
		public TerminalNode MAIN() { return getToken(plsqlParser.MAIN, 0); }
		public Main_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMain_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMain_model(this);
		}
	}

	public final Main_modelContext main_model() throws RecognitionException {
		Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_main_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3194);
			_la = _input.LA(1);
			if (_la==MAIN) {
				{
				setState(3192); match(MAIN);
				setState(3193); main_model_name();
				}
			}

			setState(3196); model_column_clauses();
			setState(3200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3197); cell_reference_options();
				}
				}
				setState(3202);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3203); model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_clausesContext extends ParserRuleContext {
		public TerminalNode MEASURES() { return getToken(plsqlParser.MEASURES, 0); }
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public Model_column_listContext model_column_list(int i) {
			return getRuleContext(Model_column_listContext.class,i);
		}
		public List<Model_column_listContext> model_column_list() {
			return getRuleContexts(Model_column_listContext.class);
		}
		public Model_column_partition_partContext model_column_partition_part() {
			return getRuleContext(Model_column_partition_partContext.class,0);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_clauses(this);
		}
	}

	public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_model_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3206);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3205); model_column_partition_part();
				}
			}

			setState(3208); match(DIMENSION);
			setState(3209); match(BY);
			setState(3210); model_column_list();
			setState(3211); match(MEASURES);
			setState(3212); model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_partition_partContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public Model_column_listContext model_column_list() {
			return getRuleContext(Model_column_listContext.class,0);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_partition_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_partition_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_partition_part(this);
		}
	}

	public final Model_column_partition_partContext model_column_partition_part() throws RecognitionException {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_model_column_partition_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3214); match(PARTITION);
			setState(3215); match(BY);
			setState(3216); model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_listContext extends ParserRuleContext {
		public Model_columnContext model_column(int i) {
			return getRuleContext(Model_columnContext.class,i);
		}
		public List<Model_columnContext> model_column() {
			return getRuleContexts(Model_columnContext.class);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_list(this);
		}
	}

	public final Model_column_listContext model_column_list() throws RecognitionException {
		Model_column_listContext _localctx = new Model_column_listContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_model_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3218); match(LEFT_PAREN);
			setState(3219); model_column();
			setState(3224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3220); match(COMMA);
				setState(3221); model_column();
				}
				}
				setState(3226);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3227); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_columnContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column(this);
		}
	}

	public final Model_columnContext model_column() throws RecognitionException {
		Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_model_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3229); expression();
			setState(3231);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (NATIONAL_CHAR_STRING_LIT - 451)) | (1L << (CHAR_STRING - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3230); table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_clauseContext extends ParserRuleContext {
		public Model_rules_elementContext model_rules_element(int i) {
			return getRuleContext(Model_rules_elementContext.class,i);
		}
		public List<Model_rules_elementContext> model_rules_element() {
			return getRuleContexts(Model_rules_elementContext.class);
		}
		public Model_rules_partContext model_rules_part() {
			return getRuleContext(Model_rules_partContext.class,0);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_clause(this);
		}
	}

	public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_model_rules_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3234);
			_la = _input.LA(1);
			if (_la==RULES) {
				{
				setState(3233); model_rules_part();
				}
			}

			setState(3236); match(LEFT_PAREN);
			setState(3237); model_rules_element();
			setState(3242);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3238); match(COMMA);
				setState(3239); model_rules_element();
				}
				}
				setState(3244);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3245); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_partContext extends ParserRuleContext {
		public TerminalNode RULES() { return getToken(plsqlParser.RULES, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(plsqlParser.SEQUENTIAL, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return getRuleContext(Model_iterate_clauseContext.class,0);
		}
		public TerminalNode AUTOMATIC() { return getToken(plsqlParser.AUTOMATIC, 0); }
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_part(this);
		}
	}

	public final Model_rules_partContext model_rules_part() throws RecognitionException {
		Model_rules_partContext _localctx = new Model_rules_partContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_model_rules_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3247); match(RULES);
			setState(3253);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(3248); match(UPDATE);
				}
				break;
			case UPSERT:
				{
				setState(3249); match(UPSERT);
				setState(3251);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3250); match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3257);
			_la = _input.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				setState(3255);
				_la = _input.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(3256); match(ORDER);
				}
			}

			setState(3260);
			_la = _input.LA(1);
			if (_la==ITERATE) {
				{
				setState(3259); model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_elementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_element(this);
		}
	}

	public final Model_rules_elementContext model_rules_element() throws RecognitionException {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_model_rules_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3267);
			switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
			case 1:
				{
				setState(3262); match(UPDATE);
				}
				break;
			case 2:
				{
				setState(3263); match(UPSERT);
				setState(3265);
				switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					setState(3264); match(ALL);
					}
					break;
				}
				}
				break;
			}
			setState(3269); cell_assignment();
			setState(3271);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3270); order_by_clause();
				}
			}

			setState(3273); match(EQUALS_OP);
			setState(3274); expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_assignmentContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCell_assignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCell_assignment(this);
		}
	}

	public final Cell_assignmentContext cell_assignment() throws RecognitionException {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_cell_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3276); model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_iterate_clauseContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(plsqlParser.ITERATE, 0); }
		public Until_partContext until_part() {
			return getRuleContext(Until_partContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_iterate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_iterate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_iterate_clause(this);
		}
	}

	public final Model_iterate_clauseContext model_iterate_clause() throws RecognitionException {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_model_iterate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3278); match(ITERATE);
			setState(3279); match(LEFT_PAREN);
			setState(3280); expression();
			setState(3281); match(RIGHT_PAREN);
			setState(3283);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3282); until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Until_partContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(plsqlParser.UNTIL, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Until_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_until_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUntil_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUntil_part(this);
		}
	}

	public final Until_partContext until_part() throws RecognitionException {
		Until_partContext _localctx = new Until_partContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_until_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3285); match(UNTIL);
			setState(3286); match(LEFT_PAREN);
			setState(3287); condition();
			setState(3288); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public List<Order_by_elementsContext> order_by_elements() {
			return getRuleContexts(Order_by_elementsContext.class);
		}
		public TerminalNode SIBLINGS() { return getToken(plsqlParser.SIBLINGS, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Order_by_elementsContext order_by_elements(int i) {
			return getRuleContext(Order_by_elementsContext.class,i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOrder_by_clause(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_order_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3290); match(ORDER);
			setState(3292);
			_la = _input.LA(1);
			if (_la==SIBLINGS) {
				{
				setState(3291); match(SIBLINGS);
				}
			}

			setState(3294); match(BY);
			setState(3295); order_by_elements();
			setState(3300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3296); match(COMMA);
				setState(3297); order_by_elements();
				}
				}
				setState(3302);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_elementsContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(plsqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(plsqlParser.DESC, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOrder_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOrder_by_elements(this);
		}
	}

	public final Order_by_elementsContext order_by_elements() throws RecognitionException {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_order_by_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3303); expression();
			setState(3305);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3304);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(3309);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(3307); match(NULLS);
				setState(3308);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_clauseContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public For_update_optionsContext for_update_options() {
			return getRuleContext(For_update_optionsContext.class,0);
		}
		public For_update_of_partContext for_update_of_part() {
			return getRuleContext(For_update_of_partContext.class,0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_clause(this);
		}
	}

	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_for_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3311); match(FOR);
			setState(3312); match(UPDATE);
			setState(3314);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(3313); for_update_of_part();
				}
			}

			setState(3317);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==SKIP_ || _la==WAIT) {
				{
				setState(3316); for_update_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_of_partContext extends ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public For_update_of_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_of_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_of_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_of_part(this);
		}
	}

	public final For_update_of_partContext for_update_of_part() throws RecognitionException {
		For_update_of_partContext _localctx = new For_update_of_partContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_for_update_of_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3319); match(OF);
			setState(3320); column_name();
			setState(3325);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3321); match(COMMA);
				setState(3322); column_name();
				}
				}
				setState(3327);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_optionsContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(plsqlParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(plsqlParser.LOCKED, 0); }
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public For_update_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_options(this);
		}
	}

	public final For_update_optionsContext for_update_options() throws RecognitionException {
		For_update_optionsContext _localctx = new For_update_optionsContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_for_update_options);
		try {
			setState(3333);
			switch (_input.LA(1)) {
			case SKIP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3328); match(SKIP_);
				setState(3329); match(LOCKED);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3330); match(NOWAIT);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3331); match(WAIT);
				setState(3332); expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpdate_statement(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3335); match(UPDATE);
			setState(3336); general_table_ref();
			setState(3337); update_set_clause();
			setState(3339);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3338); where_clause();
				}
			}

			setState(3342);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(3341); static_returning_clause();
				}
			}

			setState(3345);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3344); error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_set_clauseContext extends ParserRuleContext {
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return getRuleContext(Column_based_update_set_clauseContext.class,i);
		}
		public List<Column_based_update_set_clauseContext> column_based_update_set_clause() {
			return getRuleContexts(Column_based_update_set_clauseContext.class);
		}
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpdate_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpdate_set_clause(this);
		}
	}

	public final Update_set_clauseContext update_set_clause() throws RecognitionException {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_update_set_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3347); match(SET);
			setState(3363);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				setState(3348); column_based_update_set_clause();
				setState(3353);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3349); match(COMMA);
					setState(3350); column_based_update_set_clause();
					}
					}
					setState(3355);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(3356); match(VALUE);
				setState(3357); match(LEFT_PAREN);
				setState(3358); id();
				setState(3359); match(RIGHT_PAREN);
				setState(3360); match(EQUALS_OP);
				setState(3361); expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_based_update_set_clauseContext extends ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_based_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_based_update_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_based_update_set_clause(this);
		}
	}

	public final Column_based_update_set_clauseContext column_based_update_set_clause() throws RecognitionException {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_column_based_update_set_clause);
		int _la;
		try {
			setState(3382);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3365); column_name();
				setState(3366); match(EQUALS_OP);
				setState(3367); expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3369); match(LEFT_PAREN);
				setState(3370); column_name();
				setState(3375);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3371); match(COMMA);
					setState(3372); column_name();
					}
					}
					setState(3377);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3378); match(RIGHT_PAREN);
				setState(3379); match(EQUALS_OP);
				setState(3380); subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDelete_statement(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3384); match(DELETE);
			setState(3386);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3385); match(FROM);
				}
			}

			setState(3388); general_table_ref();
			setState(3390);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3389); where_clause();
				}
			}

			setState(3393);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(3392); static_returning_clause();
				}
			}

			setState(3396);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3395); error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInsert_statement(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3398); match(INSERT);
			setState(3401);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(3399); single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(3400); multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_table_insertContext extends ParserRuleContext {
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSingle_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSingle_table_insert(this);
		}
	}

	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_single_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3403); insert_into_clause();
			setState(3409);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(3404); values_clause();
				setState(3406);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(3405); static_returning_clause();
					}
				}

				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(3408); select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3412);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3411); error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_insertContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return getRuleContext(Conditional_insert_clauseContext.class,0);
		}
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_table_insert(this);
		}
	}

	public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_multi_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3421);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				setState(3414); match(ALL);
				setState(3416); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3415); multi_table_element();
					}
					}
					setState(3418); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				setState(3420); conditional_insert_clause();
				}
				break;
			}
			setState(3423); select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_elementContext extends ParserRuleContext {
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_table_element(this);
		}
	}

	public final Multi_table_elementContext multi_table_element() throws RecognitionException {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_multi_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3425); insert_into_clause();
			setState(3427);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(3426); values_clause();
				}
			}

			setState(3430);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3429); error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_clauseContext extends ParserRuleContext {
		public List<Conditional_insert_when_partContext> conditional_insert_when_part() {
			return getRuleContexts(Conditional_insert_when_partContext.class);
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return getRuleContext(Conditional_insert_when_partContext.class,i);
		}
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return getRuleContext(Conditional_insert_else_partContext.class,0);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_clause(this);
		}
	}

	public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_conditional_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3433);
			_la = _input.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				setState(3432);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(3436); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3435); conditional_insert_when_part();
				}
				}
				setState(3438); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(3441);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3440); conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_when_partContext extends ParserRuleContext {
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_when_part(this);
		}
	}

	public final Conditional_insert_when_partContext conditional_insert_when_part() throws RecognitionException {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_conditional_insert_when_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3443); match(WHEN);
			setState(3444); condition();
			setState(3445); match(THEN);
			setState(3447); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3446); multi_table_element();
				}
				}
				setState(3449); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_else_part(this);
		}
	}

	public final Conditional_insert_else_partContext conditional_insert_else_part() throws RecognitionException {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_conditional_insert_else_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3451); match(ELSE);
			setState(3453); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3452); multi_table_element();
				}
				}
				setState(3455); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_into_clauseContext extends ParserRuleContext {
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInsert_into_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInsert_into_clause(this);
		}
	}

	public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_insert_into_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3457); match(INTO);
			setState(3458); general_table_ref();
			setState(3470);
			switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
			case 1:
				{
				setState(3459); match(LEFT_PAREN);
				setState(3460); column_name();
				setState(3465);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3461); match(COMMA);
					setState(3462); column_name();
					}
					}
					setState(3467);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3468); match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitValues_clause(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_values_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3472); match(VALUES);
			setState(3473); expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode MERGE() { return getToken(plsqlParser.MERGE, 0); }
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Selected_tableviewContext selected_tableview() {
			return getRuleContext(Selected_tableviewContext.class,0);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_statement(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3475); match(MERGE);
			setState(3476); match(INTO);
			setState(3477); tableview_name();
			setState(3479);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (NATIONAL_CHAR_STRING_LIT - 451)) | (1L << (CHAR_STRING - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3478); table_alias();
				}
			}

			setState(3481); match(USING);
			setState(3482); selected_tableview();
			setState(3483); match(ON);
			setState(3484); match(LEFT_PAREN);
			setState(3485); condition();
			setState(3486); match(RIGHT_PAREN);
			setState(3495);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				setState(3487); merge_update_clause();
				setState(3489);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3488); merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(3491); merge_insert_clause();
				setState(3493);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3492); merge_update_clause();
					}
				}

				}
				break;
			}
			setState(3498);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3497); error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public List<Merge_elementContext> merge_element() {
			return getRuleContexts(Merge_elementContext.class);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_elementContext merge_element(int i) {
			return getRuleContext(Merge_elementContext.class,i);
		}
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public Merge_update_delete_partContext merge_update_delete_part() {
			return getRuleContext(Merge_update_delete_partContext.class,0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_update_clause(this);
		}
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_merge_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3500); match(WHEN);
			setState(3501); match(MATCHED);
			setState(3502); match(THEN);
			setState(3503); match(UPDATE);
			setState(3504); match(SET);
			setState(3505); merge_element();
			setState(3510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3506); match(COMMA);
				setState(3507); merge_element();
				}
				}
				setState(3512);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3514);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3513); where_clause();
				}
			}

			setState(3517);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				setState(3516); merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_elementContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_element(this);
		}
	}

	public final Merge_elementContext merge_element() throws RecognitionException {
		Merge_elementContext _localctx = new Merge_elementContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_merge_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3519); column_name();
			setState(3520); match(EQUALS_OP);
			setState(3521); expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_delete_partContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_delete_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_update_delete_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_update_delete_part(this);
		}
	}

	public final Merge_update_delete_partContext merge_update_delete_part() throws RecognitionException {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_merge_update_delete_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3523); match(DELETE);
			setState(3524); where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_insert_clause(this);
		}
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3526); match(WHEN);
			setState(3527); match(NOT);
			setState(3528); match(MATCHED);
			setState(3529); match(THEN);
			setState(3530); match(INSERT);
			setState(3542);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3531); match(LEFT_PAREN);
				setState(3532); column_name();
				setState(3537);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3533); match(COMMA);
					setState(3534); column_name();
					}
					}
					setState(3539);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3540); match(RIGHT_PAREN);
				}
			}

			setState(3544); match(VALUES);
			setState(3545); expression_list();
			setState(3547);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3546); where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_tableviewContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_tableview; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelected_tableview(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelected_tableview(this);
		}
	}

	public final Selected_tableviewContext selected_tableview() throws RecognitionException {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_selected_tableview);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3554);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3549); tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3550); match(LEFT_PAREN);
				setState(3551); select_statement();
				setState(3552); match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3557);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (NATIONAL_CHAR_STRING_LIT - 451)) | (1L << (CHAR_STRING - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3556); table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_statementContext extends ParserRuleContext {
		public Wait_nowait_partContext wait_nowait_part() {
			return getRuleContext(Wait_nowait_partContext.class,0);
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return getRuleContext(Lock_table_elementContext.class,i);
		}
		public TerminalNode LOCK() { return getToken(plsqlParser.LOCK, 0); }
		public List<Lock_table_elementContext> lock_table_element() {
			return getRuleContexts(Lock_table_elementContext.class);
		}
		public TerminalNode MODE() { return getToken(plsqlParser.MODE, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_table_statement(this);
		}
	}

	public final Lock_table_statementContext lock_table_statement() throws RecognitionException {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_lock_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3559); match(LOCK);
			setState(3560); match(TABLE);
			setState(3561); lock_table_element();
			setState(3566);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3562); match(COMMA);
				setState(3563); lock_table_element();
				}
				}
				setState(3568);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3569); match(IN);
			setState(3570); lock_mode();
			setState(3571); match(MODE);
			setState(3573);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(3572); wait_nowait_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Wait_nowait_partContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wait_nowait_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWait_nowait_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWait_nowait_part(this);
		}
	}

	public final Wait_nowait_partContext wait_nowait_part() throws RecognitionException {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_wait_nowait_part);
		try {
			setState(3578);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3575); match(WAIT);
				setState(3576); expression();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3577); match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_elementContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_table_element(this);
		}
	}

	public final Lock_table_elementContext lock_table_element() throws RecognitionException {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_lock_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3580); tableview_name();
			setState(3582);
			_la = _input.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				setState(3581); partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(plsqlParser.EXCLUSIVE, 0); }
		public TerminalNode SHARE() { return getToken(plsqlParser.SHARE, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_mode(this);
		}
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_lock_mode);
		int _la;
		try {
			setState(3596);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3584); match(ROW);
				setState(3585); match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3586); match(ROW);
				setState(3587); match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3588); match(SHARE);
				setState(3590);
				_la = _input.LA(1);
				if (_la==UPDATE) {
					{
					setState(3589); match(UPDATE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3592); match(SHARE);
				setState(3593); match(ROW);
				setState(3594); match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3595); match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_table_refContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGeneral_table_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGeneral_table_ref(this);
		}
	}

	public final General_table_refContext general_table_ref() throws RecognitionException {
		General_table_refContext _localctx = new General_table_refContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_general_table_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3604);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				{
				setState(3598); dml_table_expression_clause();
				}
				break;
			case 2:
				{
				setState(3599); match(ONLY);
				setState(3600); match(LEFT_PAREN);
				setState(3601); dml_table_expression_clause();
				setState(3602); match(RIGHT_PAREN);
				}
				break;
			}
			setState(3607);
			switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
			case 1:
				{
				setState(3606); table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_returning_clauseContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStatic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStatic_returning_clause(this);
		}
	}

	public final Static_returning_clauseContext static_returning_clause() throws RecognitionException {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_static_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3609);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(3610); expression();
			setState(3615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3611); match(COMMA);
				setState(3612); expression();
				}
				}
				setState(3617);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3618); into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOG() { return getToken(plsqlParser.LOG, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return getRuleContext(Error_logging_into_partContext.class,0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return getRuleContext(Error_logging_reject_partContext.class,0);
		}
		public TerminalNode ERRORS() { return getToken(plsqlParser.ERRORS, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_clause(this);
		}
	}

	public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_error_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3620); match(LOG);
			setState(3621); match(ERRORS);
			setState(3623);
			switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
			case 1:
				{
				setState(3622); error_logging_into_part();
				}
				break;
			}
			setState(3626);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				{
				setState(3625); expression_wrapper();
				}
				break;
			}
			setState(3629);
			_la = _input.LA(1);
			if (_la==REJECT) {
				{
				setState(3628); error_logging_reject_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_into_partContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_into_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_into_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_into_part(this);
		}
	}

	public final Error_logging_into_partContext error_logging_into_part() throws RecognitionException {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_error_logging_into_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3631); match(INTO);
			setState(3632); tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_reject_partContext extends ParserRuleContext {
		public TerminalNode REJECT() { return getToken(plsqlParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public TerminalNode UNLIMITED() { return getToken(plsqlParser.UNLIMITED, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_reject_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_reject_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_reject_part(this);
		}
	}

	public final Error_logging_reject_partContext error_logging_reject_part() throws RecognitionException {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_error_logging_reject_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3634); match(REJECT);
			setState(3635); match(LIMIT);
			setState(3638);
			switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
			case 1:
				{
				setState(3636); match(UNLIMITED);
				}
				break;
			case 2:
				{
				setState(3637); expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_table_expression_clauseContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Table_collection_expressionContext table_collection_expression() {
			return getRuleContext(Table_collection_expressionContext.class,0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_table_expression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_table_expression_clause(this);
		}
	}

	public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_dml_table_expression_clause);
		int _la;
		try {
			setState(3652);
			switch (_input.LA(1)) {
			case TABLE:
			case THE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3640); table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3641); match(LEFT_PAREN);
				setState(3642); select_statement();
				setState(3644);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3643); subquery_restriction_clause();
					}
				}

				setState(3646); match(RIGHT_PAREN);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(3648); tableview_name();
				setState(3650);
				switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
				case 1:
					{
					setState(3649); sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_collection_expressionContext extends ParserRuleContext {
		public TerminalNode THE() { return getToken(plsqlParser.THE, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_collection_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_collection_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_collection_expression(this);
		}
	}

	public final Table_collection_expressionContext table_collection_expression() throws RecognitionException {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_table_collection_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3654);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(3667);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				{
				setState(3655); match(LEFT_PAREN);
				setState(3656); subquery();
				setState(3657); match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(3659); match(LEFT_PAREN);
				setState(3660); expression();
				setState(3661); match(RIGHT_PAREN);
				setState(3665);
				switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
				case 1:
					{
					setState(3662); match(LEFT_PAREN);
					setState(3663); match(PLUS_SIGN);
					setState(3664); match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_restriction_clauseContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(plsqlParser.CHECK, 0); }
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(plsqlParser.OPTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_restriction_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_restriction_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_restriction_clause(this);
		}
	}

	public final Subquery_restriction_clauseContext subquery_restriction_clause() throws RecognitionException {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_subquery_restriction_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3669); match(WITH);
			setState(3678);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(3670); match(READ);
				setState(3671); match(ONLY);
				}
				break;
			case CHECK:
				{
				setState(3672); match(CHECK);
				setState(3673); match(OPTION);
				setState(3676);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(3674); match(CONSTRAINT);
					setState(3675); constraint_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_clauseContext extends ParserRuleContext {
		public Seed_partContext seed_part() {
			return getRuleContext(Seed_partContext.class,0);
		}
		public TerminalNode SAMPLE() { return getToken(plsqlParser.SAMPLE, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode BLOCK() { return getToken(plsqlParser.BLOCK, 0); }
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSample_clause(this);
		}
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3680); match(SAMPLE);
			setState(3682);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(3681); match(BLOCK);
				}
			}

			setState(3684); match(LEFT_PAREN);
			setState(3685); expression();
			setState(3688);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3686); match(COMMA);
				setState(3687); expression();
				}
			}

			setState(3690); match(RIGHT_PAREN);
			setState(3692);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				setState(3691); seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seed_partContext extends ParserRuleContext {
		public TerminalNode SEED() { return getToken(plsqlParser.SEED, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Seed_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seed_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSeed_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSeed_part(this);
		}
	}

	public final Seed_partContext seed_part() throws RecognitionException {
		Seed_partContext _localctx = new Seed_partContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_seed_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3694); match(SEED);
			setState(3695); match(LEFT_PAREN);
			setState(3696); expression();
			setState(3697); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_expressionContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_expression(this);
		}
	}

	public final Cursor_expressionContext cursor_expression() throws RecognitionException {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_cursor_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3699); match(CURSOR);
			setState(3700); match(LEFT_PAREN);
			setState(3701); subquery();
			setState(3702); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression_list(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3704); match(LEFT_PAREN);
			setState(3706);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENTITYESCAPING - 64)) | (1L << (ERR - 64)) | (1L << (ERRORS - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVALNAME - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)) | (1L << (ISOLATION - 128)) | (1L << (ITERATE - 128)) | (1L << (JAVA - 128)) | (1L << (JOIN - 128)) | (1L << (KEEP - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NONE - 192)) | (1L << (NOSCHEMACHECK - 192)) | (1L << (NOT - 192)) | (1L << (NULL - 192)) | (1L << (NULLS - 192)) | (1L << (NUMBER - 192)) | (1L << (NUMERIC - 192)) | (1L << (NVARCHAR2 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)) | (1L << (RENAME - 256)) | (1L << (REPLACE - 256)) | (1L << (RESPECT - 256)) | (1L << (RESTRICT_REFERENCES - 256)) | (1L << (RESULT - 256)) | (1L << (RESULT_CACHE - 256)) | (1L << (RETURN - 256)) | (1L << (RETURNING - 256)) | (1L << (REUSE - 256)) | (1L << (REVERSE - 256)) | (1L << (RIGHT - 256)) | (1L << (ROLLBACK - 256)) | (1L << (ROLLUP - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)) | (1L << (SUBMULTISET - 320)) | (1L << (SUBPARTITION - 320)) | (1L << (SUBSTITUTABLE - 320)) | (1L << (SUBTYPE - 320)) | (1L << (SUCCESS - 320)) | (1L << (SUSPEND - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 320)) | (1L << (TIMESTAMP_UNCONSTRAINED - 320)) | (1L << (TIMEZONE_ABBR - 320)) | (1L << (TIMEZONE_HOUR - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHILE - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)) | (1L << (XML - 384)) | (1L << (XMLAGG - 384)) | (1L << (XMLATTRIBUTES - 384)) | (1L << (XMLCAST - 384)) | (1L << (XMLCOLATTVAL - 384)) | (1L << (XMLELEMENT - 384)) | (1L << (XMLEXISTS - 384)) | (1L << (XMLFOREST - 384)) | (1L << (XMLNAMESPACES - 384)) | (1L << (XMLPARSE - 384)) | (1L << (XMLPI - 384)) | (1L << (XMLQUERY - 384)) | (1L << (XMLROOT - 384)) | (1L << (XMLSERIALIZE - 384)) | (1L << (XMLTABLE - 384)) | (1L << (YEAR - 384)) | (1L << (YES - 384)) | (1L << (YMINTERVAL_UNCONSTRAINED - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (UNSIGNED_INTEGER - 448)) | (1L << (APPROXIMATE_NUM_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)) | (1L << (LEFT_PAREN - 448)) | (1L << (PLUS_SIGN - 448)) | (1L << (MINUS_SIGN - 448)) | (1L << (BINDVAR - 448)) | (1L << (COLON - 448)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3705); expression();
				}
			}

			setState(3712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3708); match(COMMA);
				setState(3709); expression();
				}
				}
				setState(3714);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3715); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCondition(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3717); expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_wrapperContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Condition_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCondition_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCondition_wrapper(this);
		}
	}

	public final Condition_wrapperContext condition_wrapper() throws RecognitionException {
		Condition_wrapperContext _localctx = new Condition_wrapperContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_condition_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3719); expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Cursor_expressionContext cursor_expression() {
			return getRuleContext(Cursor_expressionContext.class,0);
		}
		public Logical_and_expressionContext logical_and_expression(int i) {
			return getRuleContext(Logical_and_expressionContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public List<Logical_and_expressionContext> logical_and_expression() {
			return getRuleContexts(Logical_and_expressionContext.class);
		}
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_expression);
		try {
			int _alt;
			setState(3730);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3721); cursor_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3722); logical_and_expression();
				setState(3727);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,448,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3723); match(OR);
						setState(3724); logical_and_expression();
						}
						} 
					}
					setState(3729);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,448,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_wrapperContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression_wrapper(this);
		}
	}

	public final Expression_wrapperContext expression_wrapper() throws RecognitionException {
		Expression_wrapperContext _localctx = new Expression_wrapperContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_expression_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3732); expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logical_and_expressionContext extends ParserRuleContext {
		public TerminalNode AND(int i) {
			return getToken(plsqlParser.AND, i);
		}
		public List<TerminalNode> AND() { return getTokens(plsqlParser.AND); }
		public List<Negated_expressionContext> negated_expression() {
			return getRuleContexts(Negated_expressionContext.class);
		}
		public Negated_expressionContext negated_expression(int i) {
			return getRuleContext(Negated_expressionContext.class,i);
		}
		public Logical_and_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_and_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLogical_and_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLogical_and_expression(this);
		}
	}

	public final Logical_and_expressionContext logical_and_expression() throws RecognitionException {
		Logical_and_expressionContext _localctx = new Logical_and_expressionContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_logical_and_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3734); negated_expression();
			setState(3739);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,450,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3735); match(AND);
					setState(3736); negated_expression();
					}
					} 
				}
				setState(3741);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,450,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Negated_expressionContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Equality_expressionContext equality_expression() {
			return getRuleContext(Equality_expressionContext.class,0);
		}
		public Negated_expressionContext negated_expression() {
			return getRuleContext(Negated_expressionContext.class,0);
		}
		public Negated_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_negated_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNegated_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNegated_expression(this);
		}
	}

	public final Negated_expressionContext negated_expression() throws RecognitionException {
		Negated_expressionContext _localctx = new Negated_expressionContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_negated_expression);
		try {
			setState(3745);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3742); match(NOT);
				setState(3743); negated_expression();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3744); equality_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Equality_expressionContext extends ParserRuleContext {
		public List<TerminalNode> TYPE() { return getTokens(plsqlParser.TYPE); }
		public List<TerminalNode> A_LETTER() { return getTokens(plsqlParser.A_LETTER); }
		public TerminalNode A_LETTER(int i) {
			return getToken(plsqlParser.A_LETTER, i);
		}
		public List<TerminalNode> NOT() { return getTokens(plsqlParser.NOT); }
		public List<TerminalNode> NULL() { return getTokens(plsqlParser.NULL); }
		public List<TerminalNode> OF() { return getTokens(plsqlParser.OF); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public List<TerminalNode> ONLY() { return getTokens(plsqlParser.ONLY); }
		public TerminalNode INFINITE(int i) {
			return getToken(plsqlParser.INFINITE, i);
		}
		public TerminalNode ONLY(int i) {
			return getToken(plsqlParser.ONLY, i);
		}
		public TerminalNode IS(int i) {
			return getToken(plsqlParser.IS, i);
		}
		public List<TerminalNode> INFINITE() { return getTokens(plsqlParser.INFINITE); }
		public List<TerminalNode> NAN() { return getTokens(plsqlParser.NAN); }
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode OF(int i) {
			return getToken(plsqlParser.OF, i);
		}
		public TerminalNode TYPE(int i) {
			return getToken(plsqlParser.TYPE, i);
		}
		public List<TerminalNode> PRESENT() { return getTokens(plsqlParser.PRESENT); }
		public Multiset_expressionContext multiset_expression() {
			return getRuleContext(Multiset_expressionContext.class,0);
		}
		public TerminalNode NULL(int i) {
			return getToken(plsqlParser.NULL, i);
		}
		public TerminalNode PRESENT(int i) {
			return getToken(plsqlParser.PRESENT, i);
		}
		public TerminalNode SET(int i) {
			return getToken(plsqlParser.SET, i);
		}
		public List<TerminalNode> IS() { return getTokens(plsqlParser.IS); }
		public TerminalNode EMPTY(int i) {
			return getToken(plsqlParser.EMPTY, i);
		}
		public TerminalNode NAN(int i) {
			return getToken(plsqlParser.NAN, i);
		}
		public List<TerminalNode> EMPTY() { return getTokens(plsqlParser.EMPTY); }
		public TerminalNode NOT(int i) {
			return getToken(plsqlParser.NOT, i);
		}
		public List<TerminalNode> SET() { return getTokens(plsqlParser.SET); }
		public Equality_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equality_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterEquality_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitEquality_expression(this);
		}
	}

	public final Equality_expressionContext equality_expression() throws RecognitionException {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_equality_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3747); multiset_expression();
			setState(3781);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,457,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3748); match(IS);
					setState(3750);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(3749); match(NOT);
						}
					}

					setState(3777);
					switch (_input.LA(1)) {
					case NULL:
						{
						setState(3752); match(NULL);
						}
						break;
					case NAN:
						{
						setState(3753); match(NAN);
						}
						break;
					case PRESENT:
						{
						setState(3754); match(PRESENT);
						}
						break;
					case INFINITE:
						{
						setState(3755); match(INFINITE);
						}
						break;
					case A_LETTER:
						{
						setState(3756); match(A_LETTER);
						setState(3757); match(SET);
						}
						break;
					case EMPTY:
						{
						setState(3758); match(EMPTY);
						}
						break;
					case OF:
						{
						setState(3759); match(OF);
						setState(3761);
						_la = _input.LA(1);
						if (_la==TYPE) {
							{
							setState(3760); match(TYPE);
							}
						}

						setState(3763); match(LEFT_PAREN);
						setState(3765);
						switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
						case 1:
							{
							setState(3764); match(ONLY);
							}
							break;
						}
						setState(3767); type_spec();
						setState(3772);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(3768); match(COMMA);
							setState(3769); type_spec();
							}
							}
							setState(3774);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(3775); match(RIGHT_PAREN);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(3783);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,457,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_expressionContext extends ParserRuleContext {
		public Relational_expressionContext relational_expression() {
			return getRuleContext(Relational_expressionContext.class,0);
		}
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Multiset_typeContext multiset_type() {
			return getRuleContext(Multiset_typeContext.class,0);
		}
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMultiset_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMultiset_expression(this);
		}
	}

	public final Multiset_expressionContext multiset_expression() throws RecognitionException {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_multiset_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3784); relational_expression();
			setState(3791);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				{
				setState(3785); multiset_type();
				setState(3787);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(3786); match(OF);
					}
				}

				setState(3789); concatenation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_typeContext extends ParserRuleContext {
		public TerminalNode SUBMULTISET() { return getToken(plsqlParser.SUBMULTISET, 0); }
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public Multiset_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMultiset_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMultiset_type(this);
		}
	}

	public final Multiset_typeContext multiset_type() throws RecognitionException {
		Multiset_typeContext _localctx = new Multiset_typeContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_multiset_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3793);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_expressionContext extends ParserRuleContext {
		public List<Not_equal_opContext> not_equal_op() {
			return getRuleContexts(Not_equal_opContext.class);
		}
		public Not_equal_opContext not_equal_op(int i) {
			return getRuleContext(Not_equal_opContext.class,i);
		}
		public List<Greater_than_or_equals_opContext> greater_than_or_equals_op() {
			return getRuleContexts(Greater_than_or_equals_opContext.class);
		}
		public Greater_than_or_equals_opContext greater_than_or_equals_op(int i) {
			return getRuleContext(Greater_than_or_equals_opContext.class,i);
		}
		public Compound_expressionContext compound_expression(int i) {
			return getRuleContext(Compound_expressionContext.class,i);
		}
		public List<Compound_expressionContext> compound_expression() {
			return getRuleContexts(Compound_expressionContext.class);
		}
		public List<Less_than_or_equals_opContext> less_than_or_equals_op() {
			return getRuleContexts(Less_than_or_equals_opContext.class);
		}
		public Less_than_or_equals_opContext less_than_or_equals_op(int i) {
			return getRuleContext(Less_than_or_equals_opContext.class,i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRelational_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRelational_expression(this);
		}
	}

	public final Relational_expressionContext relational_expression() throws RecognitionException {
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_relational_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3795); compound_expression();
			setState(3807);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,461,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3802);
					switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
					case 1:
						{
						setState(3796); match(EQUALS_OP);
						}
						break;
					case 2:
						{
						setState(3797); not_equal_op();
						}
						break;
					case 3:
						{
						setState(3798); match(LESS_THAN_OP);
						}
						break;
					case 4:
						{
						setState(3799); match(GREATER_THAN_OP);
						}
						break;
					case 5:
						{
						setState(3800); less_than_or_equals_op();
						}
						break;
					case 6:
						{
						setState(3801); greater_than_or_equals_op();
						}
						break;
					}
					setState(3804); compound_expression();
					}
					} 
				}
				setState(3809);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,461,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_expressionContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public Like_escape_partContext like_escape_part() {
			return getRuleContext(Like_escape_partContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public In_elementsContext in_elements() {
			return getRuleContext(In_elementsContext.class,0);
		}
		public Between_elementsContext between_elements() {
			return getRuleContext(Between_elementsContext.class,0);
		}
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public Like_typeContext like_type() {
			return getRuleContext(Like_typeContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Compound_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompound_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompound_expression(this);
		}
	}

	public final Compound_expressionContext compound_expression() throws RecognitionException {
		Compound_expressionContext _localctx = new Compound_expressionContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_compound_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3810); concatenation();
			setState(3825);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				{
				setState(3812);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3811); match(NOT);
					}
				}

				setState(3823);
				switch (_input.LA(1)) {
				case IN:
					{
					setState(3814); match(IN);
					setState(3815); in_elements();
					}
					break;
				case BETWEEN:
					{
					setState(3816); match(BETWEEN);
					setState(3817); between_elements();
					}
					break;
				case LIKE:
				case LIKE2:
				case LIKE4:
				case LIKEC:
					{
					setState(3818); like_type();
					setState(3819); concatenation();
					setState(3821);
					switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
					case 1:
						{
						setState(3820); like_escape_part();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_typeContext extends ParserRuleContext {
		public TerminalNode LIKE4() { return getToken(plsqlParser.LIKE4, 0); }
		public TerminalNode LIKEC() { return getToken(plsqlParser.LIKEC, 0); }
		public TerminalNode LIKE2() { return getToken(plsqlParser.LIKE2, 0); }
		public TerminalNode LIKE() { return getToken(plsqlParser.LIKE, 0); }
		public Like_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLike_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLike_type(this);
		}
	}

	public final Like_typeContext like_type() throws RecognitionException {
		Like_typeContext _localctx = new Like_typeContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_like_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3827);
			_la = _input.LA(1);
			if ( !(((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LIKE - 199)) | (1L << (LIKE2 - 199)) | (1L << (LIKE4 - 199)) | (1L << (LIKEC - 199)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_escape_partContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(plsqlParser.ESCAPE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Like_escape_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_escape_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLike_escape_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLike_escape_part(this);
		}
	}

	public final Like_escape_partContext like_escape_part() throws RecognitionException {
		Like_escape_partContext _localctx = new Like_escape_partContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_like_escape_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3829); match(ESCAPE);
			setState(3830); concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_elementsContext extends ParserRuleContext {
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public In_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIn_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIn_elements(this);
		}
	}

	public final In_elementsContext in_elements() throws RecognitionException {
		In_elementsContext _localctx = new In_elementsContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_in_elements);
		int _la;
		try {
			setState(3850);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3832); match(LEFT_PAREN);
				setState(3833); subquery();
				setState(3834); match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3836); match(LEFT_PAREN);
				setState(3837); concatenation_wrapper();
				setState(3842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3838); match(COMMA);
					setState(3839); concatenation_wrapper();
					}
					}
					setState(3844);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3845); match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3847); constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3848); bind_variable();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3849); general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_elementsContext extends ParserRuleContext {
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBetween_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBetween_elements(this);
		}
	}

	public final Between_elementsContext between_elements() throws RecognitionException {
		Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_between_elements);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3852); concatenation();
			setState(3853); match(AND);
			setState(3854); concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcatenationContext extends ParserRuleContext {
		public Additive_expressionContext additive_expression(int i) {
			return getRuleContext(Additive_expressionContext.class,i);
		}
		public List<Concatenation_opContext> concatenation_op() {
			return getRuleContexts(Concatenation_opContext.class);
		}
		public List<Additive_expressionContext> additive_expression() {
			return getRuleContexts(Additive_expressionContext.class);
		}
		public Concatenation_opContext concatenation_op(int i) {
			return getRuleContext(Concatenation_opContext.class,i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConcatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConcatenation(this);
		}
	}

	public final ConcatenationContext concatenation() throws RecognitionException {
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_concatenation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3856); additive_expression();
			setState(3862);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,468,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3857); concatenation_op();
					setState(3858); additive_expression();
					}
					} 
				}
				setState(3864);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,468,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Concatenation_wrapperContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Concatenation_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConcatenation_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConcatenation_wrapper(this);
		}
	}

	public final Concatenation_wrapperContext concatenation_wrapper() throws RecognitionException {
		Concatenation_wrapperContext _localctx = new Concatenation_wrapperContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_concatenation_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3865); concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Additive_expressionContext extends ParserRuleContext {
		public Multiply_expressionContext multiply_expression(int i) {
			return getRuleContext(Multiply_expressionContext.class,i);
		}
		public List<Multiply_expressionContext> multiply_expression() {
			return getRuleContexts(Multiply_expressionContext.class);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_additive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAdditive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAdditive_expression(this);
		}
	}

	public final Additive_expressionContext additive_expression() throws RecognitionException {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_additive_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3867); multiply_expression();
			setState(3872);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,469,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3868);
					_la = _input.LA(1);
					if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(3869); multiply_expression();
					}
					} 
				}
				setState(3874);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,469,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiply_expressionContext extends ParserRuleContext {
		public Datetime_expressionContext datetime_expression(int i) {
			return getRuleContext(Datetime_expressionContext.class,i);
		}
		public List<Datetime_expressionContext> datetime_expression() {
			return getRuleContexts(Datetime_expressionContext.class);
		}
		public Multiply_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiply_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMultiply_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMultiply_expression(this);
		}
	}

	public final Multiply_expressionContext multiply_expression() throws RecognitionException {
		Multiply_expressionContext _localctx = new Multiply_expressionContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_multiply_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3875); datetime_expression();
			setState(3880);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3876);
					_la = _input.LA(1);
					if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(3877); datetime_expression();
					}
					} 
				}
				setState(3882);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_expressionContext extends ParserRuleContext {
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Datetime_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDatetime_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDatetime_expression(this);
		}
	}

	public final Datetime_expressionContext datetime_expression() throws RecognitionException {
		Datetime_expressionContext _localctx = new Datetime_expressionContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_datetime_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3883); model_expression();
			setState(3892);
			switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
			case 1:
				{
				setState(3884); match(AT);
				setState(3889);
				switch (_input.LA(1)) {
				case LOCAL:
					{
					setState(3885); match(LOCAL);
					}
					break;
				case TIME:
					{
					setState(3886); match(TIME);
					setState(3887); match(ZONE);
					setState(3888); concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(3891); interval_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_expressionContext extends ParserRuleContext {
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInterval_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInterval_expression(this);
		}
	}

	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_interval_expression);
		int _la;
		try {
			setState(3918);
			switch (_input.LA(1)) {
			case DAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3894); match(DAY);
				setState(3899);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(3895); match(LEFT_PAREN);
					setState(3896); concatenation_wrapper();
					setState(3897); match(RIGHT_PAREN);
					}
				}

				setState(3901); match(TO);
				setState(3902); match(SECOND);
				setState(3907);
				switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
				case 1:
					{
					setState(3903); match(LEFT_PAREN);
					setState(3904); concatenation_wrapper();
					setState(3905); match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(3909); match(YEAR);
				setState(3914);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(3910); match(LEFT_PAREN);
					setState(3911); concatenation_wrapper();
					setState(3912); match(RIGHT_PAREN);
					}
				}

				setState(3916); match(TO);
				setState(3917); match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		public Model_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_expression(this);
		}
	}

	public final Model_expressionContext model_expression() throws RecognitionException {
		Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_model_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3920); unary_expression();
			setState(3925);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				{
				setState(3921); match(LEFT_BRACKET);
				setState(3922); model_expression_element();
				setState(3923); match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expression_elementContext extends ParserRuleContext {
		public List<Single_column_for_loopContext> single_column_for_loop() {
			return getRuleContexts(Single_column_for_loopContext.class);
		}
		public List<Condition_wrapperContext> condition_wrapper() {
			return getRuleContexts(Condition_wrapperContext.class);
		}
		public TerminalNode ANY(int i) {
			return getToken(plsqlParser.ANY, i);
		}
		public Condition_wrapperContext condition_wrapper(int i) {
			return getRuleContext(Condition_wrapperContext.class,i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public List<TerminalNode> ANY() { return getTokens(plsqlParser.ANY); }
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return getRuleContext(Single_column_for_loopContext.class,i);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_expression_element(this);
		}
	}

	public final Model_expression_elementContext model_expression_element() throws RecognitionException {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_model_expression_element);
		int _la;
		try {
			setState(3950);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3929);
				switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
				case 1:
					{
					setState(3927); match(ANY);
					}
					break;
				case 2:
					{
					setState(3928); condition_wrapper();
					}
					break;
				}
				setState(3938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3931); match(COMMA);
					setState(3934);
					switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
					case 1:
						{
						setState(3932); match(ANY);
						}
						break;
					case 2:
						{
						setState(3933); condition_wrapper();
						}
						break;
					}
					}
					}
					setState(3940);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3941); single_column_for_loop();
				setState(3946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3942); match(COMMA);
					setState(3943); single_column_for_loop();
					}
					}
					setState(3948);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3949); multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_column_for_loopContext extends ParserRuleContext {
		public ExpressionContext ex1;
		public ExpressionContext ex2;
		public ExpressionContext ex3;
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public For_like_partContext for_like_part() {
			return getRuleContext(For_like_partContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public For_increment_decrement_typeContext for_increment_decrement_type() {
			return getRuleContext(For_increment_decrement_typeContext.class,0);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSingle_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSingle_column_for_loop(this);
		}
	}

	public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_single_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3952); match(FOR);
			setState(3953); column_name();
			setState(3966);
			switch (_input.LA(1)) {
			case IN:
				{
				setState(3954); match(IN);
				setState(3955); expression_list();
				}
				break;
			case FROM:
			case LIKE:
				{
				setState(3957);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(3956); for_like_part();
					}
				}

				setState(3959); match(FROM);
				setState(3960); ((Single_column_for_loopContext)_localctx).ex1 = expression();
				setState(3961); match(TO);
				setState(3962); ((Single_column_for_loopContext)_localctx).ex2 = expression();
				setState(3963); for_increment_decrement_type();
				setState(3964); ((Single_column_for_loopContext)_localctx).ex3 = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_like_partContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(plsqlParser.LIKE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_like_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_like_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_like_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_like_part(this);
		}
	}

	public final For_like_partContext for_like_part() throws RecognitionException {
		For_like_partContext _localctx = new For_like_partContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_for_like_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3968); match(LIKE);
			setState(3969); expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_increment_decrement_typeContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode DECREMENT() { return getToken(plsqlParser.DECREMENT, 0); }
		public For_increment_decrement_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_increment_decrement_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_increment_decrement_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_increment_decrement_type(this);
		}
	}

	public final For_increment_decrement_typeContext for_increment_decrement_type() throws RecognitionException {
		For_increment_decrement_typeContext _localctx = new For_increment_decrement_typeContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_for_increment_decrement_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3971);
			_la = _input.LA(1);
			if ( !(_la==DECREMENT || _la==INCREMENT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_column_for_loopContext extends ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_column_for_loop(this);
		}
	}

	public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_multi_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3973); match(FOR);
			setState(3974); match(LEFT_PAREN);
			setState(3975); column_name();
			setState(3980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3976); match(COMMA);
				setState(3977); column_name();
				}
				}
				setState(3982);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3983); match(RIGHT_PAREN);
			setState(3984); match(IN);
			setState(3985); match(LEFT_PAREN);
			setState(3998);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				{
				setState(3986); subquery();
				}
				break;
			case 2:
				{
				setState(3987); match(LEFT_PAREN);
				setState(3988); expression_list();
				setState(3993);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3989); match(COMMA);
					setState(3990); expression_list();
					}
					}
					setState(3995);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3996); match(RIGHT_PAREN);
				}
				break;
			}
			setState(4000); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_expressionContext extends ParserRuleContext {
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode CONNECT_BY_ROOT() { return getToken(plsqlParser.CONNECT_BY_ROOT, 0); }
		public Quantified_expressionContext quantified_expression() {
			return getRuleContext(Quantified_expressionContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public TerminalNode PRIOR() { return getToken(plsqlParser.PRIOR, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnary_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnary_expression(this);
		}
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_unary_expression);
		try {
			setState(4020);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4002); match(MINUS_SIGN);
				setState(4003); unary_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4004); match(PLUS_SIGN);
				setState(4005); unary_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4006); match(PRIOR);
				setState(4007); unary_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4008); match(CONNECT_BY_ROOT);
				setState(4009); unary_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4010); match(NEW);
				setState(4011); unary_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4012); match(DISTINCT);
				setState(4013); unary_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4014); match(ALL);
				setState(4015); unary_expression();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4016); case_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4017); quantified_expression();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4018); standard_function();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4019); atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_statementContext extends ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return getRuleContext(Searched_case_statementContext.class,0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return getRuleContext(Simple_case_statementContext.class,0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCase_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCase_statement(this);
		}
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_case_statement);
		try {
			setState(4024);
			switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4022); searched_case_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4023); simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public List<TerminalNode> CASE() { return getTokens(plsqlParser.CASE); }
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return getRuleContext(Simple_case_when_partContext.class,i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Simple_case_when_partContext> simple_case_when_part() {
			return getRuleContexts(Simple_case_when_partContext.class);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public TerminalNode CASE(int i) {
			return getToken(plsqlParser.CASE, i);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_case_statement(this);
		}
	}

	public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_simple_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4027);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4026); label_name();
				}
			}

			setState(4029); ((Simple_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4030); atom();
			setState(4032); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4031); simple_case_when_part();
				}
				}
				setState(4034); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4037);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4036); case_else_part();
				}
			}

			setState(4039); match(END);
			setState(4041);
			_la = _input.LA(1);
			if (_la==CASE) {
				{
				setState(4040); match(CASE);
				}
			}

			setState(4044);
			switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
			case 1:
				{
				setState(4043); label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_when_partContext extends ParserRuleContext {
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_case_when_part(this);
		}
	}

	public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_simple_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4046); match(WHEN);
			setState(4047); expression_wrapper();
			setState(4048); match(THEN);
			setState(4051);
			switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
			case 1:
				{
				setState(4049); seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4050); expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public List<TerminalNode> CASE() { return getTokens(plsqlParser.CASE); }
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<Searched_case_when_partContext> searched_case_when_part() {
			return getRuleContexts(Searched_case_when_partContext.class);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public TerminalNode CASE(int i) {
			return getToken(plsqlParser.CASE, i);
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return getRuleContext(Searched_case_when_partContext.class,i);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearched_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearched_case_statement(this);
		}
	}

	public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_searched_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4054);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4053); label_name();
				}
			}

			setState(4056); ((Searched_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4058); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4057); searched_case_when_part();
				}
				}
				setState(4060); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4063);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4062); case_else_part();
				}
			}

			setState(4065); match(END);
			setState(4067);
			_la = _input.LA(1);
			if (_la==CASE) {
				{
				setState(4066); match(CASE);
				}
			}

			setState(4070);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				{
				setState(4069); label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_when_partContext extends ParserRuleContext {
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearched_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearched_case_when_part(this);
		}
	}

	public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_searched_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4072); match(WHEN);
			setState(4073); condition_wrapper();
			setState(4074); match(THEN);
			setState(4077);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				{
				setState(4075); seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4076); expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_else_partContext extends ParserRuleContext {
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCase_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCase_else_part(this);
		}
	}

	public final Case_else_partContext case_else_part() throws RecognitionException {
		Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_case_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4079); match(ELSE);
			setState(4082);
			switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
			case 1:
				{
				setState(4080); seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4081); expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AtomContext extends ParserRuleContext {
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Expression_or_vectorContext expression_or_vector() {
			return getRuleContext(Expression_or_vectorContext.class,0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAtom(this);
		}
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_atom);
		try {
			int _alt;
			setState(4104);
			switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4084); table_element();
				setState(4085); outer_join_sign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4087); bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4088); constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4089); general_element();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4090); match(LEFT_PAREN);
				setState(4102);
				switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
				case 1:
					{
					setState(4091); subquery();
					setState(4092); match(RIGHT_PAREN);
					setState(4096);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,503,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(4093); subquery_operation_part();
							}
							} 
						}
						setState(4098);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,503,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(4099); expression_or_vector();
					setState(4100); match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_or_vectorContext extends ParserRuleContext {
		public Vector_exprContext vector_expr() {
			return getRuleContext(Vector_exprContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_or_vectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_or_vector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression_or_vector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression_or_vector(this);
		}
	}

	public final Expression_or_vectorContext expression_or_vector() throws RecognitionException {
		Expression_or_vectorContext _localctx = new Expression_or_vectorContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_expression_or_vector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4106); expression();
			setState(4108);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4107); vector_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vector_exprContext extends ParserRuleContext {
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public Vector_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vector_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVector_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVector_expr(this);
		}
	}

	public final Vector_exprContext vector_expr() throws RecognitionException {
		Vector_exprContext _localctx = new Vector_exprContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_vector_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4110); match(COMMA);
			setState(4111); expression();
			setState(4116);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4112); match(COMMA);
				setState(4113); expression();
				}
				}
				setState(4118);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_expressionContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(plsqlParser.EXISTS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode ANY() { return getToken(plsqlParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(plsqlParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuantified_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuantified_expression(this);
		}
	}

	public final Quantified_expressionContext quantified_expression() throws RecognitionException {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_quantified_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4119);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(4128);
			switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
			case 1:
				{
				setState(4120); match(LEFT_PAREN);
				setState(4121); subquery();
				setState(4122); match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4124); match(LEFT_PAREN);
				setState(4125); expression_wrapper();
				setState(4126); match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_functionContext extends ParserRuleContext {
		public TerminalNode COUNT() { return getToken(plsqlParser.COUNT, 0); }
		public Xml_table_columnContext xml_table_column(int i) {
			return getRuleContext(Xml_table_columnContext.class,i);
		}
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode XMLCOLATTVAL() { return getToken(plsqlParser.XMLCOLATTVAL, 0); }
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return getRuleContext(Xmlserialize_param_version_partContext.class,0);
		}
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public TerminalNode MULTISET() { return getToken(plsqlParser.MULTISET, 0); }
		public TerminalNode XMLAGG() { return getToken(plsqlParser.XMLAGG, 0); }
		public Within_or_over_partContext within_or_over_part(int i) {
			return getRuleContext(Within_or_over_partContext.class,i);
		}
		public TerminalNode XMLELEMENT() { return getToken(plsqlParser.XMLELEMENT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public TerminalNode EXTRACT() { return getToken(plsqlParser.EXTRACT, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode HIDE() { return getToken(plsqlParser.HIDE, 0); }
		public TerminalNode CAST() { return getToken(plsqlParser.CAST, 0); }
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode TRAILING() { return getToken(plsqlParser.TRAILING, 0); }
		public TerminalNode WELLFORMED() { return getToken(plsqlParser.WELLFORMED, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return getRuleContext(Xmlroot_param_version_partContext.class,0);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode CHAR_CS() { return getToken(plsqlParser.CHAR_CS, 0); }
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public TerminalNode CONTENT() { return getToken(plsqlParser.CONTENT, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode NCHAR_CS() { return getToken(plsqlParser.NCHAR_CS, 0); }
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public TerminalNode DOCUMENT() { return getToken(plsqlParser.DOCUMENT, 0); }
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode XMLCAST() { return getToken(plsqlParser.XMLCAST, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode DECOMPOSE() { return getToken(plsqlParser.DECOMPOSE, 0); }
		public TerminalNode BOTH() { return getToken(plsqlParser.BOTH, 0); }
		public TerminalNode XMLPARSE() { return getToken(plsqlParser.XMLPARSE, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public TerminalNode XMLTABLE() { return getToken(plsqlParser.XMLTABLE, 0); }
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode LEADING() { return getToken(plsqlParser.LEADING, 0); }
		public Over_clause_keywordContext over_clause_keyword() {
			return getRuleContext(Over_clause_keywordContext.class,0);
		}
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return getRuleContext(Xml_attributes_clauseContext.class,0);
		}
		public TerminalNode LAST_VALUE() { return getToken(plsqlParser.LAST_VALUE, 0); }
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return getRuleContext(Xmlroot_param_standalone_partContext.class,0);
		}
		public TerminalNode TREAT() { return getToken(plsqlParser.TREAT, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return getRuleContext(Xmlserialize_param_enconding_partContext.class,0);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return getRuleContext(Xml_namespaces_clauseContext.class,0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return getRuleContext(Standard_prediction_function_keywordContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode TRIM() { return getToken(plsqlParser.TRIM, 0); }
		public TerminalNode XMLFOREST() { return getToken(plsqlParser.XMLFOREST, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(plsqlParser.XMLSERIALIZE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return getRuleContext(Respect_or_ignore_nullsContext.class,0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return getRuleContext(Xmlserialize_param_ident_partContext.class,0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return getRuleContext(Function_argument_modelingContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode COMPATIBILITY() { return getToken(plsqlParser.COMPATIBILITY, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(plsqlParser.FIRST_VALUE, 0); }
		public TerminalNode XMLROOT() { return getToken(plsqlParser.XMLROOT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(plsqlParser.XMLEXISTS, 0); }
		public TerminalNode XMLPI() { return getToken(plsqlParser.XMLPI, 0); }
		public TerminalNode CANONICAL() { return getToken(plsqlParser.CANONICAL, 0); }
		public TerminalNode SHOW() { return getToken(plsqlParser.SHOW, 0); }
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public List<Xml_table_columnContext> xml_table_column() {
			return getRuleContexts(Xml_table_columnContext.class);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		public Collect_order_by_partContext collect_order_by_part() {
			return getRuleContext(Collect_order_by_partContext.class,0);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public List<Within_or_over_partContext> within_or_over_part() {
			return getRuleContexts(Within_or_over_partContext.class);
		}
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return getRuleContext(Within_or_over_clause_keywordContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(plsqlParser.COLUMNS, 0); }
		public TerminalNode TRANSLATE() { return getToken(plsqlParser.TRANSLATE, 0); }
		public TerminalNode XMLQUERY() { return getToken(plsqlParser.XMLQUERY, 0); }
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode DEFAULTS() { return getToken(plsqlParser.DEFAULTS, 0); }
		public TerminalNode EMPTY() { return getToken(plsqlParser.EMPTY, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode CHR() { return getToken(plsqlParser.CHR, 0); }
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return getRuleContext(Cost_matrix_clauseContext.class,0);
		}
		public Standard_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStandard_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStandard_function(this);
		}
	}

	public final Standard_functionContext standard_function() throws RecognitionException {
		Standard_functionContext _localctx = new Standard_functionContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_standard_function);
		int _la;
		try {
			int _alt;
			setState(4444);
			switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4130); over_clause_keyword();
				setState(4131); function_argument_analytic();
				setState(4133);
				switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
				case 1:
					{
					setState(4132); over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4135); regular_id();
				setState(4136); function_argument_modeling();
				setState(4138);
				switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
				case 1:
					{
					setState(4137); using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4140); match(COUNT);
				setState(4141); match(LEFT_PAREN);
				setState(4147);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(4142); match(ASTERISK);
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4144);
					switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
					case 1:
						{
						setState(4143);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
						break;
					}
					setState(4146); concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4149); match(RIGHT_PAREN);
				setState(4151);
				switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
				case 1:
					{
					setState(4150); over_clause();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4153);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(4154); match(LEFT_PAREN);
				setState(4161);
				switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
				case 1:
					{
					setState(4155); match(MULTISET);
					setState(4156); match(LEFT_PAREN);
					setState(4157); subquery();
					setState(4158); match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(4160); concatenation_wrapper();
					}
					break;
				}
				setState(4163); match(AS);
				setState(4164); type_spec();
				setState(4165); match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4167); match(CHR);
				setState(4168); match(LEFT_PAREN);
				setState(4169); concatenation_wrapper();
				setState(4170); match(USING);
				setState(4171); match(NCHAR_CS);
				setState(4172); match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4174); match(COLLECT);
				setState(4175); match(LEFT_PAREN);
				setState(4177);
				switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
				case 1:
					{
					setState(4176);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					break;
				}
				setState(4179); concatenation_wrapper();
				setState(4181);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4180); collect_order_by_part();
					}
				}

				setState(4183); match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4185); within_or_over_clause_keyword();
				setState(4186); function_argument();
				setState(4188); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4187); within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4190); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,517,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4192); match(DECOMPOSE);
				setState(4193); match(LEFT_PAREN);
				setState(4194); concatenation_wrapper();
				setState(4196);
				_la = _input.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					setState(4195);
					_la = _input.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(4198); match(RIGHT_PAREN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4200); match(EXTRACT);
				setState(4201); match(LEFT_PAREN);
				setState(4202); regular_id();
				setState(4203); match(FROM);
				setState(4204); concatenation_wrapper();
				setState(4205); match(RIGHT_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4207);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(4208); function_argument_analytic();
				setState(4210);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(4209); respect_or_ignore_nulls();
					}
				}

				setState(4212); over_clause();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4214); standard_prediction_function_keyword();
				setState(4215); match(LEFT_PAREN);
				setState(4216); expression_wrapper();
				setState(4221);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4217); match(COMMA);
					setState(4218); expression_wrapper();
					}
					}
					setState(4223);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4225);
				_la = _input.LA(1);
				if (_la==COST) {
					{
					setState(4224); cost_matrix_clause();
					}
				}

				setState(4228);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4227); using_clause();
					}
				}

				setState(4230); match(RIGHT_PAREN);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4232); match(TRANSLATE);
				setState(4233); match(LEFT_PAREN);
				setState(4234); expression_wrapper();
				setState(4237);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4235); match(USING);
					setState(4236);
					_la = _input.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(4243);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4239); match(COMMA);
					setState(4240); expression_wrapper();
					}
					}
					setState(4245);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4246); match(RIGHT_PAREN);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4248); match(TREAT);
				setState(4249); match(LEFT_PAREN);
				setState(4250); expression_wrapper();
				setState(4251); match(AS);
				setState(4253);
				switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
				case 1:
					{
					setState(4252); match(REF);
					}
					break;
				}
				setState(4255); type_spec();
				setState(4256); match(RIGHT_PAREN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4258); match(TRIM);
				setState(4259); match(LEFT_PAREN);
				setState(4267);
				switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
				case 1:
					{
					setState(4261);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(4260);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
					}

					setState(4264);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(4263); quoted_string();
						}
					}

					setState(4266); match(FROM);
					}
					break;
				}
				setState(4269); concatenation_wrapper();
				setState(4270); match(RIGHT_PAREN);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4272); match(XMLAGG);
				setState(4273); match(LEFT_PAREN);
				setState(4274); expression_wrapper();
				setState(4276);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4275); order_by_clause();
					}
				}

				setState(4278); match(RIGHT_PAREN);
				setState(4281);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4279); match(PERIOD);
					setState(4280); general_element_part();
					}
				}

				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4283);
				_la = _input.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(4284); match(LEFT_PAREN);
				setState(4285); xml_multiuse_expression_element();
				setState(4290);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4286); match(COMMA);
					setState(4287); xml_multiuse_expression_element();
					}
					}
					setState(4292);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4293); match(RIGHT_PAREN);
				setState(4296);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4294); match(PERIOD);
					setState(4295); general_element_part();
					}
				}

				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4298); match(XMLELEMENT);
				setState(4299); match(LEFT_PAREN);
				setState(4301);
				switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
				case 1:
					{
					setState(4300);
					_la = _input.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					break;
				}
				setState(4304);
				switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
				case 1:
					{
					setState(4303);
					_la = _input.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					break;
				}
				setState(4306); expression_wrapper();
				setState(4309);
				switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
				case 1:
					{
					setState(4307); match(COMMA);
					setState(4308); xml_attributes_clause();
					}
					break;
				}
				setState(4318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4311); match(COMMA);
					setState(4312); expression_wrapper();
					setState(4314);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (NATIONAL_CHAR_STRING_LIT - 451)) | (1L << (CHAR_STRING - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						setState(4313); column_alias();
						}
					}

					}
					}
					setState(4320);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4321); match(RIGHT_PAREN);
				setState(4324);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4322); match(PERIOD);
					setState(4323); general_element_part();
					}
				}

				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4326); match(XMLEXISTS);
				setState(4327); match(LEFT_PAREN);
				setState(4328); expression_wrapper();
				setState(4330);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4329); xml_passing_clause();
					}
				}

				setState(4332); match(RIGHT_PAREN);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4334); match(XMLPARSE);
				setState(4335); match(LEFT_PAREN);
				setState(4336);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(4337); concatenation_wrapper();
				setState(4339);
				_la = _input.LA(1);
				if (_la==WELLFORMED) {
					{
					setState(4338); match(WELLFORMED);
					}
				}

				setState(4341); match(RIGHT_PAREN);
				setState(4344);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4342); match(PERIOD);
					setState(4343); general_element_part();
					}
				}

				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4346); match(XMLPI);
				setState(4347); match(LEFT_PAREN);
				setState(4352);
				switch (_input.LA(1)) {
				case NAME:
					{
					setState(4348); match(NAME);
					setState(4349); id();
					}
					break;
				case EVALNAME:
					{
					setState(4350); match(EVALNAME);
					setState(4351); concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4356);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4354); match(COMMA);
					setState(4355); concatenation_wrapper();
					}
				}

				setState(4358); match(RIGHT_PAREN);
				setState(4361);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4359); match(PERIOD);
					setState(4360); general_element_part();
					}
				}

				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(4363); match(XMLQUERY);
				setState(4364); match(LEFT_PAREN);
				setState(4365); concatenation_wrapper();
				setState(4367);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4366); xml_passing_clause();
					}
				}

				setState(4369); match(RETURNING);
				setState(4370); match(CONTENT);
				setState(4374);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(4371); match(NULL);
					setState(4372); match(ON);
					setState(4373); match(EMPTY);
					}
				}

				setState(4376); match(RIGHT_PAREN);
				setState(4379);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4377); match(PERIOD);
					setState(4378); general_element_part();
					}
				}

				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(4381); match(XMLROOT);
				setState(4382); match(LEFT_PAREN);
				setState(4383); concatenation_wrapper();
				setState(4386);
				switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
				case 1:
					{
					setState(4384); match(COMMA);
					setState(4385); xmlroot_param_version_part();
					}
					break;
				}
				setState(4390);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4388); match(COMMA);
					setState(4389); xmlroot_param_standalone_part();
					}
				}

				setState(4392); match(RIGHT_PAREN);
				setState(4395);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4393); match(PERIOD);
					setState(4394); general_element_part();
					}
				}

				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(4397); match(XMLSERIALIZE);
				setState(4398); match(LEFT_PAREN);
				setState(4399);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(4400); concatenation_wrapper();
				setState(4403);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4401); match(AS);
					setState(4402); type_spec();
					}
				}

				setState(4406);
				_la = _input.LA(1);
				if (_la==ENCODING) {
					{
					setState(4405); xmlserialize_param_enconding_part();
					}
				}

				setState(4409);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(4408); xmlserialize_param_version_part();
					}
				}

				setState(4412);
				_la = _input.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					setState(4411); xmlserialize_param_ident_part();
					}
				}

				setState(4416);
				_la = _input.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					setState(4414);
					_la = _input.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(4415); match(DEFAULTS);
					}
				}

				setState(4418); match(RIGHT_PAREN);
				setState(4421);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4419); match(PERIOD);
					setState(4420); general_element_part();
					}
				}

				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(4423); match(XMLTABLE);
				setState(4424); match(LEFT_PAREN);
				setState(4426);
				switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
				case 1:
					{
					setState(4425); xml_namespaces_clause();
					}
					break;
				}
				setState(4428); concatenation_wrapper();
				setState(4430);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4429); xml_passing_clause();
					}
				}

				setState(4437);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(4432); match(COLUMNS);
					setState(4433); xml_table_column();
					{
					setState(4434); match(COMMA);
					setState(4435); xml_table_column();
					}
					}
				}

				setState(4439); match(RIGHT_PAREN);
				setState(4442);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4440); match(PERIOD);
					setState(4441); general_element_part();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode MIN() { return getToken(plsqlParser.MIN, 0); }
		public TerminalNode VARIANCE() { return getToken(plsqlParser.VARIANCE, 0); }
		public TerminalNode LAG() { return getToken(plsqlParser.LAG, 0); }
		public TerminalNode REGR_() { return getToken(plsqlParser.REGR_, 0); }
		public TerminalNode MEDIAN() { return getToken(plsqlParser.MEDIAN, 0); }
		public TerminalNode NTILE() { return getToken(plsqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(plsqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode AVG() { return getToken(plsqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(plsqlParser.CORR, 0); }
		public TerminalNode SUM() { return getToken(plsqlParser.SUM, 0); }
		public TerminalNode LEAD() { return getToken(plsqlParser.LEAD, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(plsqlParser.ROW_NUMBER, 0); }
		public TerminalNode STDDEV() { return getToken(plsqlParser.STDDEV, 0); }
		public TerminalNode MAX() { return getToken(plsqlParser.MAX, 0); }
		public TerminalNode COVAR_() { return getToken(plsqlParser.COVAR_, 0); }
		public TerminalNode VAR_() { return getToken(plsqlParser.VAR_, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOver_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOver_clause_keyword(this);
		}
	}

	public final Over_clause_keywordContext over_clause_keyword() throws RecognitionException {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4446);
			_la = _input.LA(1);
			if ( !(((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (AVG - 462)) | (1L << (CORR - 462)) | (1L << (LAG - 462)) | (1L << (LEAD - 462)) | (1L << (MAX - 462)) | (1L << (MEDIAN - 462)) | (1L << (MIN - 462)) | (1L << (NTILE - 462)) | (1L << (RATIO_TO_REPORT - 462)) | (1L << (ROW_NUMBER - 462)) | (1L << (SUM - 462)) | (1L << (VARIANCE - 462)) | (1L << (REGR_ - 462)) | (1L << (STDDEV - 462)) | (1L << (VAR_ - 462)) | (1L << (COVAR_ - 462)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode CUME_DIST() { return getToken(plsqlParser.CUME_DIST, 0); }
		public TerminalNode RANK() { return getToken(plsqlParser.RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(plsqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(plsqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(plsqlParser.PERCENT_RANK, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(plsqlParser.LISTAGG, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWithin_or_over_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWithin_or_over_clause_keyword(this);
		}
	}

	public final Within_or_over_clause_keywordContext within_or_over_clause_keyword() throws RecognitionException {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4448);
			_la = _input.LA(1);
			if ( !(((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (CUME_DIST - 455)) | (1L << (DENSE_RANK - 455)) | (1L << (LISTAGG - 455)) | (1L << (PERCENT_RANK - 455)) | (1L << (PERCENTILE_CONT - 455)) | (1L << (PERCENTILE_DISC - 455)) | (1L << (RANK - 455)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_prediction_function_keywordContext extends ParserRuleContext {
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(plsqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(plsqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(plsqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION() { return getToken(plsqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(plsqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(plsqlParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_prediction_function_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStandard_prediction_function_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStandard_prediction_function_keyword(this);
		}
	}

	public final Standard_prediction_function_keywordContext standard_prediction_function_keyword() throws RecognitionException {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4450);
			_la = _input.LA(1);
			if ( !(((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(plsqlParser.OVER, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Windowing_clauseContext windowing_clause() {
			return getRuleContext(Windowing_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOver_clause(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4452); match(OVER);
			setState(4453); match(LEFT_PAREN);
			setState(4455);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4454); query_partition_clause();
				}
			}

			setState(4461);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4457); order_by_clause();
				setState(4459);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(4458); windowing_clause();
					}
				}

				}
			}

			setState(4463); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_clauseContext extends ParserRuleContext {
		public Windowing_elementsContext windowing_elements(int i) {
			return getRuleContext(Windowing_elementsContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public List<Windowing_elementsContext> windowing_elements() {
			return getRuleContexts(Windowing_elementsContext.class);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Windowing_typeContext windowing_type() {
			return getRuleContext(Windowing_typeContext.class,0);
		}
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_clause(this);
		}
	}

	public final Windowing_clauseContext windowing_clause() throws RecognitionException {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_windowing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4465); windowing_type();
			setState(4472);
			switch (_input.LA(1)) {
			case BETWEEN:
				{
				setState(4466); match(BETWEEN);
				setState(4467); windowing_elements();
				setState(4468); match(AND);
				setState(4469); windowing_elements();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4471); windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_typeContext extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_type(this);
		}
	}

	public final Windowing_typeContext windowing_type() throws RecognitionException {
		Windowing_typeContext _localctx = new Windowing_typeContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_windowing_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4474);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_elementsContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public TerminalNode PRECEDING() { return getToken(plsqlParser.PRECEDING, 0); }
		public TerminalNode UNBOUNDED() { return getToken(plsqlParser.UNBOUNDED, 0); }
		public TerminalNode CURRENT() { return getToken(plsqlParser.CURRENT, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public TerminalNode FOLLOWING() { return getToken(plsqlParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_elements(this);
		}
	}

	public final Windowing_elementsContext windowing_elements() throws RecognitionException {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_windowing_elements);
		int _la;
		try {
			setState(4483);
			switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4476); match(UNBOUNDED);
				setState(4477); match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4478); match(CURRENT);
				setState(4479); match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4480); concatenation_wrapper();
				setState(4481);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public List<Using_elementContext> using_element() {
			return getRuleContexts(Using_elementContext.class);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public Using_elementContext using_element(int i) {
			return getRuleContext(Using_elementContext.class,i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUsing_clause(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_using_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4485); match(USING);
			setState(4495);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(4486); match(ASTERISK);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4487); using_element();
				setState(4492);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,567,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4488); match(COMMA);
						setState(4489); using_element();
						}
						} 
					}
					setState(4494);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,567,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public Using_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUsing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUsing_element(this);
		}
	}

	public final Using_elementContext using_element() throws RecognitionException {
		Using_elementContext _localctx = new Using_elementContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_using_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4502);
			switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
			case 1:
				{
				setState(4497); match(IN);
				setState(4499);
				switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
				case 1:
					{
					setState(4498); match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(4501); match(OUT);
				}
				break;
			}
			setState(4504); select_list_elements();
			setState(4506);
			switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
			case 1:
				{
				setState(4505); column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collect_order_by_partContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collect_order_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCollect_order_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCollect_order_by_part(this);
		}
	}

	public final Collect_order_by_partContext collect_order_by_part() throws RecognitionException {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_collect_order_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4508); match(ORDER);
			setState(4509); match(BY);
			setState(4510); concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_partContext extends ParserRuleContext {
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode GROUP() { return getToken(plsqlParser.GROUP, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode WITHIN() { return getToken(plsqlParser.WITHIN, 0); }
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWithin_or_over_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWithin_or_over_part(this);
		}
	}

	public final Within_or_over_partContext within_or_over_part() throws RecognitionException {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_within_or_over_part);
		try {
			setState(4519);
			switch (_input.LA(1)) {
			case WITHIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4512); match(WITHIN);
				setState(4513); match(GROUP);
				setState(4514); match(LEFT_PAREN);
				setState(4515); order_by_clause();
				setState(4516); match(RIGHT_PAREN);
				}
				break;
			case OVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4518); over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_matrix_clauseContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode COST() { return getToken(plsqlParser.COST, 0); }
		public Cost_class_nameContext cost_class_name(int i) {
			return getRuleContext(Cost_class_nameContext.class,i);
		}
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public TerminalNode AUTO() { return getToken(plsqlParser.AUTO, 0); }
		public List<Cost_class_nameContext> cost_class_name() {
			return getRuleContexts(Cost_class_nameContext.class);
		}
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_matrix_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCost_matrix_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCost_matrix_clause(this);
		}
	}

	public final Cost_matrix_clauseContext cost_matrix_clause() throws RecognitionException {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_cost_matrix_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4521); match(COST);
			setState(4539);
			switch (_input.LA(1)) {
			case MODEL:
				{
				setState(4522); match(MODEL);
				setState(4524);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(4523); match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(4526); match(LEFT_PAREN);
				setState(4527); cost_class_name();
				setState(4532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4528); match(COMMA);
					setState(4529); cost_class_name();
					}
					}
					setState(4534);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4535); match(RIGHT_PAREN);
				setState(4536); match(VALUES);
				setState(4537); expression_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_passing_clauseContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(plsqlParser.PASSING, 0); }
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_passing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_passing_clause(this);
		}
	}

	public final Xml_passing_clauseContext xml_passing_clause() throws RecognitionException {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_xml_passing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4541); match(PASSING);
			setState(4544);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(4542); match(BY);
				setState(4543); match(VALUE);
				}
			}

			setState(4546); expression_wrapper();
			setState(4548);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (NATIONAL_CHAR_STRING_LIT - 451)) | (1L << (CHAR_STRING - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(4547); column_alias();
				}
			}

			{
			setState(4550); match(COMMA);
			setState(4551); expression_wrapper();
			setState(4553);
			switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
			case 1:
				{
				setState(4552); column_alias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributes_clauseContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(plsqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(plsqlParser.NOSCHEMACHECK, 0); }
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public TerminalNode SCHEMACHECK() { return getToken(plsqlParser.SCHEMACHECK, 0); }
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_attributes_clause(this);
		}
	}

	public final Xml_attributes_clauseContext xml_attributes_clause() throws RecognitionException {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_xml_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4555); match(XMLATTRIBUTES);
			setState(4556); match(LEFT_PAREN);
			setState(4558);
			switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
			case 1:
				{
				setState(4557);
				_la = _input.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			}
			setState(4561);
			switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
			case 1:
				{
				setState(4560);
				_la = _input.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			}
			setState(4563); xml_multiuse_expression_element();
			setState(4568);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4564); match(COMMA);
				setState(4565); xml_multiuse_expression_element();
				}
				}
				setState(4570);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4571); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespaces_clauseContext extends ParserRuleContext {
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(plsqlParser.XMLNAMESPACES, 0); }
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespaces_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_namespaces_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_namespaces_clause(this);
		}
	}

	public final Xml_namespaces_clauseContext xml_namespaces_clause() throws RecognitionException {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_xml_namespaces_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4573); match(XMLNAMESPACES);
			setState(4574); match(LEFT_PAREN);
			setState(4578);
			switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
			case 1:
				{
				setState(4575); concatenation_wrapper();
				setState(4576); column_alias();
				}
				break;
			}
			setState(4586);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4580); match(COMMA);
				setState(4581); concatenation_wrapper();
				setState(4582); column_alias();
				}
				}
				setState(4588);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4590);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4589); xml_general_default_part();
				}
			}

			setState(4592); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_table_columnContext extends ParserRuleContext {
		public TerminalNode PATH() { return getToken(plsqlParser.PATH, 0); }
		public TerminalNode ORDINALITY() { return getToken(plsqlParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Xml_column_nameContext xml_column_name() {
			return getRuleContext(Xml_column_nameContext.class,0);
		}
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_table_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_table_column(this);
		}
	}

	public final Xml_table_columnContext xml_table_column() throws RecognitionException {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_xml_table_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4594); xml_column_name();
			setState(4605);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(4595); match(FOR);
				setState(4596); match(ORDINALITY);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(4597); type_spec();
				setState(4600);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(4598); match(PATH);
					setState(4599); concatenation_wrapper();
					}
				}

				setState(4603);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(4602); xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_general_default_partContext extends ParserRuleContext {
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_general_default_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_general_default_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_general_default_part(this);
		}
	}

	public final Xml_general_default_partContext xml_general_default_part() throws RecognitionException {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_xml_general_default_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4607); match(DEFAULT);
			setState(4608); concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_multiuse_expression_elementContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_multiuse_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_multiuse_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_multiuse_expression_element(this);
		}
	}

	public final Xml_multiuse_expression_elementContext xml_multiuse_expression_element() throws RecognitionException {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4610); expression();
			setState(4617);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4611); match(AS);
				setState(4615);
				switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
				case 1:
					{
					setState(4612); id_expression();
					}
					break;
				case 2:
					{
					setState(4613); match(EVALNAME);
					setState(4614); concatenation();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlroot_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlroot_param_version_part(this);
		}
	}

	public final Xmlroot_param_version_partContext xmlroot_param_version_part() throws RecognitionException {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_xmlroot_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4619); match(VERSION);
			setState(4623);
			switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
			case 1:
				{
				setState(4620); match(NO);
				setState(4621); match(VALUE);
				}
				break;
			case 2:
				{
				setState(4622); expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_standalone_partContext extends ParserRuleContext {
		public TerminalNode YES() { return getToken(plsqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode STANDALONE() { return getToken(plsqlParser.STANDALONE, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_standalone_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlroot_param_standalone_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlroot_param_standalone_part(this);
		}
	}

	public final Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() throws RecognitionException {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4625); match(STANDALONE);
			setState(4631);
			switch (_input.LA(1)) {
			case YES:
				{
				setState(4626); match(YES);
				}
				break;
			case NO:
				{
				setState(4627); match(NO);
				setState(4629);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4628); match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
		public TerminalNode ENCODING() { return getToken(plsqlParser.ENCODING, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_enconding_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_enconding_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_enconding_part(this);
		}
	}

	public final Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() throws RecognitionException {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_xmlserialize_param_enconding_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4633); match(ENCODING);
			setState(4634); concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_version_part(this);
		}
	}

	public final Xmlserialize_param_version_partContext xmlserialize_param_version_part() throws RecognitionException {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_xmlserialize_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4636); match(VERSION);
			setState(4637); concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_ident_partContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode INDENT() { return getToken(plsqlParser.INDENT, 0); }
		public TerminalNode SIZE() { return getToken(plsqlParser.SIZE, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_ident_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_ident_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_ident_part(this);
		}
	}

	public final Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() throws RecognitionException {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			setState(4647);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(4639); match(NO);
				setState(4640); match(INDENT);
				}
				break;
			case INDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4641); match(INDENT);
				setState(4645);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(4642); match(SIZE);
					setState(4643); match(EQUALS_OP);
					setState(4644); concatenation_wrapper();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_plus_commandContext extends ParserRuleContext {
		public Show_errors_commandContext show_errors_command() {
			return getRuleContext(Show_errors_commandContext.class,0);
		}
		public Whenever_commandContext whenever_command() {
			return getRuleContext(Whenever_commandContext.class,0);
		}
		public Set_commandContext set_command() {
			return getRuleContext(Set_commandContext.class,0);
		}
		public Exit_commandContext exit_command() {
			return getRuleContext(Exit_commandContext.class,0);
		}
		public Prompt_commandContext prompt_command() {
			return getRuleContext(Prompt_commandContext.class,0);
		}
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_plus_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_plus_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_plus_command(this);
		}
	}

	public final Sql_plus_commandContext sql_plus_command() throws RecognitionException {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_sql_plus_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4655);
			switch (_input.LA(1)) {
			case SOLIDUS:
				{
				setState(4649); match(SOLIDUS);
				}
				break;
			case WHENEVER:
				{
				setState(4650); whenever_command();
				}
				break;
			case EXIT:
				{
				setState(4651); exit_command();
				}
				break;
			case PROMPT:
				{
				setState(4652); prompt_command();
				}
				break;
			case SET:
				{
				setState(4653); set_command();
				}
				break;
			case SHOW:
				{
				setState(4654); show_errors_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4658);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(4657); match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Whenever_commandContext extends ParserRuleContext {
		public TerminalNode OSERROR() { return getToken(plsqlParser.OSERROR, 0); }
		public TerminalNode SQLERROR() { return getToken(plsqlParser.SQLERROR, 0); }
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public TerminalNode WARNING() { return getToken(plsqlParser.WARNING, 0); }
		public TerminalNode SUCCESS() { return getToken(plsqlParser.SUCCESS, 0); }
		public TerminalNode NONE() { return getToken(plsqlParser.NONE, 0); }
		public TerminalNode FAILURE() { return getToken(plsqlParser.FAILURE, 0); }
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public TerminalNode WHENEVER() { return getToken(plsqlParser.WHENEVER, 0); }
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public Whenever_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenever_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWhenever_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWhenever_command(this);
		}
	}

	public final Whenever_commandContext whenever_command() throws RecognitionException {
		Whenever_commandContext _localctx = new Whenever_commandContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_whenever_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4660); match(WHENEVER);
			setState(4661);
			_la = _input.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(4667);
			switch (_input.LA(1)) {
			case EXIT:
				{
				setState(4662); match(EXIT);
				setState(4663);
				_la = _input.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(4664);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case CONTINUE:
				{
				setState(4665); match(CONTINUE);
				setState(4666);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_commandContext extends ParserRuleContext {
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(plsqlParser.OFF, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public Set_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_command(this);
		}
	}

	public final Set_commandContext set_command() throws RecognitionException {
		Set_commandContext _localctx = new Set_commandContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_set_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4669); match(SET);
			setState(4670); regular_id();
			setState(4676);
			switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
			case 1:
				{
				setState(4671); match(CHAR_STRING);
				}
				break;
			case 2:
				{
				setState(4672); match(ON);
				}
				break;
			case 3:
				{
				setState(4673); match(OFF);
				}
				break;
			case 4:
				{
				setState(4674); numeric();
				}
				break;
			case 5:
				{
				setState(4675); regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_commandContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public Exit_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExit_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExit_command(this);
		}
	}

	public final Exit_commandContext exit_command() throws RecognitionException {
		Exit_commandContext _localctx = new Exit_commandContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_exit_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4678); match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prompt_commandContext extends ParserRuleContext {
		public TerminalNode PROMPT() { return getToken(plsqlParser.PROMPT, 0); }
		public Prompt_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prompt_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPrompt_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPrompt_command(this);
		}
	}

	public final Prompt_commandContext prompt_command() throws RecognitionException {
		Prompt_commandContext _localctx = new Prompt_commandContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_prompt_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4680); match(PROMPT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_errors_commandContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(plsqlParser.SHOW, 0); }
		public TerminalNode ERR() { return getToken(plsqlParser.ERR, 0); }
		public TerminalNode ERRORS() { return getToken(plsqlParser.ERRORS, 0); }
		public Show_errors_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_errors_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterShow_errors_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitShow_errors_command(this);
		}
	}

	public final Show_errors_commandContext show_errors_command() throws RecognitionException {
		Show_errors_commandContext _localctx = new Show_errors_commandContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_show_errors_command);
		try {
			setState(4686);
			switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4682); match(SHOW);
				setState(4683); match(ERR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4684); match(SHOW);
				setState(4685); match(ERRORS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_extension_clauseContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_extension_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPartition_extension_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPartition_extension_clause(this);
		}
	}

	public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_partition_extension_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4688);
			_la = _input.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(4690);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4689); match(FOR);
				}
			}

			setState(4692); expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_alias(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_column_alias);
		int _la;
		try {
			setState(4702);
			switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4695);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4694); match(AS);
					}
				}

				setState(4699);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4697); id();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(4698); alias_quoted_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4701); match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_alias(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4706);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4704); id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				{
				setState(4705); alias_quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_quoted_stringContext extends ParserRuleContext {
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Alias_quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlias_quoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlias_quoted_string(this);
		}
	}

	public final Alias_quoted_stringContext alias_quoted_string() throws RecognitionException {
		Alias_quoted_stringContext _localctx = new Alias_quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_alias_quoted_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4708); quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public Current_of_clauseContext current_of_clause() {
			return getRuleContext(Current_of_clauseContext.class,0);
		}
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(plsqlParser.WHERE, 0); }
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWhere_clause(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4710); match(WHERE);
			setState(4713);
			switch (_input.LA(1)) {
			case CURRENT:
				{
				setState(4711); current_of_clause();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4712); condition_wrapper();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_of_clauseContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public TerminalNode CURRENT() { return getToken(plsqlParser.CURRENT, 0); }
		public Current_of_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_of_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCurrent_of_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCurrent_of_clause(this);
		}
	}

	public final Current_of_clauseContext current_of_clause() throws RecognitionException {
		Current_of_clauseContext _localctx = new Current_of_clauseContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_current_of_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4715); match(CURRENT);
			setState(4716); match(OF);
			setState(4717); cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInto_clause(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_into_clause);
		int _la;
		try {
			setState(4739);
			switch (_input.LA(1)) {
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(4719); match(INTO);
				setState(4720); variable_name();
				setState(4725);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4721); match(COMMA);
					setState(4722); variable_name();
					}
					}
					setState(4727);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4728); match(BULK);
				setState(4729); match(COLLECT);
				setState(4730); match(INTO);
				setState(4731); variable_name();
				setState(4736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4732); match(COMMA);
					setState(4733); variable_name();
					}
					}
					setState(4738);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_column_nameContext extends ParserRuleContext {
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_column_name(this);
		}
	}

	public final Xml_column_nameContext xml_column_name() throws RecognitionException {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_xml_column_name);
		try {
			setState(4743);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4741); id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(4742); quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_class_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_class_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCost_class_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCost_class_name(this);
		}
	}

	public final Cost_class_nameContext cost_class_name() throws RecognitionException {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_cost_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4745); id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAttribute_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAttribute_name(this);
		}
	}

	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4747); id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSavepoint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSavepoint_name(this);
		}
	}

	public final Savepoint_nameContext savepoint_name() throws RecognitionException {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_savepoint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4749); id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_segment_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_segment_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollback_segment_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollback_segment_name(this);
		}
	}

	public final Rollback_segment_nameContext rollback_segment_name() throws RecognitionException {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_rollback_segment_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4751); id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_var_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_var_name(this);
		}
	}

	public final Table_var_nameContext table_var_name() throws RecognitionException {
		Table_var_nameContext _localctx = new Table_var_nameContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_table_var_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4753); id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSchema_name(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4755); id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_nameContext extends ParserRuleContext {
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRoutine_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRoutine_name(this);
		}
	}

	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_routine_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4757); id();
			setState(4762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4758); match(PERIOD);
				setState(4759); id_expression();
				}
				}
				setState(4764);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4767);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(4765); match(AT_SIGN);
				setState(4766); link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_name(this);
		}
	}

	public final Package_nameContext package_name() throws RecognitionException {
		Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_package_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4769); id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_type_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterImplementation_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitImplementation_type_name(this);
		}
	}

	public final Implementation_type_nameContext implementation_type_name() throws RecognitionException {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_implementation_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4771); id();
			setState(4774);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(4772); match(PERIOD);
				setState(4773); id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter_name(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4776); id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_model_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReference_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReference_model_name(this);
		}
	}

	public final Reference_model_nameContext reference_model_name() throws RecognitionException {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_reference_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4778); id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_model_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMain_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMain_model_name(this);
		}
	}

	public final Main_model_nameContext main_model_name() throws RecognitionException {
		Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_main_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4780); id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_function_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAggregate_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAggregate_function_name(this);
		}
	}

	public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_aggregate_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4782); id();
			setState(4787);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4783); match(PERIOD);
				setState(4784); id_expression();
				}
				}
				setState(4789);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_name(this);
		}
	}

	public final Query_nameContext query_name() throws RecognitionException {
		Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_query_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4790); id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_nameContext extends ParserRuleContext {
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstraint_name(this);
		}
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_constraint_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4792); id();
			setState(4797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4793); match(PERIOD);
				setState(4794); id_expression();
				}
				}
				setState(4799);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4802);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(4800); match(AT_SIGN);
				setState(4801); link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLabel_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLabel_name(this);
		}
	}

	public final Label_nameContext label_name() throws RecognitionException {
		Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_label_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4804); id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_name(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4806); id_expression();
			setState(4811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4807); match(PERIOD);
				setState(4808); id_expression();
				}
				}
				setState(4813);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Sequence_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_name(this);
		}
	}

	public final Sequence_nameContext sequence_name() throws RecognitionException {
		Sequence_nameContext _localctx = new Sequence_nameContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_sequence_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4814); id_expression();
			setState(4819);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4815); match(PERIOD);
				setState(4816); id_expression();
				}
				}
				setState(4821);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_name(this);
		}
	}

	public final Exception_nameContext exception_name() throws RecognitionException {
		Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_exception_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4822); id();
			setState(4827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4823); match(PERIOD);
				setState(4824); id_expression();
				}
				}
				setState(4829);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_name(this);
		}
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4830); id();
			setState(4833);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(4831); match(PERIOD);
				setState(4832); id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProcedure_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProcedure_name(this);
		}
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_procedure_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4835); id();
			setState(4838);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(4836); match(PERIOD);
				setState(4837); id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_name(this);
		}
	}

	public final Trigger_nameContext trigger_name() throws RecognitionException {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_trigger_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4840); id();
			setState(4843);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(4841); match(PERIOD);
				setState(4842); id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVariable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVariable_name(this);
		}
	}

	public final Variable_nameContext variable_name() throws RecognitionException {
		Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_variable_name);
		int _la;
		try {
			setState(4855);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4847);
				_la = _input.LA(1);
				if (_la==INTRODUCER) {
					{
					setState(4845); match(INTRODUCER);
					setState(4846); char_set_name();
					}
				}

				setState(4849); id_expression();
				setState(4852);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4850); match(PERIOD);
					setState(4851); id_expression();
					}
				}

				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(4854); bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_name(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4857); id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_name(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_cursor_name);
		try {
			setState(4861);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4859); id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(4860); bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_nameContext extends ParserRuleContext {
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_name(this);
		}
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_record_name);
		try {
			setState(4865);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4863); id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(4864); bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCollection_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCollection_name(this);
		}
	}

	public final Collection_nameContext collection_name() throws RecognitionException {
		Collection_nameContext _localctx = new Collection_nameContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_collection_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4867); id();
			setState(4870);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(4868); match(PERIOD);
				setState(4869); id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Link_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_link_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLink_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLink_name(this);
		}
	}

	public final Link_nameContext link_name() throws RecognitionException {
		Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_link_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4872); id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_name(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_column_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4874); id();
			setState(4879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4875); match(PERIOD);
				setState(4876); id_expression();
				}
				}
				setState(4881);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tableview_nameContext extends ParserRuleContext {
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableview_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTableview_name(this);
		}
	}

	public final Tableview_nameContext tableview_name() throws RecognitionException {
		Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4882); id();
			setState(4885);
			switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
			case 1:
				{
				setState(4883); match(PERIOD);
				setState(4884); id_expression();
				}
				break;
			}
			setState(4890);
			switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
			case 1:
				{
				setState(4887); match(AT_SIGN);
				setState(4888); link_name();
				}
				break;
			case 2:
				{
				setState(4889); partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_set_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Char_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterChar_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitChar_set_name(this);
		}
	}

	public final Char_set_nameContext char_set_name() throws RecognitionException {
		Char_set_nameContext _localctx = new Char_set_nameContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_char_set_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4892); id_expression();
			setState(4897);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4893); match(PERIOD);
				setState(4894); id_expression();
				}
				}
				setState(4899);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Keep_clauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keep_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterKeep_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitKeep_clause(this);
		}
	}

	public final Keep_clauseContext keep_clause() throws RecognitionException {
		Keep_clauseContext _localctx = new Keep_clauseContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_keep_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4900); match(KEEP);
			setState(4901); match(LEFT_PAREN);
			setState(4902); match(DENSE_RANK);
			setState(4903);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(4904); order_by_clause();
			setState(4905); match(RIGHT_PAREN);
			setState(4907);
			switch ( getInterpreter().adaptivePredict(_input,632,_ctx) ) {
			case 1:
				{
				setState(4906); over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argumentContext extends ParserRuleContext {
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument(this);
		}
	}

	public final Function_argumentContext function_argument() throws RecognitionException {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_function_argument);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4909); match(LEFT_PAREN);
			setState(4911);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENTITYESCAPING - 64)) | (1L << (ERR - 64)) | (1L << (ERRORS - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVALNAME - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)) | (1L << (ISOLATION - 128)) | (1L << (ITERATE - 128)) | (1L << (JAVA - 128)) | (1L << (JOIN - 128)) | (1L << (KEEP - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NONE - 192)) | (1L << (NOSCHEMACHECK - 192)) | (1L << (NOT - 192)) | (1L << (NULL - 192)) | (1L << (NULLS - 192)) | (1L << (NUMBER - 192)) | (1L << (NUMERIC - 192)) | (1L << (NVARCHAR2 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)) | (1L << (RENAME - 256)) | (1L << (REPLACE - 256)) | (1L << (RESPECT - 256)) | (1L << (RESTRICT_REFERENCES - 256)) | (1L << (RESULT - 256)) | (1L << (RESULT_CACHE - 256)) | (1L << (RETURN - 256)) | (1L << (RETURNING - 256)) | (1L << (REUSE - 256)) | (1L << (REVERSE - 256)) | (1L << (RIGHT - 256)) | (1L << (ROLLBACK - 256)) | (1L << (ROLLUP - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)) | (1L << (SUBMULTISET - 320)) | (1L << (SUBPARTITION - 320)) | (1L << (SUBSTITUTABLE - 320)) | (1L << (SUBTYPE - 320)) | (1L << (SUCCESS - 320)) | (1L << (SUSPEND - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 320)) | (1L << (TIMESTAMP_UNCONSTRAINED - 320)) | (1L << (TIMEZONE_ABBR - 320)) | (1L << (TIMEZONE_HOUR - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHILE - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)) | (1L << (XML - 384)) | (1L << (XMLAGG - 384)) | (1L << (XMLATTRIBUTES - 384)) | (1L << (XMLCAST - 384)) | (1L << (XMLCOLATTVAL - 384)) | (1L << (XMLELEMENT - 384)) | (1L << (XMLEXISTS - 384)) | (1L << (XMLFOREST - 384)) | (1L << (XMLNAMESPACES - 384)) | (1L << (XMLPARSE - 384)) | (1L << (XMLPI - 384)) | (1L << (XMLQUERY - 384)) | (1L << (XMLROOT - 384)) | (1L << (XMLSERIALIZE - 384)) | (1L << (XMLTABLE - 384)) | (1L << (YEAR - 384)) | (1L << (YES - 384)) | (1L << (YMINTERVAL_UNCONSTRAINED - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (UNSIGNED_INTEGER - 448)) | (1L << (APPROXIMATE_NUM_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)) | (1L << (LEFT_PAREN - 448)) | (1L << (PLUS_SIGN - 448)) | (1L << (MINUS_SIGN - 448)) | (1L << (BINDVAR - 448)) | (1L << (COLON - 448)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(4910); argument();
				}
			}

			setState(4917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4913); match(COMMA);
				setState(4914); argument();
				}
				}
				setState(4919);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4920); match(RIGHT_PAREN);
			setState(4922);
			switch ( getInterpreter().adaptivePredict(_input,635,_ctx) ) {
			case 1:
				{
				setState(4921); keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_analyticContext extends ParserRuleContext {
		public List<Respect_or_ignore_nullsContext> respect_or_ignore_nulls() {
			return getRuleContexts(Respect_or_ignore_nullsContext.class);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return getRuleContext(Respect_or_ignore_nullsContext.class,i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_analytic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument_analytic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument_analytic(this);
		}
	}

	public final Function_argument_analyticContext function_argument_analytic() throws RecognitionException {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_function_argument_analytic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4924); match(LEFT_PAREN);
			setState(4929);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENTITYESCAPING - 64)) | (1L << (ERR - 64)) | (1L << (ERRORS - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVALNAME - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)) | (1L << (ISOLATION - 128)) | (1L << (ITERATE - 128)) | (1L << (JAVA - 128)) | (1L << (JOIN - 128)) | (1L << (KEEP - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NONE - 192)) | (1L << (NOSCHEMACHECK - 192)) | (1L << (NOT - 192)) | (1L << (NULL - 192)) | (1L << (NULLS - 192)) | (1L << (NUMBER - 192)) | (1L << (NUMERIC - 192)) | (1L << (NVARCHAR2 - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)) | (1L << (RENAME - 256)) | (1L << (REPLACE - 256)) | (1L << (RESPECT - 256)) | (1L << (RESTRICT_REFERENCES - 256)) | (1L << (RESULT - 256)) | (1L << (RESULT_CACHE - 256)) | (1L << (RETURN - 256)) | (1L << (RETURNING - 256)) | (1L << (REUSE - 256)) | (1L << (REVERSE - 256)) | (1L << (RIGHT - 256)) | (1L << (ROLLBACK - 256)) | (1L << (ROLLUP - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)) | (1L << (SUBMULTISET - 320)) | (1L << (SUBPARTITION - 320)) | (1L << (SUBSTITUTABLE - 320)) | (1L << (SUBTYPE - 320)) | (1L << (SUCCESS - 320)) | (1L << (SUSPEND - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 320)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 320)) | (1L << (TIMESTAMP_UNCONSTRAINED - 320)) | (1L << (TIMEZONE_ABBR - 320)) | (1L << (TIMEZONE_HOUR - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHILE - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)) | (1L << (XML - 384)) | (1L << (XMLAGG - 384)) | (1L << (XMLATTRIBUTES - 384)) | (1L << (XMLCAST - 384)) | (1L << (XMLCOLATTVAL - 384)) | (1L << (XMLELEMENT - 384)) | (1L << (XMLEXISTS - 384)) | (1L << (XMLFOREST - 384)) | (1L << (XMLNAMESPACES - 384)) | (1L << (XMLPARSE - 384)) | (1L << (XMLPI - 384)) | (1L << (XMLQUERY - 384)) | (1L << (XMLROOT - 384)) | (1L << (XMLSERIALIZE - 384)) | (1L << (XMLTABLE - 384)) | (1L << (YEAR - 384)) | (1L << (YES - 384)) | (1L << (YMINTERVAL_UNCONSTRAINED - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (UNSIGNED_INTEGER - 448)) | (1L << (APPROXIMATE_NUM_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)) | (1L << (LEFT_PAREN - 448)) | (1L << (PLUS_SIGN - 448)) | (1L << (MINUS_SIGN - 448)) | (1L << (BINDVAR - 448)) | (1L << (COLON - 448)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(4925); argument();
				setState(4927);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(4926); respect_or_ignore_nulls();
					}
				}

				}
			}

			setState(4938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4931); match(COMMA);
				setState(4932); argument();
				setState(4934);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(4933); respect_or_ignore_nulls();
					}
				}

				}
				}
				setState(4940);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4941); match(RIGHT_PAREN);
			setState(4943);
			switch ( getInterpreter().adaptivePredict(_input,640,_ctx) ) {
			case 1:
				{
				setState(4942); keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_modelingContext extends ParserRuleContext {
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public TerminalNode NULL(int i) {
			return getToken(plsqlParser.NULL, i);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<TerminalNode> NULL() { return getTokens(plsqlParser.NULL); }
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_modeling; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument_modeling(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument_modeling(this);
		}
	}

	public final Function_argument_modelingContext function_argument_modeling() throws RecognitionException {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_function_argument_modeling);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4945); match(LEFT_PAREN);
			setState(4946); column_name();
			setState(4959);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4947); match(COMMA);
				setState(4950);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					setState(4948); numeric();
					}
					break;
				case NULL:
					{
					setState(4949); match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4957);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4952); match(COMMA);
					setState(4955);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(4953); numeric();
						}
						break;
					case NULL:
						{
						setState(4954); match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(4961); match(USING);
			setState(4981);
			switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
			case 1:
				{
				setState(4962); tableview_name();
				setState(4963); match(PERIOD);
				setState(4964); match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(4966); match(ASTERISK);
				}
				break;
			case 3:
				{
				setState(4967); expression();
				setState(4969);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (NATIONAL_CHAR_STRING_LIT - 451)) | (1L << (CHAR_STRING - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					setState(4968); column_alias();
					}
				}

				setState(4978);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4971); match(COMMA);
					setState(4972); expression();
					setState(4974);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)) | (1L << (NATIONAL_CHAR_STRING_LIT - 451)) | (1L << (CHAR_STRING - 451)) | (1L << (DELIMITED_ID - 451)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						setState(4973); column_alias();
						}
					}

					}
					}
					setState(4980);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(4983); match(RIGHT_PAREN);
			setState(4985);
			switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
			case 1:
				{
				setState(4984); keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Respect_or_ignore_nullsContext extends ParserRuleContext {
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public TerminalNode RESPECT() { return getToken(plsqlParser.RESPECT, 0); }
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respect_or_ignore_nulls; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRespect_or_ignore_nulls(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRespect_or_ignore_nulls(this);
		}
	}

	public final Respect_or_ignore_nullsContext respect_or_ignore_nulls() throws RecognitionException {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4987);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(4988); match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitArgument(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4994);
			switch ( getInterpreter().adaptivePredict(_input,650,_ctx) ) {
			case 1:
				{
				setState(4990); id();
				setState(4991); match(EQUALS_OP);
				setState(4992); match(GREATER_THAN_OP);
				}
				break;
			}
			setState(4996); expression_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_specContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode PERCENT_ROWTYPE() { return getToken(plsqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public TerminalNode PERCENT_TYPE() { return getToken(plsqlParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_spec(this);
		}
	}

	public final Type_specContext type_spec() throws RecognitionException {
		Type_specContext _localctx = new Type_specContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_type_spec);
		int _la;
		try {
			setState(5006);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4998); datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5000);
				switch ( getInterpreter().adaptivePredict(_input,651,_ctx) ) {
				case 1:
					{
					setState(4999); match(REF);
					}
					break;
				}
				setState(5002); type_name();
				setState(5004);
				_la = _input.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					setState(5003);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatatypeContext extends ParserRuleContext {
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDatatype(this);
		}
	}

	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_datatype);
		int _la;
		try {
			setState(5036);
			switch (_input.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INT:
			case INTEGER:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR:
			case VARCHAR2:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 1);
				{
				setState(5008); native_datatype_element();
				setState(5010);
				switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
				case 1:
					{
					setState(5009); precision_part();
					}
					break;
				}
				setState(5018);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5012); match(WITH);
					setState(5014);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(5013); match(LOCAL);
						}
					}

					setState(5016); match(TIME);
					setState(5017); match(ZONE);
					}
				}

				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5020); match(INTERVAL);
				setState(5021);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(5026);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5022); match(LEFT_PAREN);
					setState(5023); expression_wrapper();
					setState(5024); match(RIGHT_PAREN);
					}
				}

				setState(5028); match(TO);
				setState(5029);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(5034);
				switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
				case 1:
					{
					setState(5030); match(LEFT_PAREN);
					setState(5031); expression_wrapper();
					setState(5032); match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_partContext extends ParserRuleContext {
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode BYTE() { return getToken(plsqlParser.BYTE, 0); }
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPrecision_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPrecision_part(this);
		}
	}

	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5038); match(LEFT_PAREN);
			setState(5039); numeric();
			setState(5042);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5040); match(COMMA);
				setState(5041); numeric();
				}
			}

			setState(5045);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(5044);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(5047); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Native_datatype_elementContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(plsqlParser.DECIMAL, 0); }
		public TerminalNode MINUTE() { return getToken(plsqlParser.MINUTE, 0); }
		public TerminalNode INTEGER() { return getToken(plsqlParser.INTEGER, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(plsqlParser.BINARY_FLOAT, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode HOUR() { return getToken(plsqlParser.HOUR, 0); }
		public TerminalNode POSITIVEN() { return getToken(plsqlParser.POSITIVEN, 0); }
		public TerminalNode NVARCHAR2() { return getToken(plsqlParser.NVARCHAR2, 0); }
		public TerminalNode DEC() { return getToken(plsqlParser.DEC, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(plsqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode PRECISION() { return getToken(plsqlParser.PRECISION, 0); }
		public TerminalNode NATURALN() { return getToken(plsqlParser.NATURALN, 0); }
		public TerminalNode SIGNTYPE() { return getToken(plsqlParser.SIGNTYPE, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(plsqlParser.PLS_INTEGER, 0); }
		public TerminalNode NCLOB() { return getToken(plsqlParser.NCLOB, 0); }
		public TerminalNode STRING() { return getToken(plsqlParser.STRING, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(plsqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode DOUBLE() { return getToken(plsqlParser.DOUBLE, 0); }
		public TerminalNode VARCHAR() { return getToken(plsqlParser.VARCHAR, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode FLOAT() { return getToken(plsqlParser.FLOAT, 0); }
		public TerminalNode NUMERIC() { return getToken(plsqlParser.NUMERIC, 0); }
		public TerminalNode VARCHAR2() { return getToken(plsqlParser.VARCHAR2, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(plsqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode NUMBER() { return getToken(plsqlParser.NUMBER, 0); }
		public TerminalNode DATE() { return getToken(plsqlParser.DATE, 0); }
		public TerminalNode POSITIVE() { return getToken(plsqlParser.POSITIVE, 0); }
		public TerminalNode REAL() { return getToken(plsqlParser.REAL, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode CLOB() { return getToken(plsqlParser.CLOB, 0); }
		public TerminalNode RAW() { return getToken(plsqlParser.RAW, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(plsqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode INT() { return getToken(plsqlParser.INT, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(plsqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode BFILE() { return getToken(plsqlParser.BFILE, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode CHARACTER() { return getToken(plsqlParser.CHARACTER, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(plsqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode NCHAR() { return getToken(plsqlParser.NCHAR, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode SMALLINT() { return getToken(plsqlParser.SMALLINT, 0); }
		public TerminalNode UROWID() { return getToken(plsqlParser.UROWID, 0); }
		public TerminalNode BOOLEAN() { return getToken(plsqlParser.BOOLEAN, 0); }
		public TerminalNode ROWID() { return getToken(plsqlParser.ROWID, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(plsqlParser.BINARY_INTEGER, 0); }
		public TerminalNode LONG() { return getToken(plsqlParser.LONG, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode BLOB() { return getToken(plsqlParser.BLOB, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public TerminalNode MLSLABEL() { return getToken(plsqlParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNative_datatype_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNative_datatype_element(this);
		}
	}

	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_native_datatype_element);
		int _la;
		try {
			setState(5109);
			switch (_input.LA(1)) {
			case BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5049); match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5050); match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5051); match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(5052); match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5053); match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				enterOuterAlt(_localctx, 6);
				{
				setState(5054); match(NATURALN);
				}
				break;
			case POSITIVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5055); match(POSITIVE);
				}
				break;
			case POSITIVEN:
				enterOuterAlt(_localctx, 8);
				{
				setState(5056); match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5057); match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				enterOuterAlt(_localctx, 10);
				{
				setState(5058); match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				enterOuterAlt(_localctx, 11);
				{
				setState(5059); match(NVARCHAR2);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 12);
				{
				setState(5060); match(DEC);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 13);
				{
				setState(5061); match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 14);
				{
				setState(5062); match(INT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 15);
				{
				setState(5063); match(NUMERIC);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 16);
				{
				setState(5064); match(SMALLINT);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 17);
				{
				setState(5065); match(NUMBER);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 18);
				{
				setState(5066); match(DECIMAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 19);
				{
				setState(5067); match(DOUBLE);
				setState(5069);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5068); match(PRECISION);
					}
				}

				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 20);
				{
				setState(5071); match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 21);
				{
				setState(5072); match(REAL);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 22);
				{
				setState(5073); match(NCHAR);
				}
				break;
			case LONG:
				enterOuterAlt(_localctx, 23);
				{
				setState(5074); match(LONG);
				setState(5076);
				_la = _input.LA(1);
				if (_la==RAW) {
					{
					setState(5075); match(RAW);
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(5078); match(CHAR);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 25);
				{
				setState(5079); match(CHARACTER);
				}
				break;
			case VARCHAR2:
				enterOuterAlt(_localctx, 26);
				{
				setState(5080); match(VARCHAR2);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 27);
				{
				setState(5081); match(VARCHAR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 28);
				{
				setState(5082); match(STRING);
				}
				break;
			case RAW:
				enterOuterAlt(_localctx, 29);
				{
				setState(5083); match(RAW);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 30);
				{
				setState(5084); match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 31);
				{
				setState(5085); match(DATE);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 32);
				{
				setState(5086); match(ROWID);
				}
				break;
			case UROWID:
				enterOuterAlt(_localctx, 33);
				{
				setState(5087); match(UROWID);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 34);
				{
				setState(5088); match(YEAR);
				}
				break;
			case MONTH:
				enterOuterAlt(_localctx, 35);
				{
				setState(5089); match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 36);
				{
				setState(5090); match(DAY);
				}
				break;
			case HOUR:
				enterOuterAlt(_localctx, 37);
				{
				setState(5091); match(HOUR);
				}
				break;
			case MINUTE:
				enterOuterAlt(_localctx, 38);
				{
				setState(5092); match(MINUTE);
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 39);
				{
				setState(5093); match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				enterOuterAlt(_localctx, 40);
				{
				setState(5094); match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 41);
				{
				setState(5095); match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				enterOuterAlt(_localctx, 42);
				{
				setState(5096); match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				enterOuterAlt(_localctx, 43);
				{
				setState(5097); match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 44);
				{
				setState(5098); match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				enterOuterAlt(_localctx, 45);
				{
				setState(5099); match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 46);
				{
				setState(5100); match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 47);
				{
				setState(5101); match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 48);
				{
				setState(5102); match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 49);
				{
				setState(5103); match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				enterOuterAlt(_localctx, 50);
				{
				setState(5104); match(BFILE);
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 51);
				{
				setState(5105); match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 52);
				{
				setState(5106); match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 53);
				{
				setState(5107); match(NCLOB);
				}
				break;
			case MLSLABEL:
				enterOuterAlt(_localctx, 54);
				{
				setState(5108); match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bind_variableContext extends ParserRuleContext {
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode BINDVAR(int i) {
			return getToken(plsqlParser.BINDVAR, i);
		}
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public List<TerminalNode> BINDVAR() { return getTokens(plsqlParser.BINDVAR); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public TerminalNode INDICATOR() { return getToken(plsqlParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBind_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBind_variable(this);
		}
	}

	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_bind_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5114);
			switch (_input.LA(1)) {
			case BINDVAR:
				{
				setState(5111); match(BINDVAR);
				}
				break;
			case COLON:
				{
				setState(5112); match(COLON);
				setState(5113); match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5124);
			switch ( getInterpreter().adaptivePredict(_input,668,_ctx) ) {
			case 1:
				{
				setState(5117);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(5116); match(INDICATOR);
					}
				}

				setState(5122);
				switch (_input.LA(1)) {
				case BINDVAR:
					{
					setState(5119); match(BINDVAR);
					}
					break;
				case COLON:
					{
					setState(5120); match(COLON);
					setState(5121); match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(5130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5126); match(PERIOD);
				setState(5127); general_element_part();
				}
				}
				setState(5132);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_elementContext extends ParserRuleContext {
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public General_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGeneral_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGeneral_element(this);
		}
	}

	public final General_elementContext general_element() throws RecognitionException {
		General_elementContext _localctx = new General_elementContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_general_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5133); general_element_part();
			setState(5138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5134); match(PERIOD);
				setState(5135); general_element_part();
				}
				}
				setState(5140);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_element_partContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public General_element_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGeneral_element_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGeneral_element_part(this);
		}
	}

	public final General_element_partContext general_element_part() throws RecognitionException {
		General_element_partContext _localctx = new General_element_partContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_general_element_part);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5143);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5141); match(INTRODUCER);
				setState(5142); char_set_name();
				}
			}

			setState(5145); id_expression();
			setState(5150);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,672,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5146); match(PERIOD);
					setState(5147); id_expression();
					}
					} 
				}
				setState(5152);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,672,_ctx);
			}
			setState(5154);
			switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
			case 1:
				{
				setState(5153); function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_element(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5158);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5156); match(INTRODUCER);
				setState(5157); char_set_name();
				}
			}

			setState(5160); id_expression();
			setState(5165);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5161); match(PERIOD);
				setState(5162); id_expression();
				}
				}
				setState(5167);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public List<Bind_variableContext> bind_variable() {
			return getRuleContexts(Bind_variableContext.class);
		}
		public List<TerminalNode> MINUTE() { return getTokens(plsqlParser.MINUTE); }
		public TerminalNode FALSE() { return getToken(plsqlParser.FALSE, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode HOUR(int i) {
			return getToken(plsqlParser.HOUR, i);
		}
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public List<TerminalNode> HOUR() { return getTokens(plsqlParser.HOUR); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(plsqlParser.DBTIMEZONE, 0); }
		public List<TerminalNode> DAY() { return getTokens(plsqlParser.DAY); }
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public TerminalNode TRUE() { return getToken(plsqlParser.TRUE, 0); }
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public TerminalNode SECOND(int i) {
			return getToken(plsqlParser.SECOND, i);
		}
		public TerminalNode DAY(int i) {
			return getToken(plsqlParser.DAY, i);
		}
		public Bind_variableContext bind_variable(int i) {
			return getRuleContext(Bind_variableContext.class,i);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(plsqlParser.SESSIONTIMEZONE, 0); }
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public TerminalNode MINUTE(int i) {
			return getToken(plsqlParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(plsqlParser.SECOND); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode DATE() { return getToken(plsqlParser.DATE, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstant(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_constant);
		int _la;
		try {
			setState(5230);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5168); match(TIMESTAMP);
				setState(5171);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5169); quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5170); bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5177);
				switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
				case 1:
					{
					setState(5173); match(AT);
					setState(5174); match(TIME);
					setState(5175); match(ZONE);
					setState(5176); quoted_string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5179); match(INTERVAL);
				setState(5183);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5180); quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5181); bind_variable();
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5182); general_element_part();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5185);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(5199);
				switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
				case 1:
					{
					setState(5186); match(LEFT_PAREN);
					setState(5189);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(5187); match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						setState(5188); bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5196);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5191); match(COMMA);
						setState(5194);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(5192); match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							setState(5193); bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(5198); match(RIGHT_PAREN);
					}
					break;
				}
				setState(5216);
				switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
				case 1:
					{
					setState(5201); match(TO);
					setState(5214);
					switch (_input.LA(1)) {
					case DAY:
						{
						setState(5202); match(DAY);
						}
						break;
					case HOUR:
						{
						setState(5203); match(HOUR);
						}
						break;
					case MINUTE:
						{
						setState(5204); match(MINUTE);
						}
						break;
					case SECOND:
						{
						setState(5205); match(SECOND);
						setState(5212);
						switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
						case 1:
							{
							setState(5206); match(LEFT_PAREN);
							setState(5209);
							switch (_input.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								setState(5207); match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								setState(5208); bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5211); match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5218); numeric();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5219); match(DATE);
				setState(5220); quoted_string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(5221); quoted_string();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(5222); match(NULL);
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5223); match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5224); match(FALSE);
				}
				break;
			case DBTIMEZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5225); match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				enterOuterAlt(_localctx, 10);
				{
				setState(5226); match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5227); match(MINVALUE);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 12);
				{
				setState(5228); match(MAXVALUE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 13);
				{
				setState(5229); match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(plsqlParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNumeric(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_numeric);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5232);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_negativeContext extends ParserRuleContext {
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode MINUS_SIGN() { return getToken(plsqlParser.MINUS_SIGN, 0); }
		public Numeric_negativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_negative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNumeric_negative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNumeric_negative(this);
		}
	}

	public final Numeric_negativeContext numeric_negative() throws RecognitionException {
		Numeric_negativeContext _localctx = new Numeric_negativeContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_numeric_negative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5234); match(MINUS_SIGN);
			setState(5235); numeric();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quoted_stringContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(plsqlParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuoted_string(this);
		}
	}

	public final Quoted_stringContext quoted_string() throws RecognitionException {
		Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_quoted_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5237);
			_la = _input.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitId(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5241);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5239); match(INTRODUCER);
				setState(5240); char_set_name();
				}
			}

			setState(5243); id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_expressionContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode DELIMITED_ID() { return getToken(plsqlParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterId_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitId_expression(this);
		}
	}

	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_id_expression);
		try {
			setState(5247);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5245); regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5246); match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Not_equal_opContext extends ParserRuleContext {
		public TerminalNode NOT_EQUAL_OP() { return getToken(plsqlParser.NOT_EQUAL_OP, 0); }
		public Not_equal_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not_equal_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNot_equal_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNot_equal_op(this);
		}
	}

	public final Not_equal_opContext not_equal_op() throws RecognitionException {
		Not_equal_opContext _localctx = new Not_equal_opContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_not_equal_op);
		try {
			setState(5256);
			switch (_input.LA(1)) {
			case NOT_EQUAL_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5249); match(NOT_EQUAL_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5250); match(LESS_THAN_OP);
				setState(5251); match(GREATER_THAN_OP);
				}
				break;
			case EXCLAMATION_OPERATOR_PART:
				enterOuterAlt(_localctx, 3);
				{
				setState(5252); match(EXCLAMATION_OPERATOR_PART);
				setState(5253); match(EQUALS_OP);
				}
				break;
			case CARRET_OPERATOR_PART:
				enterOuterAlt(_localctx, 4);
				{
				setState(5254); match(CARRET_OPERATOR_PART);
				setState(5255); match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Greater_than_or_equals_opContext extends ParserRuleContext {
		public Greater_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_greater_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGreater_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGreater_than_or_equals_op(this);
		}
	}

	public final Greater_than_or_equals_opContext greater_than_or_equals_op() throws RecognitionException {
		Greater_than_or_equals_opContext _localctx = new Greater_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_greater_than_or_equals_op);
		try {
			setState(5261);
			switch (_input.LA(1)) {
			case GREATER_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5258); match(GREATER_THAN_OR_EQUALS_OP);
				}
				break;
			case GREATER_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5259); match(GREATER_THAN_OP);
				setState(5260); match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Less_than_or_equals_opContext extends ParserRuleContext {
		public Less_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_less_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLess_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLess_than_or_equals_op(this);
		}
	}

	public final Less_than_or_equals_opContext less_than_or_equals_op() throws RecognitionException {
		Less_than_or_equals_opContext _localctx = new Less_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_less_than_or_equals_op);
		try {
			setState(5266);
			switch (_input.LA(1)) {
			case LESS_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5263); match(LESS_THAN_OR_EQUALS_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5264); match(LESS_THAN_OP);
				setState(5265); match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Concatenation_opContext extends ParserRuleContext {
		public Concatenation_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConcatenation_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConcatenation_op(this);
		}
	}

	public final Concatenation_opContext concatenation_op() throws RecognitionException {
		Concatenation_opContext _localctx = new Concatenation_opContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_concatenation_op);
		try {
			setState(5271);
			switch (_input.LA(1)) {
			case CONCATENATION_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5268); match(CONCATENATION_OP);
				}
				break;
			case VERTICAL_BAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5269); match(VERTICAL_BAR);
				setState(5270); match(VERTICAL_BAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_signContext extends ParserRuleContext {
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOuter_join_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOuter_join_sign(this);
		}
	}

	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5273); match(LEFT_PAREN);
			setState(5274); match(PLUS_SIGN);
			setState(5275); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_idContext extends ParserRuleContext {
		public TerminalNode MINUTE() { return getToken(plsqlParser.MINUTE, 0); }
		public TerminalNode INDEXED() { return getToken(plsqlParser.INDEXED, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(plsqlParser.BINARY_FLOAT, 0); }
		public TerminalNode INSTEAD() { return getToken(plsqlParser.INSTEAD, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode DEC() { return getToken(plsqlParser.DEC, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(plsqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode SHUTDOWN() { return getToken(plsqlParser.SHUTDOWN, 0); }
		public TerminalNode PARAMETERS() { return getToken(plsqlParser.PARAMETERS, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(plsqlParser.STATEMENT_ID, 0); }
		public TerminalNode TRAILING() { return getToken(plsqlParser.TRAILING, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(plsqlParser.PREDICTION_SET, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(plsqlParser.SCHEMACHECK, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode SINGLE() { return getToken(plsqlParser.SINGLE, 0); }
		public TerminalNode SELF() { return getToken(plsqlParser.SELF, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(plsqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(plsqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode XMLFOREST() { return getToken(plsqlParser.XMLFOREST, 0); }
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(plsqlParser.EXCEPTION_INIT, 0); }
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public TerminalNode PATH() { return getToken(plsqlParser.PATH, 0); }
		public TerminalNode CROSS() { return getToken(plsqlParser.CROSS, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(plsqlParser.COMPATIBILITY, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode REGULAR_ID() { return getToken(plsqlParser.REGULAR_ID, 0); }
		public TerminalNode MEDIAN() { return getToken(plsqlParser.MEDIAN, 0); }
		public TerminalNode STARTUP() { return getToken(plsqlParser.STARTUP, 0); }
		public TerminalNode UNDER() { return getToken(plsqlParser.UNDER, 0); }
		public TerminalNode CORR() { return getToken(plsqlParser.CORR, 0); }
		public TerminalNode LONG() { return getToken(plsqlParser.LONG, 0); }
		public TerminalNode LOCKED() { return getToken(plsqlParser.LOCKED, 0); }
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(plsqlParser.ATTRIBUTE, 0); }
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public TerminalNode OFF() { return getToken(plsqlParser.OFF, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public TerminalNode INCLUDE() { return getToken(plsqlParser.INCLUDE, 0); }
		public TerminalNode COMMITTED() { return getToken(plsqlParser.COMMITTED, 0); }
		public TerminalNode POSITIVEN() { return getToken(plsqlParser.POSITIVEN, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode SCN() { return getToken(plsqlParser.SCN, 0); }
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(plsqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode HIDE() { return getToken(plsqlParser.HIDE, 0); }
		public TerminalNode ITERATE() { return getToken(plsqlParser.ITERATE, 0); }
		public TerminalNode NATURALN() { return getToken(plsqlParser.NATURALN, 0); }
		public TerminalNode JOIN() { return getToken(plsqlParser.JOIN, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public TerminalNode REVERSE() { return getToken(plsqlParser.REVERSE, 0); }
		public TerminalNode BYTE() { return getToken(plsqlParser.BYTE, 0); }
		public TerminalNode C_LETTER() { return getToken(plsqlParser.C_LETTER, 0); }
		public TerminalNode DECOMPOSE() { return getToken(plsqlParser.DECOMPOSE, 0); }
		public TerminalNode AUTO() { return getToken(plsqlParser.AUTO, 0); }
		public TerminalNode BOTH() { return getToken(plsqlParser.BOTH, 0); }
		public TerminalNode SEED() { return getToken(plsqlParser.SEED, 0); }
		public TerminalNode XMLTABLE() { return getToken(plsqlParser.XMLTABLE, 0); }
		public TerminalNode CONSTANT() { return getToken(plsqlParser.CONSTANT, 0); }
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public TerminalNode REAL() { return getToken(plsqlParser.REAL, 0); }
		public TerminalNode LIKEC() { return getToken(plsqlParser.LIKEC, 0); }
		public TerminalNode CLUSTER() { return getToken(plsqlParser.CLUSTER, 0); }
		public TerminalNode MAIN() { return getToken(plsqlParser.MAIN, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(plsqlParser.XMLSERIALIZE, 0); }
		public TerminalNode SETS() { return getToken(plsqlParser.SETS, 0); }
		public TerminalNode CLOSE() { return getToken(plsqlParser.CLOSE, 0); }
		public TerminalNode XMLEXISTS() { return getToken(plsqlParser.XMLEXISTS, 0); }
		public TerminalNode XMLPI() { return getToken(plsqlParser.XMLPI, 0); }
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public TerminalNode SUM() { return getToken(plsqlParser.SUM, 0); }
		public TerminalNode CUBE() { return getToken(plsqlParser.CUBE, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(plsqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(plsqlParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode PREDICTION() { return getToken(plsqlParser.PREDICTION, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode UNTIL() { return getToken(plsqlParser.UNTIL, 0); }
		public TerminalNode DDL() { return getToken(plsqlParser.DDL, 0); }
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public TerminalNode CHR() { return getToken(plsqlParser.CHR, 0); }
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public TerminalNode AGENT() { return getToken(plsqlParser.AGENT, 0); }
		public TerminalNode REGR_() { return getToken(plsqlParser.REGR_, 0); }
		public TerminalNode NTILE() { return getToken(plsqlParser.NTILE, 0); }
		public TerminalNode A_LETTER() { return getToken(plsqlParser.A_LETTER, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode INDENT() { return getToken(plsqlParser.INDENT, 0); }
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public TerminalNode SUBTYPE() { return getToken(plsqlParser.SUBTYPE, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(plsqlParser.XMLNAMESPACES, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode EXTRACT() { return getToken(plsqlParser.EXTRACT, 0); }
		public TerminalNode PRECISION() { return getToken(plsqlParser.PRECISION, 0); }
		public TerminalNode STATEMENT() { return getToken(plsqlParser.STATEMENT, 0); }
		public TerminalNode SIGNTYPE() { return getToken(plsqlParser.SIGNTYPE, 0); }
		public TerminalNode WELLFORMED() { return getToken(plsqlParser.WELLFORMED, 0); }
		public TerminalNode MIN() { return getToken(plsqlParser.MIN, 0); }
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(plsqlParser.NOSCHEMACHECK, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public TerminalNode NAN() { return getToken(plsqlParser.NAN, 0); }
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode STRING() { return getToken(plsqlParser.STRING, 0); }
		public TerminalNode VARCHAR() { return getToken(plsqlParser.VARCHAR, 0); }
		public TerminalNode CUME_DIST() { return getToken(plsqlParser.CUME_DIST, 0); }
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode MERGE() { return getToken(plsqlParser.MERGE, 0); }
		public TerminalNode RAW() { return getToken(plsqlParser.RAW, 0); }
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public TerminalNode REFERENCING() { return getToken(plsqlParser.REFERENCING, 0); }
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(plsqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode DECREMENT() { return getToken(plsqlParser.DECREMENT, 0); }
		public TerminalNode SKIP_() { return getToken(plsqlParser.SKIP_, 0); }
		public TerminalNode CHARACTER() { return getToken(plsqlParser.CHARACTER, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode NCHAR() { return getToken(plsqlParser.NCHAR, 0); }
		public TerminalNode SHOW() { return getToken(plsqlParser.SHOW, 0); }
		public TerminalNode ERR() { return getToken(plsqlParser.ERR, 0); }
		public TerminalNode WHILE() { return getToken(plsqlParser.WHILE, 0); }
		public TerminalNode EXPLAIN() { return getToken(plsqlParser.EXPLAIN, 0); }
		public TerminalNode ESCAPE() { return getToken(plsqlParser.ESCAPE, 0); }
		public TerminalNode ROWID() { return getToken(plsqlParser.ROWID, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(plsqlParser.BINARY_INTEGER, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public TerminalNode TRANSLATE() { return getToken(plsqlParser.TRANSLATE, 0); }
		public TerminalNode FORALL() { return getToken(plsqlParser.FORALL, 0); }
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode RULES() { return getToken(plsqlParser.RULES, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(plsqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode MULTISET() { return getToken(plsqlParser.MULTISET, 0); }
		public TerminalNode UNBOUNDED() { return getToken(plsqlParser.UNBOUNDED, 0); }
		public TerminalNode EXCLUDE() { return getToken(plsqlParser.EXCLUDE, 0); }
		public TerminalNode VAR_() { return getToken(plsqlParser.VAR_, 0); }
		public TerminalNode RANK() { return getToken(plsqlParser.RANK, 0); }
		public TerminalNode ASSOCIATE() { return getToken(plsqlParser.ASSOCIATE, 0); }
		public TerminalNode CONTENT() { return getToken(plsqlParser.CONTENT, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode INLINE() { return getToken(plsqlParser.INLINE, 0); }
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode XMLPARSE() { return getToken(plsqlParser.XMLPARSE, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(plsqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(plsqlParser.RESULT_CACHE, 0); }
		public TerminalNode NOAUDIT() { return getToken(plsqlParser.NOAUDIT, 0); }
		public TerminalNode ROLLUP() { return getToken(plsqlParser.ROLLUP, 0); }
		public TerminalNode AGGREGATE() { return getToken(plsqlParser.AGGREGATE, 0); }
		public TerminalNode TRANSACTION() { return getToken(plsqlParser.TRANSACTION, 0); }
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public TerminalNode BFILE() { return getToken(plsqlParser.BFILE, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(plsqlParser.ROW_NUMBER, 0); }
		public TerminalNode LIKE4() { return getToken(plsqlParser.LIKE4, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode FAILURE() { return getToken(plsqlParser.FAILURE, 0); }
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode CANONICAL() { return getToken(plsqlParser.CANONICAL, 0); }
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public TerminalNode SQLERROR() { return getToken(plsqlParser.SQLERROR, 0); }
		public TerminalNode PRESENT() { return getToken(plsqlParser.PRESENT, 0); }
		public TerminalNode SOME() { return getToken(plsqlParser.SOME, 0); }
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public TerminalNode DECIMAL() { return getToken(plsqlParser.DECIMAL, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(plsqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode UNLIMITED() { return getToken(plsqlParser.UNLIMITED, 0); }
		public TerminalNode XMLCOLATTVAL() { return getToken(plsqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public TerminalNode CURRENT_USER() { return getToken(plsqlParser.CURRENT_USER, 0); }
		public TerminalNode ORADATA() { return getToken(plsqlParser.ORADATA, 0); }
		public TerminalNode EXECUTE() { return getToken(plsqlParser.EXECUTE, 0); }
		public TerminalNode STDDEV() { return getToken(plsqlParser.STDDEV, 0); }
		public TerminalNode ELEMENT() { return getToken(plsqlParser.ELEMENT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(plsqlParser.XMLELEMENT, 0); }
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public TerminalNode INFINITE() { return getToken(plsqlParser.INFINITE, 0); }
		public TerminalNode OVER() { return getToken(plsqlParser.OVER, 0); }
		public TerminalNode DOCUMENT() { return getToken(plsqlParser.DOCUMENT, 0); }
		public TerminalNode AVG() { return getToken(plsqlParser.AVG, 0); }
		public TerminalNode BATCH() { return getToken(plsqlParser.BATCH, 0); }
		public TerminalNode BLOCK() { return getToken(plsqlParser.BLOCK, 0); }
		public TerminalNode XMLCAST() { return getToken(plsqlParser.XMLCAST, 0); }
		public TerminalNode OSERROR() { return getToken(plsqlParser.OSERROR, 0); }
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public TerminalNode LIKE2() { return getToken(plsqlParser.LIKE2, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(plsqlParser.SEQUENTIAL, 0); }
		public TerminalNode INCLUDING() { return getToken(plsqlParser.INCLUDING, 0); }
		public TerminalNode GROUPING() { return getToken(plsqlParser.GROUPING, 0); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public TerminalNode RAISE() { return getToken(plsqlParser.RAISE, 0); }
		public TerminalNode NUMBER() { return getToken(plsqlParser.NUMBER, 0); }
		public TerminalNode LEADING() { return getToken(plsqlParser.LEADING, 0); }
		public TerminalNode AUDIT() { return getToken(plsqlParser.AUDIT, 0); }
		public TerminalNode LAST_VALUE() { return getToken(plsqlParser.LAST_VALUE, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public TerminalNode INT() { return getToken(plsqlParser.INT, 0); }
		public TerminalNode FULL() { return getToken(plsqlParser.FULL, 0); }
		public TerminalNode STATISTICS() { return getToken(plsqlParser.STATISTICS, 0); }
		public TerminalNode SUCCESS() { return getToken(plsqlParser.SUCCESS, 0); }
		public TerminalNode UPDATED() { return getToken(plsqlParser.UPDATED, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(plsqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public TerminalNode XMLROOT() { return getToken(plsqlParser.XMLROOT, 0); }
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode PARALLEL_ENABLE() { return getToken(plsqlParser.PARALLEL_ENABLE, 0); }
		public TerminalNode CONTEXT() { return getToken(plsqlParser.CONTEXT, 0); }
		public TerminalNode LEFT() { return getToken(plsqlParser.LEFT, 0); }
		public TerminalNode ARRAY() { return getToken(plsqlParser.ARRAY, 0); }
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public TerminalNode VARYING() { return getToken(plsqlParser.VARYING, 0); }
		public TerminalNode BOOLEAN() { return getToken(plsqlParser.BOOLEAN, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public TerminalNode DEFINER() { return getToken(plsqlParser.DEFINER, 0); }
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode OLD() { return getToken(plsqlParser.OLD, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode INNER() { return getToken(plsqlParser.INNER, 0); }
		public TerminalNode NOCOPY() { return getToken(plsqlParser.NOCOPY, 0); }
		public TerminalNode DEFAULTS() { return getToken(plsqlParser.DEFAULTS, 0); }
		public TerminalNode VARIABLE() { return getToken(plsqlParser.VARIABLE, 0); }
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(plsqlParser.SERIALIZABLE, 0); }
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode INTEGER() { return getToken(plsqlParser.INTEGER, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode XMLAGG() { return getToken(plsqlParser.XMLAGG, 0); }
		public TerminalNode RIGHT() { return getToken(plsqlParser.RIGHT, 0); }
		public TerminalNode ANALYZE() { return getToken(plsqlParser.ANALYZE, 0); }
		public TerminalNode OID() { return getToken(plsqlParser.OID, 0); }
		public TerminalNode SERVERERROR() { return getToken(plsqlParser.SERVERERROR, 0); }
		public TerminalNode CAST() { return getToken(plsqlParser.CAST, 0); }
		public TerminalNode ERRORS() { return getToken(plsqlParser.ERRORS, 0); }
		public TerminalNode COST() { return getToken(plsqlParser.COST, 0); }
		public TerminalNode SEGMENT() { return getToken(plsqlParser.SEGMENT, 0); }
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(plsqlParser.PLS_INTEGER, 0); }
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public TerminalNode VARRAY() { return getToken(plsqlParser.VARRAY, 0); }
		public TerminalNode WHENEVER() { return getToken(plsqlParser.WHENEVER, 0); }
		public TerminalNode SAMPLE() { return getToken(plsqlParser.SAMPLE, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(plsqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode CONVERT() { return getToken(plsqlParser.CONVERT, 0); }
		public TerminalNode LOOP() { return getToken(plsqlParser.LOOP, 0); }
		public TerminalNode NUMERIC() { return getToken(plsqlParser.NUMERIC, 0); }
		public TerminalNode STANDALONE() { return getToken(plsqlParser.STANDALONE, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(plsqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode SQLDATA() { return getToken(plsqlParser.SQLDATA, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(plsqlParser.PERCENT_RANK, 0); }
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode TREAT() { return getToken(plsqlParser.TREAT, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public TerminalNode WITHIN() { return getToken(plsqlParser.WITHIN, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(plsqlParser.DETERMINISTIC, 0); }
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(plsqlParser.FIRST_VALUE, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(plsqlParser.PREDICTION_COST, 0); }
		public TerminalNode SNAPSHOT() { return getToken(plsqlParser.SNAPSHOT, 0); }
		public TerminalNode SMALLINT() { return getToken(plsqlParser.SMALLINT, 0); }
		public TerminalNode SUBMULTISET() { return getToken(plsqlParser.SUBMULTISET, 0); }
		public TerminalNode RELIES_ON() { return getToken(plsqlParser.RELIES_ON, 0); }
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode DATA() { return getToken(plsqlParser.DATA, 0); }
		public TerminalNode EACH() { return getToken(plsqlParser.EACH, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public TerminalNode LEAD() { return getToken(plsqlParser.LEAD, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(plsqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode BLOB() { return getToken(plsqlParser.BLOB, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public TerminalNode INDICATOR() { return getToken(plsqlParser.INDICATOR, 0); }
		public TerminalNode CORRUPT_XID() { return getToken(plsqlParser.CORRUPT_XID, 0); }
		public TerminalNode LOG() { return getToken(plsqlParser.LOG, 0); }
		public TerminalNode LOGON() { return getToken(plsqlParser.LOGON, 0); }
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public TerminalNode NONE() { return getToken(plsqlParser.NONE, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode ORDINALITY() { return getToken(plsqlParser.ORDINALITY, 0); }
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode AUTOMATIC() { return getToken(plsqlParser.AUTOMATIC, 0); }
		public TerminalNode NVARCHAR2() { return getToken(plsqlParser.NVARCHAR2, 0); }
		public TerminalNode PARENT() { return getToken(plsqlParser.PARENT, 0); }
		public TerminalNode RECORD() { return getToken(plsqlParser.RECORD, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(plsqlParser.DISASSOCIATE, 0); }
		public TerminalNode VARIANCE() { return getToken(plsqlParser.VARIANCE, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(plsqlParser.CONSTRAINTS, 0); }
		public TerminalNode PASSING() { return getToken(plsqlParser.PASSING, 0); }
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(plsqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode AUTHID() { return getToken(plsqlParser.AUTHID, 0); }
		public TerminalNode SIBLINGS() { return getToken(plsqlParser.SIBLINGS, 0); }
		public TerminalNode DOUBLE() { return getToken(plsqlParser.DOUBLE, 0); }
		public TerminalNode FLOAT() { return getToken(plsqlParser.FLOAT, 0); }
		public TerminalNode NAV() { return getToken(plsqlParser.NAV, 0); }
		public TerminalNode VERSIONS() { return getToken(plsqlParser.VERSIONS, 0); }
		public TerminalNode PRECEDING() { return getToken(plsqlParser.PRECEDING, 0); }
		public TerminalNode VARCHAR2() { return getToken(plsqlParser.VARCHAR2, 0); }
		public TerminalNode LIBRARY() { return getToken(plsqlParser.LIBRARY, 0); }
		public TerminalNode POSITIVE() { return getToken(plsqlParser.POSITIVE, 0); }
		public TerminalNode CLOB() { return getToken(plsqlParser.CLOB, 0); }
		public TerminalNode ENCODING() { return getToken(plsqlParser.ENCODING, 0); }
		public TerminalNode NESTED() { return getToken(plsqlParser.NESTED, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public TerminalNode OVERRIDING() { return getToken(plsqlParser.OVERRIDING, 0); }
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(plsqlParser.DBTIMEZONE, 0); }
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public TerminalNode REJECT() { return getToken(plsqlParser.REJECT, 0); }
		public TerminalNode LOGOFF() { return getToken(plsqlParser.LOGOFF, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode COLUMNS() { return getToken(plsqlParser.COLUMNS, 0); }
		public TerminalNode MLSLABEL() { return getToken(plsqlParser.MLSLABEL, 0); }
		public TerminalNode INOUT() { return getToken(plsqlParser.INOUT, 0); }
		public TerminalNode EMPTY() { return getToken(plsqlParser.EMPTY, 0); }
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode COUNT() { return getToken(plsqlParser.COUNT, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public TerminalNode SAVE() { return getToken(plsqlParser.SAVE, 0); }
		public TerminalNode HOUR() { return getToken(plsqlParser.HOUR, 0); }
		public TerminalNode USE() { return getToken(plsqlParser.USE, 0); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public TerminalNode YES() { return getToken(plsqlParser.YES, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode RESPECT() { return getToken(plsqlParser.RESPECT, 0); }
		public TerminalNode INDICES() { return getToken(plsqlParser.INDICES, 0); }
		public TerminalNode ISOLATION() { return getToken(plsqlParser.ISOLATION, 0); }
		public TerminalNode FOLLOWING() { return getToken(plsqlParser.FOLLOWING, 0); }
		public TerminalNode INVALIDATE() { return getToken(plsqlParser.INVALIDATE, 0); }
		public TerminalNode MEASURES() { return getToken(plsqlParser.MEASURES, 0); }
		public TerminalNode CHAR_CS() { return getToken(plsqlParser.CHAR_CS, 0); }
		public TerminalNode NCLOB() { return getToken(plsqlParser.NCLOB, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(plsqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode OUTER() { return getToken(plsqlParser.OUTER, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode NCHAR_CS() { return getToken(plsqlParser.NCHAR_CS, 0); }
		public TerminalNode PLAN() { return getToken(plsqlParser.PLAN, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(plsqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(plsqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(plsqlParser.CUSTOMDATUM, 0); }
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public TerminalNode WARNING() { return getToken(plsqlParser.WARNING, 0); }
		public TerminalNode PIPELINED() { return getToken(plsqlParser.PIPELINED, 0); }
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public TerminalNode XML() { return getToken(plsqlParser.XML, 0); }
		public TerminalNode LAG() { return getToken(plsqlParser.LAG, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode LEVEL() { return getToken(plsqlParser.LEVEL, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode SUSPEND() { return getToken(plsqlParser.SUSPEND, 0); }
		public TerminalNode TRIM() { return getToken(plsqlParser.TRIM, 0); }
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public TerminalNode MAX() { return getToken(plsqlParser.MAX, 0); }
		public TerminalNode VALIDATE() { return getToken(plsqlParser.VALIDATE, 0); }
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public TerminalNode HASH() { return getToken(plsqlParser.HASH, 0); }
		public TerminalNode DEFERRED() { return getToken(plsqlParser.DEFERRED, 0); }
		public TerminalNode UROWID() { return getToken(plsqlParser.UROWID, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode COVAR_() { return getToken(plsqlParser.COVAR_, 0); }
		public TerminalNode XMLQUERY() { return getToken(plsqlParser.XMLQUERY, 0); }
		public TerminalNode LISTAGG() { return getToken(plsqlParser.LISTAGG, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRegular_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRegular_id(this);
		}
	}

	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_regular_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5277);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION_INIT - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)) | (1L << (KEEP - 129)) | (1L << (LANGUAGE - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)) | (1L << (NUMERIC - 193)) | (1L << (NVARCHAR2 - 193)) | (1L << (OBJECT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)) | (1L << (RESULT_CACHE - 258)) | (1L << (RETURN - 258)) | (1L << (RETURNING - 258)) | (1L << (REUSE - 258)) | (1L << (REVERSE - 258)) | (1L << (RIGHT - 258)) | (1L << (ROLLBACK - 258)) | (1L << (ROLLUP - 258)) | (1L << (ROW - 258)) | (1L << (ROWID - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)) | (1L << (TIME - 322)) | (1L << (TIMESTAMP - 322)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 322)) | (1L << (TIMESTAMP_UNCONSTRAINED - 322)) | (1L << (TIMEZONE_ABBR - 322)) | (1L << (TIMEZONE_HOUR - 322)) | (1L << (TIMEZONE_MINUTE - 322)) | (1L << (TIMEZONE_REGION - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (TRAILING - 387)) | (1L << (TRANSACTION - 387)) | (1L << (TRANSLATE - 387)) | (1L << (TREAT - 387)) | (1L << (TRIGGER - 387)) | (1L << (TRIM - 387)) | (1L << (TRUNCATE - 387)) | (1L << (TYPE - 387)) | (1L << (UNBOUNDED - 387)) | (1L << (UNDER - 387)) | (1L << (UNLIMITED - 387)) | (1L << (UNTIL - 387)) | (1L << (UPDATED - 387)) | (1L << (UPSERT - 387)) | (1L << (UROWID - 387)) | (1L << (USE - 387)) | (1L << (VALIDATE - 387)) | (1L << (VALUE - 387)) | (1L << (VARCHAR - 387)) | (1L << (VARCHAR2 - 387)) | (1L << (VARIABLE - 387)) | (1L << (VARRAY - 387)) | (1L << (VARYING - 387)) | (1L << (VERSION - 387)) | (1L << (VERSIONS - 387)) | (1L << (WAIT - 387)) | (1L << (WARNING - 387)) | (1L << (WELLFORMED - 387)) | (1L << (WHENEVER - 387)) | (1L << (WHILE - 387)) | (1L << (WITHIN - 387)) | (1L << (WORK - 387)) | (1L << (WRITE - 387)) | (1L << (XML - 387)) | (1L << (XMLAGG - 387)) | (1L << (XMLATTRIBUTES - 387)) | (1L << (XMLCAST - 387)) | (1L << (XMLCOLATTVAL - 387)) | (1L << (XMLELEMENT - 387)) | (1L << (XMLEXISTS - 387)) | (1L << (XMLFOREST - 387)) | (1L << (XMLNAMESPACES - 387)) | (1L << (XMLPARSE - 387)) | (1L << (XMLPI - 387)) | (1L << (XMLQUERY - 387)) | (1L << (XMLROOT - 387)) | (1L << (XMLSERIALIZE - 387)) | (1L << (XMLTABLE - 387)) | (1L << (YEAR - 387)) | (1L << (YES - 387)) | (1L << (YMINTERVAL_UNCONSTRAINED - 387)) | (1L << (ZONE - 387)) | (1L << (PREDICTION - 387)) | (1L << (PREDICTION_BOUNDS - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PREDICTION_COST - 451)) | (1L << (PREDICTION_DETAILS - 451)) | (1L << (PREDICTION_PROBABILITY - 451)) | (1L << (PREDICTION_SET - 451)) | (1L << (CUME_DIST - 451)) | (1L << (DENSE_RANK - 451)) | (1L << (LISTAGG - 451)) | (1L << (PERCENT_RANK - 451)) | (1L << (PERCENTILE_CONT - 451)) | (1L << (PERCENTILE_DISC - 451)) | (1L << (RANK - 451)) | (1L << (AVG - 451)) | (1L << (CORR - 451)) | (1L << (LAG - 451)) | (1L << (LEAD - 451)) | (1L << (MAX - 451)) | (1L << (MEDIAN - 451)) | (1L << (MIN - 451)) | (1L << (NTILE - 451)) | (1L << (RATIO_TO_REPORT - 451)) | (1L << (ROW_NUMBER - 451)) | (1L << (SUM - 451)) | (1L << (VARIANCE - 451)) | (1L << (REGR_ - 451)) | (1L << (STDDEV - 451)) | (1L << (VAR_ - 451)) | (1L << (COVAR_ - 451)))) != 0) || _la==REGULAR_ID) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u0267\u14a2\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\3\2\6\2\u02fc\n\2\r\2\16\2\u02fd\3\3\7\3\u0301\n\3\f"+
		"\3\16\3\u0304\13\3\3\3\3\3\3\4\3\4\7\4\u030a\n\4\f\4\16\4\u030d\13\4\3"+
		"\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5"+
		"\3\5\3\5\3\5\5\5\u0324\n\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\5\7"+
		"\u0330\n\7\3\7\7\7\u0333\n\7\f\7\16\7\u0336\13\7\3\7\3\7\5\7\u033a\n\7"+
		"\3\7\3\7\3\b\3\b\3\b\5\b\u0341\n\b\5\b\u0343\n\b\3\b\3\b\3\b\3\b\3\b\3"+
		"\b\7\b\u034b\n\b\f\b\16\b\u034e\13\b\3\b\3\b\5\b\u0352\n\b\3\b\3\b\3\b"+
		"\3\b\3\b\3\b\7\b\u035a\n\b\f\b\16\b\u035d\13\b\3\b\5\b\u0360\n\b\3\b\3"+
		"\b\5\b\u0364\n\b\3\b\7\b\u0367\n\b\f\b\16\b\u036a\13\b\3\b\3\b\5\b\u036e"+
		"\n\b\3\b\3\b\3\b\5\b\u0373\n\b\3\b\3\b\3\t\3\t\5\t\u0379\n\t\3\n\3\n\3"+
		"\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\7\n\u0385\n\n\f\n\16\n\u0388\13\n\3\n\3"+
		"\n\5\n\u038c\n\n\3\n\5\n\u038f\n\n\3\n\3\n\3\13\3\13\5\13\u0395\n\13\3"+
		"\f\3\f\3\f\3\f\3\f\7\f\u039c\n\f\f\f\16\f\u039f\13\f\3\f\3\f\3\r\3\r\3"+
		"\r\3\r\3\r\3\r\3\r\7\r\u03aa\n\r\f\r\16\r\u03ad\13\r\3\r\3\r\3\16\3\16"+
		"\3\16\5\16\u03b4\n\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\5\17\u03be"+
		"\n\17\3\17\5\17\u03c1\n\17\3\17\7\17\u03c4\n\17\f\17\16\17\u03c7\13\17"+
		"\3\17\3\17\5\17\u03cb\n\17\3\17\3\17\3\20\3\20\3\20\5\20\u03d2\n\20\3"+
		"\20\3\20\3\20\5\20\u03d7\n\20\3\20\3\20\3\21\3\21\3\21\3\21\7\21\u03df"+
		"\n\21\f\21\16\21\u03e2\13\21\3\21\3\21\3\21\3\21\5\21\u03e8\n\21\5\21"+
		"\u03ea\n\21\3\22\3\22\5\22\u03ee\n\22\3\22\3\22\7\22\u03f2\n\22\f\22\16"+
		"\22\u03f5\13\22\3\22\3\22\5\22\u03f9\n\22\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\3\23\5\23\u0404\n\23\3\24\3\24\3\24\3\24\3\24\3\24\7\24\u040c"+
		"\n\24\f\24\16\24\u040f\13\24\3\24\3\24\5\24\u0413\n\24\3\24\3\24\3\25"+
		"\3\25\3\25\3\25\3\25\3\25\7\25\u041d\n\25\f\25\16\25\u0420\13\25\3\25"+
		"\3\25\5\25\u0424\n\25\3\25\3\25\3\25\5\25\u0429\n\25\3\25\5\25\u042c\n"+
		"\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u043a"+
		"\n\26\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\5\30\u0446\n\30"+
		"\3\30\7\30\u0449\n\30\f\30\16\30\u044c\13\30\3\30\3\30\5\30\u0450\n\30"+
		"\3\30\3\30\3\31\3\31\3\31\5\31\u0457\n\31\5\31\u0459\n\31\3\31\3\31\3"+
		"\31\3\31\3\31\3\31\7\31\u0461\n\31\f\31\16\31\u0464\13\31\3\31\3\31\5"+
		"\31\u0468\n\31\3\31\5\31\u046b\n\31\3\31\3\31\5\31\u046f\n\31\3\31\7\31"+
		"\u0472\n\31\f\31\16\31\u0475\13\31\3\31\3\31\3\31\5\31\u047a\n\31\3\31"+
		"\3\31\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33"+
		"\3\33\5\33\u048c\n\33\3\33\7\33\u048f\n\33\f\33\16\33\u0492\13\33\3\33"+
		"\3\33\5\33\u0496\n\33\5\33\u0498\n\33\3\33\3\33\3\34\3\34\3\34\5\34\u049f"+
		"\n\34\3\34\3\34\3\34\3\34\3\34\5\34\u04a6\n\34\3\34\5\34\u04a9\n\34\3"+
		"\34\5\34\u04ac\n\34\3\34\5\34\u04af\n\34\3\34\3\34\3\34\3\35\3\35\3\35"+
		"\3\35\7\35\u04b8\n\35\f\35\16\35\u04bb\13\35\3\36\3\36\3\36\3\36\3\36"+
		"\3\37\3\37\3\37\3\37\5\37\u04c6\n\37\3\37\3\37\5\37\u04ca\n\37\3\37\5"+
		"\37\u04cd\n\37\3 \3 \3 \3 \3!\3!\3!\5!\u04d6\n!\3\"\3\"\3\"\3\"\7\"\u04dc"+
		"\n\"\f\"\16\"\u04df\13\"\3\"\3\"\3\"\3\"\3\"\5\"\u04e6\n\"\3\"\5\"\u04e9"+
		"\n\"\3#\3#\3#\3#\3#\5#\u04f0\n#\3$\3$\5$\u04f4\n$\3%\3%\3%\7%\u04f9\n"+
		"%\f%\16%\u04fc\13%\3%\6%\u04ff\n%\r%\16%\u0500\3%\3%\3%\3&\3&\3&\3&\3"+
		"&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3"+
		"&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u052a\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'"+
		"\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3"+
		"\'\5\'\u0546\n\'\3(\3(\3(\7(\u054b\n(\f(\16(\u054e\13(\3(\3(\5(\u0552"+
		"\n(\3(\3(\3)\3)\3)\3)\3)\7)\u055b\n)\f)\16)\u055e\13)\5)\u0560\n)\3*\3"+
		"*\3*\3*\3*\3+\3+\6+\u0569\n+\r+\16+\u056a\3,\3,\3,\3-\3-\3-\5-\u0573\n"+
		"-\3-\3-\5-\u0577\n-\3-\3-\3.\3.\3.\3.\3.\3.\3.\3.\5.\u0583\n.\3.\5.\u0586"+
		"\n.\3.\3.\3/\3/\5/\u058c\n/\3/\5/\u058f\n/\3/\7/\u0592\n/\f/\16/\u0595"+
		"\13/\3/\3/\5/\u0599\n/\3\60\3\60\5\60\u059d\n\60\3\60\3\60\3\60\3\60\3"+
		"\60\3\60\7\60\u05a5\n\60\f\60\16\60\u05a8\13\60\3\60\3\60\3\61\3\61\3"+
		"\61\7\61\u05af\n\61\f\61\16\61\u05b2\13\61\3\62\3\62\3\62\5\62\u05b7\n"+
		"\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\7\63\u05c0\n\63\f\63\16\63\u05c3"+
		"\13\63\3\63\3\63\5\63\u05c7\n\63\3\64\3\64\5\64\u05cb\n\64\3\65\3\65\3"+
		"\65\3\65\3\65\3\65\5\65\u05d3\n\65\3\66\3\66\3\66\3\66\3\66\3\66\5\66"+
		"\u05db\n\66\3\66\3\66\3\66\5\66\u05e0\n\66\3\66\5\66\u05e3\n\66\5\66\u05e5"+
		"\n\66\3\67\5\67\u05e8\n\67\3\67\3\67\3\67\3\67\38\38\38\58\u05f1\n8\3"+
		"8\38\38\58\u05f6\n8\38\38\39\39\39\59\u05fd\n9\39\59\u0600\n9\3:\5:\u0603"+
		"\n:\3:\3:\5:\u0607\n:\3:\5:\u060a\n:\3:\3:\3:\3:\7:\u0610\n:\f:\16:\u0613"+
		"\13:\3:\3:\5:\u0617\n:\3:\7:\u061a\n:\f:\16:\u061d\13:\3;\3;\3;\3;\5;"+
		"\u0623\n;\3<\3<\3<\3=\3=\3=\3=\3=\5=\u062d\n=\3>\3>\3>\3>\3>\3>\3>\3>"+
		"\3?\3?\3?\3?\6?\u063b\n?\r?\16?\u063c\3?\3?\3@\3@\5@\u0643\n@\3A\3A\3"+
		"A\3A\3B\3B\3B\3B\5B\u064d\nB\3C\3C\3C\3C\3C\3C\7C\u0655\nC\fC\16C\u0658"+
		"\13C\3C\3C\3C\3C\5C\u065e\nC\3C\7C\u0661\nC\fC\16C\u0664\13C\3C\3C\3C"+
		"\5C\u0669\nC\3D\3D\3D\3D\3D\3D\7D\u0671\nD\fD\16D\u0674\13D\3D\3D\5D\u0678"+
		"\nD\3D\3D\3D\3D\3D\5D\u067f\nD\3D\7D\u0682\nD\fD\16D\u0685\13D\3D\3D\3"+
		"D\5D\u068a\nD\3E\5E\u068d\nE\3E\5E\u0690\nE\3E\3E\3E\3E\3E\3E\3E\3E\3"+
		"E\3E\3E\3E\3E\7E\u069f\nE\fE\16E\u06a2\13E\3E\3E\5E\u06a6\nE\3E\3E\3E"+
		"\3E\3E\3E\3E\5E\u06af\nE\3E\7E\u06b2\nE\fE\16E\u06b5\13E\3E\3E\3E\5E\u06ba"+
		"\nE\3F\5F\u06bd\nF\3F\3F\3G\3G\3G\5G\u06c4\nG\3G\5G\u06c7\nG\3H\3H\3H"+
		"\3H\3I\5I\u06ce\nI\3I\6I\u06d1\nI\rI\16I\u06d2\3I\3I\5I\u06d7\nI\3J\3"+
		"J\3J\5J\u06dc\nJ\3K\3K\3K\5K\u06e1\nK\3L\3L\3L\3L\3L\3L\7L\u06e9\nL\f"+
		"L\16L\u06ec\13L\3L\3L\3L\5L\u06f1\nL\3M\3M\3M\3M\3M\3M\7M\u06f9\nM\fM"+
		"\16M\u06fc\13M\3M\3M\5M\u0700\nM\3M\3M\3M\3M\3M\5M\u0707\nM\3M\3M\3M\3"+
		"M\5M\u070d\nM\3M\3M\5M\u0711\nM\3N\5N\u0714\nN\3N\5N\u0717\nN\3N\3N\3"+
		"N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\7N\u0726\nN\fN\16N\u0729\13N\3N\3N\5N"+
		"\u072d\nN\3N\3N\3N\3N\3N\3N\5N\u0735\nN\3O\3O\3O\3O\3P\3P\3P\3P\3P\3P"+
		"\7P\u0741\nP\fP\16P\u0744\13P\3P\3P\3Q\3Q\5Q\u074a\nQ\3R\3R\3R\3S\3S\3"+
		"S\3S\3S\3T\3T\3T\3T\6T\u0758\nT\rT\16T\u0759\3T\3T\3U\3U\3U\3U\3U\7U\u0763"+
		"\nU\fU\16U\u0766\13U\3U\3U\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3"+
		"V\3V\5V\u077a\nV\3W\3W\3W\3W\3X\3X\3X\3Y\3Y\3Y\3Y\3Z\3Z\3Z\5Z\u078a\n"+
		"Z\3[\3[\3[\3[\3\\\3\\\3\\\5\\\u0793\n\\\3\\\3\\\3\\\5\\\u0798\n\\\3\\"+
		"\3\\\5\\\u079c\n\\\3\\\5\\\u079f\n\\\3]\3]\3]\3]\3]\3]\7]\u07a7\n]\f]"+
		"\16]\u07aa\13]\3]\3]\3^\3^\3^\3^\3^\7^\u07b3\n^\f^\16^\u07b6\13^\3^\3"+
		"^\3^\5^\u07bb\n^\3^\3^\3_\3_\7_\u07c1\n_\f_\16_\u07c4\13_\3_\5_\u07c7"+
		"\n_\3_\5_\u07ca\n_\3`\3`\3`\3a\3a\3a\3a\3a\3a\3a\3a\3a\5a\u07d8\na\3b"+
		"\3b\5b\u07dc\nb\3b\3b\3b\5b\u07e1\nb\3b\5b\u07e4\nb\3b\3b\3c\3c\3c\3c"+
		"\3c\3c\3c\3c\3c\5c\u07f1\nc\3c\3c\5c\u07f5\nc\3c\3c\3d\3d\3d\3d\3d\3d"+
		"\7d\u07ff\nd\fd\16d\u0802\13d\3d\3d\5d\u0806\nd\3d\3d\5d\u080a\nd\3d\3"+
		"d\5d\u080e\nd\3d\3d\3e\3e\5e\u0814\ne\3e\5e\u0817\ne\3e\5e\u081a\ne\3"+
		"f\3f\3f\3f\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3"+
		"g\3g\5g\u0835\ng\3g\3g\6g\u0839\ng\rg\16g\u083a\3g\3g\5g\u083f\ng\3g\3"+
		"g\3h\3h\5h\u0845\nh\3i\3i\3i\3i\3i\3i\3i\3i\7i\u084f\ni\fi\16i\u0852\13"+
		"i\3i\3i\3i\3i\3i\3i\5i\u085a\ni\5i\u085c\ni\3i\3i\3j\3j\5j\u0862\nj\3"+
		"j\3j\5j\u0866\nj\3j\5j\u0869\nj\3k\3k\3k\3k\3k\3l\3l\5l\u0872\nl\3l\3"+
		"l\3m\3m\3m\3m\3m\3m\3m\5m\u087d\nm\3m\3m\5m\u0881\nm\3m\5m\u0884\nm\3"+
		"n\3n\5n\u0888\nn\3n\3n\3n\3o\3o\3o\5o\u0890\no\3o\3o\3o\3o\3o\3o\3o\5"+
		"o\u0899\no\3p\3p\3p\3q\3q\3q\3q\6q\u08a2\nq\rq\16q\u08a3\3r\3r\3r\3r\3"+
		"r\3r\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3"+
		"s\3s\5s\u08c3\ns\3t\3t\5t\u08c7\nt\3t\3t\3t\3u\3u\5u\u08ce\nu\3u\3u\5"+
		"u\u08d2\nu\3v\3v\5v\u08d6\nv\3v\3v\5v\u08da\nv\3w\3w\3w\3x\3x\3x\3x\3"+
		"x\7x\u08e4\nx\fx\16x\u08e7\13x\3x\5x\u08ea\nx\3x\3x\3x\3y\3y\3y\3y\3y"+
		"\3z\3z\3z\3{\5{\u08f8\n{\3{\3{\3{\3{\5{\u08fe\n{\3{\3{\3{\3{\3{\5{\u0905"+
		"\n{\3|\3|\3|\5|\u090a\n|\3|\3|\3|\3|\3|\3|\3|\3|\5|\u0914\n|\3|\3|\3|"+
		"\3|\5|\u091a\n|\5|\u091c\n|\3}\3}\3}\3}\3}\3}\3}\5}\u0925\n}\3~\3~\3~"+
		"\3~\3~\3~\3~\3~\5~\u092f\n~\3~\3~\3~\5~\u0934\n~\3\177\3\177\3\177\3\177"+
		"\3\177\3\u0080\3\u0080\3\u0081\3\u0081\3\u0082\3\u0082\3\u0083\3\u0083"+
		"\5\u0083\u0943\n\u0083\3\u0084\3\u0084\5\u0084\u0947\n\u0084\3\u0085\5"+
		"\u0085\u094a\n\u0085\3\u0085\3\u0085\5\u0085\u094e\n\u0085\3\u0086\3\u0086"+
		"\7\u0086\u0952\n\u0086\f\u0086\16\u0086\u0955\13\u0086\3\u0086\3\u0086"+
		"\5\u0086\u0959\n\u0086\3\u0087\3\u0087\6\u0087\u095d\n\u0087\r\u0087\16"+
		"\u0087\u095e\3\u0088\3\u0088\3\u0088\3\u0088\7\u0088\u0965\n\u0088\f\u0088"+
		"\16\u0088\u0968\13\u0088\3\u0088\3\u0088\3\u0088\3\u0089\5\u0089\u096e"+
		"\n\u0089\3\u0089\6\u0089\u0971\n\u0089\r\u0089\16\u0089\u0972\5\u0089"+
		"\u0975\n\u0089\3\u0089\3\u0089\3\u008a\5\u008a\u097a\n\u008a\3\u008a\6"+
		"\u008a\u097d\n\u008a\r\u008a\16\u008a\u097e\3\u008a\3\u008a\3\u008b\3"+
		"\u008b\3\u008b\3\u008b\5\u008b\u0987\n\u008b\3\u008c\3\u008c\3\u008c\3"+
		"\u008c\3\u008c\5\u008c\u098e\n\u008c\3\u008c\3\u008c\5\u008c\u0992\n\u008c"+
		"\3\u008c\5\u008c\u0995\n\u008c\3\u008d\3\u008d\3\u008d\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u09a1\n\u008e\3\u008f"+
		"\3\u008f\3\u008f\3\u008f\5\u008f\u09a7\n\u008f\3\u0090\3\u0090\3\u0090"+
		"\3\u0091\3\u0091\3\u0091\5\u0091\u09af\n\u0091\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\7\u0092\u09b7\n\u0092\f\u0092\16\u0092\u09ba"+
		"\13\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\7\u0092\u09c2"+
		"\n\u0092\f\u0092\16\u0092\u09c5\13\u0092\5\u0092\u09c7\n\u0092\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u09ce\n\u0093\3\u0093\5\u0093"+
		"\u09d1\n\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u09d8\n"+
		"\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\5\u0095\u09e3\n\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095"+
		"\u09e9\n\u0095\3\u0095\3\u0095\5\u0095\u09ed\n\u0095\3\u0096\3\u0096\3"+
		"\u0096\3\u0096\3\u0096\3\u0096\7\u0096\u09f5\n\u0096\f\u0096\16\u0096"+
		"\u09f8\13\u0096\5\u0096\u09fa\n\u0096\3\u0096\3\u0096\3\u0097\3\u0097"+
		"\5\u0097\u0a00\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\5\u0097\u0a0b\n\u0097\5\u0097\u0a0d\n\u0097\5"+
		"\u0097\u0a0f\n\u0097\3\u0097\5\u0097\u0a12\n\u0097\3\u0098\3\u0098\5\u0098"+
		"\u0a16\n\u0098\3\u0098\5\u0098\u0a19\n\u0098\3\u0099\3\u0099\5\u0099\u0a1d"+
		"\n\u0099\3\u0099\3\u0099\5\u0099\u0a21\n\u0099\3\u0099\3\u0099\3\u0099"+
		"\5\u0099\u0a26\n\u0099\3\u009a\3\u009a\3\u009a\3\u009b\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\3\u009b\5\u009b\u0a31\n\u009b\3\u009b\3\u009b\5\u009b"+
		"\u0a35\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b"+
		"\u0a3d\n\u009b\3\u009c\5\u009c\u0a40\n\u009c\3\u009c\3\u009c\3\u009c\7"+
		"\u009c\u0a45\n\u009c\f\u009c\16\u009c\u0a48\13\u009c\3\u009d\3\u009d\3"+
		"\u009d\3\u009d\7\u009d\u0a4e\n\u009d\f\u009d\16\u009d\u0a51\13\u009d\3"+
		"\u009e\3\u009e\3\u009e\3\u009e\3\u009e\7\u009e\u0a58\n\u009e\f\u009e\16"+
		"\u009e\u0a5b\13\u009e\3\u009e\3\u009e\5\u009e\u0a5f\n\u009e\3\u009e\3"+
		"\u009e\3\u009e\3\u009e\5\u009e\u0a65\n\u009e\3\u009e\3\u009e\5\u009e\u0a69"+
		"\n\u009e\3\u009e\5\u009e\u0a6c\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\5\u009f\u0a74\n\u009f\3\u009f\5\u009f\u0a77\n\u009f\3"+
		"\u009f\3\u009f\5\u009f\u0a7b\n\u009f\3\u009f\3\u009f\5\u009f\u0a7f\n\u009f"+
		"\3\u009f\3\u009f\3\u009f\5\u009f\u0a84\n\u009f\3\u009f\5\u009f\u0a87\n"+
		"\u009f\3\u009f\3\u009f\5\u009f\u0a8b\n\u009f\3\u009f\3\u009f\5\u009f\u0a8f"+
		"\n\u009f\7\u009f\u0a91\n\u009f\f\u009f\16\u009f\u0a94\13\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\7\u00a0\u0a9d\n\u00a0"+
		"\f\u00a0\16\u00a0\u0aa0\13\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\3\u00a0\3\u00a1\3\u00a1\7\u00a1\u0aab\n\u00a1\f\u00a1\16\u00a1"+
		"\u0aae\13\u00a1\3\u00a2\3\u00a2\5\u00a2\u0ab2\n\u00a2\3\u00a2\3\u00a2"+
		"\5\u00a2\u0ab6\n\u00a2\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\5\u00a3\u0abf\n\u00a3\3\u00a4\3\u00a4\5\u00a4\u0ac3\n\u00a4\3"+
		"\u00a4\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u0ac9\n\u00a4\f\u00a4\16\u00a4"+
		"\u0acc\13\u00a4\5\u00a4\u0ace\n\u00a4\3\u00a4\5\u00a4\u0ad1\n\u00a4\3"+
		"\u00a4\3\u00a4\5\u00a4\u0ad5\n\u00a4\3\u00a4\5\u00a4\u0ad8\n\u00a4\3\u00a4"+
		"\5\u00a4\u0adb\n\u00a4\3\u00a4\5\u00a4\u0ade\n\u00a4\3\u00a5\3\u00a5\5"+
		"\u00a5\u0ae2\n\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a7\3"+
		"\u00a7\3\u00a7\5\u00a7\u0aec\n\u00a7\3\u00a8\3\u00a8\3\u00a8\7\u00a8\u0af1"+
		"\n\u00a8\f\u00a8\16\u00a8\u0af4\13\u00a8\3\u00a9\3\u00a9\7\u00a9\u0af8"+
		"\n\u00a9\f\u00a9\16\u00a9\u0afb\13\u00a9\3\u00a9\3\u00a9\5\u00a9\u0aff"+
		"\n\u00a9\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0b04\n\u00aa\3\u00aa\3\u00aa"+
		"\3\u00aa\7\u00aa\u0b09\n\u00aa\f\u00aa\16\u00aa\u0b0c\13\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\5\u00aa\u0b11\n\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0b1b\n\u00aa\5\u00aa\u0b1d\n"+
		"\u00aa\3\u00aa\7\u00aa\u0b20\n\u00aa\f\u00aa\16\u00aa\u0b23\13\u00aa\3"+
		"\u00aa\5\u00aa\u0b26\n\u00aa\3\u00ab\5\u00ab\u0b29\n\u00ab\3\u00ab\5\u00ab"+
		"\u0b2c\n\u00ab\3\u00ab\3\u00ab\5\u00ab\u0b30\n\u00ab\3\u00ab\3\u00ab\3"+
		"\u00ab\5\u00ab\u0b35\n\u00ab\3\u00ab\3\u00ab\7\u00ab\u0b39\n\u00ab\f\u00ab"+
		"\16\u00ab\u0b3c\13\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\7\u00ad\u0b46\n\u00ad\f\u00ad\16\u00ad\u0b49\13\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ae\3\u00ae\5\u00ae\u0b4f\n\u00ae\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\7\u00af"+
		"\u0b5b\n\u00af\f\u00af\16\u00af\u0b5e\13\u00af\5\u00af\u0b60\n\u00af\3"+
		"\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0"+
		"\u0b6a\n\u00b0\3\u00b1\3\u00b1\5\u00b1\u0b6e\n\u00b1\3\u00b1\3\u00b1\3"+
		"\u00b1\3\u00b1\7\u00b1\u0b74\n\u00b1\f\u00b1\16\u00b1\u0b77\13\u00b1\3"+
		"\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\5\u00b2\u0b82\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\7\u00b3\u0b8a\n\u00b3\f\u00b3\16\u00b3\u0b8d\13\u00b3\3\u00b3\3\u00b3"+
		"\5\u00b3\u0b91\n\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\7\u00b4\u0b99\n\u00b4\f\u00b4\16\u00b4\u0b9c\13\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\7\u00b4\u0ba1\n\u00b4\f\u00b4\16\u00b4\u0ba4\13\u00b4\5\u00b4"+
		"\u0ba6\n\u00b4\3\u00b4\3\u00b4\3\u00b5\3\u00b5\5\u00b5\u0bac\n\u00b5\3"+
		"\u00b6\3\u00b6\5\u00b6\u0bb0\n\u00b6\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0bb5"+
		"\n\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\7\u00b7\u0bbd"+
		"\n\u00b7\f\u00b7\16\u00b7\u0bc0\13\u00b7\3\u00b7\3\u00b7\5\u00b7\u0bc4"+
		"\n\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\7\u00b8\u0bcf\n\u00b8\f\u00b8\16\u00b8\u0bd2\13\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\7\u00b9\u0bdb\n\u00b9"+
		"\f\u00b9\16\u00b9\u0bde\13\u00b9\3\u00b9\3\u00b9\5\u00b9\u0be2\n\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\7\u00b9\u0bea\n\u00b9"+
		"\f\u00b9\16\u00b9\u0bed\13\u00b9\3\u00b9\3\u00b9\5\u00b9\u0bf1\n\u00b9"+
		"\5\u00b9\u0bf3\n\u00b9\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u0bf8\n\u00ba\3"+
		"\u00ba\3\u00ba\5\u00ba\u0bfc\n\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5"+
		"\u00ba\u0c02\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u0c06\n\u00ba\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u0c11"+
		"\n\u00bc\f\u00bc\16\u00bc\u0c14\13\u00bc\3\u00bc\5\u00bc\u0c17\n\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u0c1f\n\u00bc"+
		"\f\u00bc\16\u00bc\u0c22\13\u00bc\5\u00bc\u0c24\n\u00bc\5\u00bc\u0c26\n"+
		"\u00bc\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0c2b\n\u00bd\3\u00be\3\u00be\3"+
		"\u00be\3\u00be\3\u00be\7\u00be\u0c32\n\u00be\f\u00be\16\u00be\u0c35\13"+
		"\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\7\u00bf\u0c3f\n\u00bf\f\u00bf\16\u00bf\u0c42\13\u00bf\3\u00bf\3\u00bf"+
		"\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0c49\n\u00c0\3\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c2\3\u00c2\7\u00c2\u0c50\n\u00c2\f\u00c2\16\u00c2\u0c53\13\u00c2"+
		"\3\u00c2\5\u00c2\u0c56\n\u00c2\3\u00c2\7\u00c2\u0c59\n\u00c2\f\u00c2\16"+
		"\u00c2\u0c5c\13\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\5\u00c3\u0c66\n\u00c3\5\u00c3\u0c68\n\u00c3\3\u00c4\3"+
		"\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\7\u00c5\u0c76\n\u00c5\f\u00c5\16\u00c5\u0c79\13\u00c5"+
		"\3\u00c6\3\u00c6\5\u00c6\u0c7d\n\u00c6\3\u00c6\3\u00c6\7\u00c6\u0c81\n"+
		"\u00c6\f\u00c6\16\u00c6\u0c84\13\u00c6\3\u00c6\3\u00c6\3\u00c7\5\u00c7"+
		"\u0c89\n\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\7\u00c9\u0c99"+
		"\n\u00c9\f\u00c9\16\u00c9\u0c9c\13\u00c9\3\u00c9\3\u00c9\3\u00ca\3\u00ca"+
		"\5\u00ca\u0ca2\n\u00ca\3\u00cb\5\u00cb\u0ca5\n\u00cb\3\u00cb\3\u00cb\3"+
		"\u00cb\3\u00cb\7\u00cb\u0cab\n\u00cb\f\u00cb\16\u00cb\u0cae\13\u00cb\3"+
		"\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u0cb6\n\u00cc\5"+
		"\u00cc\u0cb8\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u0cbc\n\u00cc\3\u00cc\5\u00cc"+
		"\u0cbf\n\u00cc\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u0cc4\n\u00cd\5\u00cd\u0cc6"+
		"\n\u00cd\3\u00cd\3\u00cd\5\u00cd\u0cca\n\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00ce\3\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0cd6"+
		"\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d1\3\u00d1\5\u00d1"+
		"\u0cdf\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\7\u00d1\u0ce5\n\u00d1\f"+
		"\u00d1\16\u00d1\u0ce8\13\u00d1\3\u00d2\3\u00d2\5\u00d2\u0cec\n\u00d2\3"+
		"\u00d2\3\u00d2\5\u00d2\u0cf0\n\u00d2\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0cf5"+
		"\n\u00d3\3\u00d3\5\u00d3\u0cf8\n\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\7\u00d4\u0cfe\n\u00d4\f\u00d4\16\u00d4\u0d01\13\u00d4\3\u00d5\3\u00d5"+
		"\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u0d08\n\u00d5\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\5\u00d6\u0d0e\n\u00d6\3\u00d6\5\u00d6\u0d11\n\u00d6\3\u00d6\5"+
		"\u00d6\u0d14\n\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\7\u00d7\u0d1a\n\u00d7"+
		"\f\u00d7\16\u00d7\u0d1d\13\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\5\u00d7\u0d26\n\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u0d30\n\u00d8\f\u00d8\16\u00d8"+
		"\u0d33\13\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u0d39\n\u00d8"+
		"\3\u00d9\3\u00d9\5\u00d9\u0d3d\n\u00d9\3\u00d9\3\u00d9\5\u00d9\u0d41\n"+
		"\u00d9\3\u00d9\5\u00d9\u0d44\n\u00d9\3\u00d9\5\u00d9\u0d47\n\u00d9\3\u00da"+
		"\3\u00da\3\u00da\5\u00da\u0d4c\n\u00da\3\u00db\3\u00db\3\u00db\5\u00db"+
		"\u0d51\n\u00db\3\u00db\5\u00db\u0d54\n\u00db\3\u00db\5\u00db\u0d57\n\u00db"+
		"\3\u00dc\3\u00dc\6\u00dc\u0d5b\n\u00dc\r\u00dc\16\u00dc\u0d5c\3\u00dc"+
		"\5\u00dc\u0d60\n\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd\5\u00dd\u0d66\n"+
		"\u00dd\3\u00dd\5\u00dd\u0d69\n\u00dd\3\u00de\5\u00de\u0d6c\n\u00de\3\u00de"+
		"\6\u00de\u0d6f\n\u00de\r\u00de\16\u00de\u0d70\3\u00de\5\u00de\u0d74\n"+
		"\u00de\3\u00df\3\u00df\3\u00df\3\u00df\6\u00df\u0d7a\n\u00df\r\u00df\16"+
		"\u00df\u0d7b\3\u00e0\3\u00e0\6\u00e0\u0d80\n\u00e0\r\u00e0\16\u00e0\u0d81"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\7\u00e1\u0d8a\n\u00e1"+
		"\f\u00e1\16\u00e1\u0d8d\13\u00e1\3\u00e1\3\u00e1\5\u00e1\u0d91\n\u00e1"+
		"\3\u00e2\3\u00e2\3\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u0d9a"+
		"\n\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\5\u00e3\u0da4\n\u00e3\3\u00e3\3\u00e3\5\u00e3\u0da8\n\u00e3\5\u00e3\u0daa"+
		"\n\u00e3\3\u00e3\5\u00e3\u0dad\n\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\7\u00e4\u0db7\n\u00e4\f\u00e4\16\u00e4"+
		"\u0dba\13\u00e4\3\u00e4\5\u00e4\u0dbd\n\u00e4\3\u00e4\5\u00e4\u0dc0\n"+
		"\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\7\u00e7"+
		"\u0dd2\n\u00e7\f\u00e7\16\u00e7\u0dd5\13\u00e7\3\u00e7\3\u00e7\5\u00e7"+
		"\u0dd9\n\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u0dde\n\u00e7\3\u00e8\3"+
		"\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u0de5\n\u00e8\3\u00e8\5\u00e8\u0de8"+
		"\n\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\7\u00e9\u0def\n\u00e9"+
		"\f\u00e9\16\u00e9\u0df2\13\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9"+
		"\u0df8\n\u00e9\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u0dfd\n\u00ea\3\u00eb\3"+
		"\u00eb\5\u00eb\u0e01\n\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3"+
		"\u00ec\5\u00ec\u0e09\n\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u0e0f"+
		"\n\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u0e17"+
		"\n\u00ed\3\u00ed\5\u00ed\u0e1a\n\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee"+
		"\7\u00ee\u0e20\n\u00ee\f\u00ee\16\u00ee\u0e23\13\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u0e2a\n\u00ef\3\u00ef\5\u00ef\u0e2d\n"+
		"\u00ef\3\u00ef\5\u00ef\u0e30\n\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f1\3"+
		"\u00f1\3\u00f1\3\u00f1\5\u00f1\u0e39\n\u00f1\3\u00f2\3\u00f2\3\u00f2\3"+
		"\u00f2\5\u00f2\u0e3f\n\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u0e45"+
		"\n\u00f2\5\u00f2\u0e47\n\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u0e54\n\u00f3"+
		"\5\u00f3\u0e56\n\u00f3\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\5\u00f4\u0e5f\n\u00f4\5\u00f4\u0e61\n\u00f4\3\u00f5\3\u00f5\5"+
		"\u00f5\u0e65\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u0e6b\n\u00f5"+
		"\3\u00f5\3\u00f5\5\u00f5\u0e6f\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f8\3\u00f8\5\u00f8"+
		"\u0e7d\n\u00f8\3\u00f8\3\u00f8\7\u00f8\u0e81\n\u00f8\f\u00f8\16\u00f8"+
		"\u0e84\13\u00f8\3\u00f8\3\u00f8\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\7\u00fb\u0e90\n\u00fb\f\u00fb\16\u00fb\u0e93"+
		"\13\u00fb\5\u00fb\u0e95\n\u00fb\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fd"+
		"\7\u00fd\u0e9c\n\u00fd\f\u00fd\16\u00fd\u0e9f\13\u00fd\3\u00fe\3\u00fe"+
		"\3\u00fe\5\u00fe\u0ea4\n\u00fe\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u0ea9\n"+
		"\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\3\u00ff\5\u00ff\u0eb4\n\u00ff\3\u00ff\3\u00ff\5\u00ff\u0eb8\n\u00ff\3"+
		"\u00ff\3\u00ff\3\u00ff\7\u00ff\u0ebd\n\u00ff\f\u00ff\16\u00ff\u0ec0\13"+
		"\u00ff\3\u00ff\3\u00ff\5\u00ff\u0ec4\n\u00ff\7\u00ff\u0ec6\n\u00ff\f\u00ff"+
		"\16\u00ff\u0ec9\13\u00ff\3\u0100\3\u0100\3\u0100\5\u0100\u0ece\n\u0100"+
		"\3\u0100\3\u0100\5\u0100\u0ed2\n\u0100\3\u0101\3\u0101\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u0edd\n\u0102\3\u0102"+
		"\7\u0102\u0ee0\n\u0102\f\u0102\16\u0102\u0ee3\13\u0102\3\u0103\3\u0103"+
		"\5\u0103\u0ee7\n\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\5\u0103\u0ef0\n\u0103\5\u0103\u0ef2\n\u0103\5\u0103\u0ef4\n\u0103"+
		"\3\u0104\3\u0104\3\u0105\3\u0105\3\u0105\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\3\u0106\3\u0106\3\u0106\3\u0106\7\u0106\u0f03\n\u0106\f\u0106\16\u0106"+
		"\u0f06\13\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u0f0d"+
		"\n\u0106\3\u0107\3\u0107\3\u0107\3\u0107\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\7\u0108\u0f17\n\u0108\f\u0108\16\u0108\u0f1a\13\u0108\3\u0109\3\u0109"+
		"\3\u010a\3\u010a\3\u010a\7\u010a\u0f21\n\u010a\f\u010a\16\u010a\u0f24"+
		"\13\u010a\3\u010b\3\u010b\3\u010b\7\u010b\u0f29\n\u010b\f\u010b\16\u010b"+
		"\u0f2c\13\u010b\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\5\u010c"+
		"\u0f34\n\u010c\3\u010c\5\u010c\u0f37\n\u010c\3\u010d\3\u010d\3\u010d\3"+
		"\u010d\3\u010d\5\u010d\u0f3e\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3"+
		"\u010d\3\u010d\5\u010d\u0f46\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3"+
		"\u010d\5\u010d\u0f4d\n\u010d\3\u010d\3\u010d\5\u010d\u0f51\n\u010d\3\u010e"+
		"\3\u010e\3\u010e\3\u010e\3\u010e\5\u010e\u0f58\n\u010e\3\u010f\3\u010f"+
		"\5\u010f\u0f5c\n\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u0f61\n\u010f\7"+
		"\u010f\u0f63\n\u010f\f\u010f\16\u010f\u0f66\13\u010f\3\u010f\3\u010f\3"+
		"\u010f\7\u010f\u0f6b\n\u010f\f\u010f\16\u010f\u0f6e\13\u010f\3\u010f\5"+
		"\u010f\u0f71\n\u010f\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u0f78"+
		"\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110"+
		"\u0f81\n\u0110\3\u0111\3\u0111\3\u0111\3\u0112\3\u0112\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\7\u0113\u0f8d\n\u0113\f\u0113\16\u0113\u0f90"+
		"\13\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\7\u0113\u0f9a\n\u0113\f\u0113\16\u0113\u0f9d\13\u0113\3\u0113\3\u0113"+
		"\5\u0113\u0fa1\n\u0113\3\u0113\3\u0113\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u0fb7\n\u0114\3\u0115"+
		"\3\u0115\5\u0115\u0fbb\n\u0115\3\u0116\5\u0116\u0fbe\n\u0116\3\u0116\3"+
		"\u0116\3\u0116\6\u0116\u0fc3\n\u0116\r\u0116\16\u0116\u0fc4\3\u0116\5"+
		"\u0116\u0fc8\n\u0116\3\u0116\3\u0116\5\u0116\u0fcc\n\u0116\3\u0116\5\u0116"+
		"\u0fcf\n\u0116\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u0fd6\n"+
		"\u0117\3\u0118\5\u0118\u0fd9\n\u0118\3\u0118\3\u0118\6\u0118\u0fdd\n\u0118"+
		"\r\u0118\16\u0118\u0fde\3\u0118\5\u0118\u0fe2\n\u0118\3\u0118\3\u0118"+
		"\5\u0118\u0fe6\n\u0118\3\u0118\5\u0118\u0fe9\n\u0118\3\u0119\3\u0119\3"+
		"\u0119\3\u0119\3\u0119\5\u0119\u0ff0\n\u0119\3\u011a\3\u011a\3\u011a\5"+
		"\u011a\u0ff5\n\u011a\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3"+
		"\u011b\3\u011b\3\u011b\3\u011b\7\u011b\u1001\n\u011b\f\u011b\16\u011b"+
		"\u1004\13\u011b\3\u011b\3\u011b\3\u011b\5\u011b\u1009\n\u011b\5\u011b"+
		"\u100b\n\u011b\3\u011c\3\u011c\5\u011c\u100f\n\u011c\3\u011d\3\u011d\3"+
		"\u011d\3\u011d\7\u011d\u1015\n\u011d\f\u011d\16\u011d\u1018\13\u011d\3"+
		"\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\5\u011e\u1023\n\u011e\3\u011f\3\u011f\3\u011f\5\u011f\u1028\n\u011f\3"+
		"\u011f\3\u011f\3\u011f\5\u011f\u102d\n\u011f\3\u011f\3\u011f\3\u011f\3"+
		"\u011f\5\u011f\u1033\n\u011f\3\u011f\5\u011f\u1036\n\u011f\3\u011f\3\u011f"+
		"\5\u011f\u103a\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\5\u011f\u1044\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\5\u011f\u1054\n\u011f\3\u011f\3\u011f\5\u011f\u1058\n\u011f\3"+
		"\u011f\3\u011f\3\u011f\3\u011f\3\u011f\6\u011f\u105f\n\u011f\r\u011f\16"+
		"\u011f\u1060\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1067\n\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\5\u011f\u1075\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\7\u011f\u107e\n\u011f\f\u011f\16\u011f\u1081"+
		"\13\u011f\3\u011f\5\u011f\u1084\n\u011f\3\u011f\5\u011f\u1087\n\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1090"+
		"\n\u011f\3\u011f\3\u011f\7\u011f\u1094\n\u011f\f\u011f\16\u011f\u1097"+
		"\13\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f"+
		"\u10a0\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f"+
		"\u10a8\n\u011f\3\u011f\5\u011f\u10ab\n\u011f\3\u011f\5\u011f\u10ae\n\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u10b7"+
		"\n\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u10bc\n\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\7\u011f\u10c3\n\u011f\f\u011f\16\u011f\u10c6"+
		"\13\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u10cb\n\u011f\3\u011f\3\u011f"+
		"\3\u011f\5\u011f\u10d0\n\u011f\3\u011f\5\u011f\u10d3\n\u011f\3\u011f\3"+
		"\u011f\3\u011f\5\u011f\u10d8\n\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u10dd"+
		"\n\u011f\7\u011f\u10df\n\u011f\f\u011f\16\u011f\u10e2\13\u011f\3\u011f"+
		"\3\u011f\3\u011f\5\u011f\u10e7\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\5\u011f\u10ed\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\5\u011f\u10f6\n\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u10fb\n"+
		"\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1103\n"+
		"\u011f\3\u011f\3\u011f\5\u011f\u1107\n\u011f\3\u011f\3\u011f\3\u011f\5"+
		"\u011f\u110c\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1112\n\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1119\n\u011f\3\u011f"+
		"\3\u011f\3\u011f\5\u011f\u111e\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\5\u011f\u1125\n\u011f\3\u011f\3\u011f\5\u011f\u1129\n\u011f\3"+
		"\u011f\3\u011f\3\u011f\5\u011f\u112e\n\u011f\3\u011f\3\u011f\3\u011f\3"+
		"\u011f\3\u011f\3\u011f\5\u011f\u1136\n\u011f\3\u011f\5\u011f\u1139\n\u011f"+
		"\3\u011f\5\u011f\u113c\n\u011f\3\u011f\5\u011f\u113f\n\u011f\3\u011f\3"+
		"\u011f\5\u011f\u1143\n\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1148\n\u011f"+
		"\3\u011f\3\u011f\3\u011f\5\u011f\u114d\n\u011f\3\u011f\3\u011f\5\u011f"+
		"\u1151\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1158\n"+
		"\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u115d\n\u011f\5\u011f\u115f\n\u011f"+
		"\3\u0120\3\u0120\3\u0121\3\u0121\3\u0122\3\u0122\3\u0123\3\u0123\3\u0123"+
		"\5\u0123\u116a\n\u0123\3\u0123\3\u0123\5\u0123\u116e\n\u0123\5\u0123\u1170"+
		"\n\u0123\3\u0123\3\u0123\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\5\u0124\u117b\n\u0124\3\u0125\3\u0125\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u1186\n\u0126\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\7\u0127\u118d\n\u0127\f\u0127\16\u0127\u1190"+
		"\13\u0127\5\u0127\u1192\n\u0127\3\u0128\3\u0128\5\u0128\u1196\n\u0128"+
		"\3\u0128\5\u0128\u1199\n\u0128\3\u0128\3\u0128\5\u0128\u119d\n\u0128\3"+
		"\u0129\3\u0129\3\u0129\3\u0129\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\5\u012a\u11aa\n\u012a\3\u012b\3\u012b\3\u012b\5\u012b"+
		"\u11af\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\7\u012b\u11b5\n\u012b\f"+
		"\u012b\16\u012b\u11b8\13\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b"+
		"\u11be\n\u012b\3\u012c\3\u012c\3\u012c\5\u012c\u11c3\n\u012c\3\u012c\3"+
		"\u012c\5\u012c\u11c7\n\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u11cc\n\u012c"+
		"\3\u012d\3\u012d\3\u012d\5\u012d\u11d1\n\u012d\3\u012d\5\u012d\u11d4\n"+
		"\u012d\3\u012d\3\u012d\3\u012d\7\u012d\u11d9\n\u012d\f\u012d\16\u012d"+
		"\u11dc\13\u012d\3\u012d\3\u012d\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e"+
		"\5\u012e\u11e5\n\u012e\3\u012e\3\u012e\3\u012e\3\u012e\7\u012e\u11eb\n"+
		"\u012e\f\u012e\16\u012e\u11ee\13\u012e\3\u012e\5\u012e\u11f1\n\u012e\3"+
		"\u012e\3\u012e\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f"+
		"\u11fb\n\u012f\3\u012f\5\u012f\u11fe\n\u012f\5\u012f\u1200\n\u012f\3\u0130"+
		"\3\u0130\3\u0130\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u120a"+
		"\n\u0131\5\u0131\u120c\n\u0131\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132"+
		"\u1212\n\u0132\3\u0133\3\u0133\3\u0133\3\u0133\5\u0133\u1218\n\u0133\5"+
		"\u0133\u121a\n\u0133\3\u0134\3\u0134\3\u0134\3\u0135\3\u0135\3\u0135\3"+
		"\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\5\u0136\u1228\n\u0136\5"+
		"\u0136\u122a\n\u0136\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\5"+
		"\u0137\u1232\n\u0137\3\u0137\5\u0137\u1235\n\u0137\3\u0138\3\u0138\3\u0138"+
		"\3\u0138\3\u0138\3\u0138\3\u0138\5\u0138\u123e\n\u0138\3\u0139\3\u0139"+
		"\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u1247\n\u0139\3\u013a"+
		"\3\u013a\3\u013b\3\u013b\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u1251"+
		"\n\u013c\3\u013d\3\u013d\5\u013d\u1255\n\u013d\3\u013d\3\u013d\3\u013e"+
		"\5\u013e\u125a\n\u013e\3\u013e\3\u013e\5\u013e\u125e\n\u013e\3\u013e\5"+
		"\u013e\u1261\n\u013e\3\u013f\3\u013f\5\u013f\u1265\n\u013f\3\u0140\3\u0140"+
		"\3\u0141\3\u0141\3\u0141\5\u0141\u126c\n\u0141\3\u0142\3\u0142\3\u0142"+
		"\3\u0142\3\u0143\3\u0143\3\u0143\3\u0143\7\u0143\u1276\n\u0143\f\u0143"+
		"\16\u0143\u1279\13\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\7\u0143\u1281\n\u0143\f\u0143\16\u0143\u1284\13\u0143\5\u0143\u1286\n"+
		"\u0143\3\u0144\3\u0144\5\u0144\u128a\n\u0144\3\u0145\3\u0145\3\u0146\3"+
		"\u0146\3\u0147\3\u0147\3\u0148\3\u0148\3\u0149\3\u0149\3\u014a\3\u014a"+
		"\3\u014b\3\u014b\3\u014b\7\u014b\u129b\n\u014b\f\u014b\16\u014b\u129e"+
		"\13\u014b\3\u014b\3\u014b\5\u014b\u12a2\n\u014b\3\u014c\3\u014c\3\u014d"+
		"\3\u014d\3\u014d\5\u014d\u12a9\n\u014d\3\u014e\3\u014e\3\u014f\3\u014f"+
		"\3\u0150\3\u0150\3\u0151\3\u0151\3\u0151\7\u0151\u12b4\n\u0151\f\u0151"+
		"\16\u0151\u12b7\13\u0151\3\u0152\3\u0152\3\u0153\3\u0153\3\u0153\7\u0153"+
		"\u12be\n\u0153\f\u0153\16\u0153\u12c1\13\u0153\3\u0153\3\u0153\5\u0153"+
		"\u12c5\n\u0153\3\u0154\3\u0154\3\u0155\3\u0155\3\u0155\7\u0155\u12cc\n"+
		"\u0155\f\u0155\16\u0155\u12cf\13\u0155\3\u0156\3\u0156\3\u0156\7\u0156"+
		"\u12d4\n\u0156\f\u0156\16\u0156\u12d7\13\u0156\3\u0157\3\u0157\3\u0157"+
		"\7\u0157\u12dc\n\u0157\f\u0157\16\u0157\u12df\13\u0157\3\u0158\3\u0158"+
		"\3\u0158\5\u0158\u12e4\n\u0158\3\u0159\3\u0159\3\u0159\5\u0159\u12e9\n"+
		"\u0159\3\u015a\3\u015a\3\u015a\5\u015a\u12ee\n\u015a\3\u015b\3\u015b\5"+
		"\u015b\u12f2\n\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u12f7\n\u015b\3\u015b"+
		"\5\u015b\u12fa\n\u015b\3\u015c\3\u015c\3\u015d\3\u015d\5\u015d\u1300\n"+
		"\u015d\3\u015e\3\u015e\5\u015e\u1304\n\u015e\3\u015f\3\u015f\3\u015f\5"+
		"\u015f\u1309\n\u015f\3\u0160\3\u0160\3\u0161\3\u0161\3\u0161\7\u0161\u1310"+
		"\n\u0161\f\u0161\16\u0161\u1313\13\u0161\3\u0162\3\u0162\3\u0162\5\u0162"+
		"\u1318\n\u0162\3\u0162\3\u0162\3\u0162\5\u0162\u131d\n\u0162\3\u0163\3"+
		"\u0163\3\u0163\7\u0163\u1322\n\u0163\f\u0163\16\u0163\u1325\13\u0163\3"+
		"\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u132e\n"+
		"\u0164\3\u0165\3\u0165\5\u0165\u1332\n\u0165\3\u0165\3\u0165\7\u0165\u1336"+
		"\n\u0165\f\u0165\16\u0165\u1339\13\u0165\3\u0165\3\u0165\5\u0165\u133d"+
		"\n\u0165\3\u0166\3\u0166\3\u0166\5\u0166\u1342\n\u0166\5\u0166\u1344\n"+
		"\u0166\3\u0166\3\u0166\3\u0166\5\u0166\u1349\n\u0166\7\u0166\u134b\n\u0166"+
		"\f\u0166\16\u0166\u134e\13\u0166\3\u0166\3\u0166\5\u0166\u1352\n\u0166"+
		"\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\5\u0167\u1359\n\u0167\3\u0167"+
		"\3\u0167\3\u0167\5\u0167\u135e\n\u0167\5\u0167\u1360\n\u0167\5\u0167\u1362"+
		"\n\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\5\u0167\u136c\n\u0167\3\u0167\3\u0167\3\u0167\5\u0167\u1371\n\u0167\7"+
		"\u0167\u1373\n\u0167\f\u0167\16\u0167\u1376\13\u0167\5\u0167\u1378\n\u0167"+
		"\3\u0167\3\u0167\5\u0167\u137c\n\u0167\3\u0168\3\u0168\3\u0168\3\u0169"+
		"\3\u0169\3\u0169\3\u0169\5\u0169\u1385\n\u0169\3\u0169\3\u0169\3\u016a"+
		"\3\u016a\5\u016a\u138b\n\u016a\3\u016a\3\u016a\5\u016a\u138f\n\u016a\5"+
		"\u016a\u1391\n\u016a\3\u016b\3\u016b\5\u016b\u1395\n\u016b\3\u016b\3\u016b"+
		"\5\u016b\u1399\n\u016b\3\u016b\3\u016b\5\u016b\u139d\n\u016b\3\u016b\3"+
		"\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u13a5\n\u016b\3\u016b\3"+
		"\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u13ad\n\u016b\5\u016b\u13af"+
		"\n\u016b\3\u016c\3\u016c\3\u016c\3\u016c\5\u016c\u13b5\n\u016c\3\u016c"+
		"\5\u016c\u13b8\n\u016c\3\u016c\3\u016c\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u13d0"+
		"\n\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u13d7\n\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u13f8\n\u016d\3\u016e\3\u016e"+
		"\3\u016e\5\u016e\u13fd\n\u016e\3\u016e\5\u016e\u1400\n\u016e\3\u016e\3"+
		"\u016e\3\u016e\5\u016e\u1405\n\u016e\5\u016e\u1407\n\u016e\3\u016e\3\u016e"+
		"\7\u016e\u140b\n\u016e\f\u016e\16\u016e\u140e\13\u016e\3\u016f\3\u016f"+
		"\3\u016f\7\u016f\u1413\n\u016f\f\u016f\16\u016f\u1416\13\u016f\3\u0170"+
		"\3\u0170\5\u0170\u141a\n\u0170\3\u0170\3\u0170\3\u0170\7\u0170\u141f\n"+
		"\u0170\f\u0170\16\u0170\u1422\13\u0170\3\u0170\5\u0170\u1425\n\u0170\3"+
		"\u0171\3\u0171\5\u0171\u1429\n\u0171\3\u0171\3\u0171\3\u0171\7\u0171\u142e"+
		"\n\u0171\f\u0171\16\u0171\u1431\13\u0171\3\u0172\3\u0172\3\u0172\5\u0172"+
		"\u1436\n\u0172\3\u0172\3\u0172\3\u0172\3\u0172\5\u0172\u143c\n\u0172\3"+
		"\u0172\3\u0172\3\u0172\3\u0172\5\u0172\u1442\n\u0172\3\u0172\3\u0172\3"+
		"\u0172\3\u0172\5\u0172\u1448\n\u0172\3\u0172\3\u0172\3\u0172\5\u0172\u144d"+
		"\n\u0172\5\u0172\u144f\n\u0172\3\u0172\5\u0172\u1452\n\u0172\3\u0172\3"+
		"\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\5\u0172\u145c\n"+
		"\u0172\3\u0172\5\u0172\u145f\n\u0172\5\u0172\u1461\n\u0172\5\u0172\u1463"+
		"\n\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172"+
		"\3\u0172\3\u0172\3\u0172\3\u0172\5\u0172\u1471\n\u0172\3\u0173\3\u0173"+
		"\3\u0174\3\u0174\3\u0174\3\u0175\3\u0175\3\u0176\3\u0176\5\u0176\u147c"+
		"\n\u0176\3\u0176\3\u0176\3\u0177\3\u0177\5\u0177\u1482\n\u0177\3\u0178"+
		"\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\5\u0178\u148b\n\u0178"+
		"\3\u0179\3\u0179\3\u0179\5\u0179\u1490\n\u0179\3\u017a\3\u017a\3\u017a"+
		"\5\u017a\u1495\n\u017a\3\u017b\3\u017b\3\u017b\5\u017b\u149a\n\u017b\3"+
		"\u017c\3\u017c\3\u017c\3\u017c\3\u017d\3\u017d\3\u017d\3\u0953\2\u017e"+
		"\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFH"+
		"JLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c"+
		"\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4"+
		"\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc"+
		"\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4"+
		"\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec"+
		"\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104"+
		"\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c"+
		"\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134"+
		"\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c"+
		"\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164"+
		"\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c"+
		"\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194"+
		"\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac"+
		"\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4"+
		"\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc"+
		"\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4"+
		"\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c"+
		"\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224"+
		"\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c"+
		"\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254"+
		"\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c"+
		"\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284"+
		"\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c"+
		"\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4"+
		"\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc"+
		"\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4"+
		"\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\2R\3\2\u01f7"+
		"\u01f7\4\2\17\17\u00bc\u00bc\4\2\b\b\u011d\u011d\4\2\u009f\u009f\u012a"+
		"\u012a\4\288\u010d\u010d\5\2##\u0114\u0114\u0167\u0167\4\2mmyy\4\2\6\6"+
		"\32\32\5\2hh\u00b3\u00b3\u0195\u0195\5\2\u00ef\u00ef\u0106\u0106\u0117"+
		"\u0117\4\2\u0097\u0097\u019b\u019b\4\2##\u0167\u0167\4\2\5\5rr\5\2\5\5"+
		"rr\u00e3\u00e3\5\2UU\u010c\u010c\u0168\u0168\4\2\u00d7\u00d7\u010d\u010d"+
		"\4\2\u00db\u00db\u016f\u016f\5\2\u008f\u008f\u00b4\u00b4\u0113\u0113\4"+
		"\2SSgg\6\2\u00a6\u00a6\u00b2\u00b2\u00f3\u00f3\u0110\u0110\4\2dd\u01f4"+
		"\u01f4\3\2\u011b\u011c\3\3\u01f7\u01f7\3\2\u013a\u013b\4\2\u0108\u0108"+
		"\u01af\u01af\3\2DE\4\2ff\u00a5\u00a5\4\2\u00fc\u00fc\u01a5\u01a5\4\2\31"+
		"\31\u00a5\u00a5\4\2&&ii\5\2\t\too\u0191\u0191\4\2PP\u00e8\u00e8\5\2\u0099"+
		"\u0099\u00c6\u00c6\u013f\u013f\4\2\u014b\u014b\u017c\u017c\5\2\u014b\u014b"+
		"\u0165\u0165\u017c\u017c\4\2\u0084\u0084\u00a7\u00a7\4\2QQ\u0141\u0141"+
		"\4\2\u00a4\u00a4\u00c1\u00c1\4\2\t\t\u0196\u0196\4\2\27\27\u0153\u0153"+
		"\4\2\20\20jj\4\2\u0090\u0090\u00c3\u00c3\4\2\t\t\u0090\u0090\3\2\u0178"+
		"\u0179\4\2\u00db\u00db\u0172\u0172\3\2\u00c9\u00cc\3\2\u01ef\u01f0\4\2"+
		"\u01ee\u01ee\u01f2\u01f2\4\2cc\u00a9\u00a9\6\2\t\t\r\r\u0087\u0087\u0166"+
		"\u0166\4\2\60\60\u01b3\u01b3\4\2oo\u0191\u0191\4\2-->>\4\2\u0091\u0091"+
		"\u00c4\u00c4\4\2\62\62\u00ec\u00ec\5\2%%\u00c5\u00c5\u0185\u0185\4\2\u01b4"+
		"\u01b4\u01b7\u01b7\4\2||\u00f5\u00f5\4\2\u0080\u0080\u00e6\u00e6\4\2G"+
		"Gpp\4\2\u00a1\u00a1\u015c\u015c\3\2\u01d0\u01df\3\2\u01c9\u01cf\3\2\u01c3"+
		"\u01c8\4\2\u012a\u012a\u0144\u0144\4\2\u0093\u0093\u0124\u0124\4\2\u00fa"+
		"\u00fa\u014a\u014a\4\2\u010f\u010f\u0169\u0169\5\2\u008c\u008c\u0176\u0176"+
		"\u01a6\u01a6\4\2<<\u0140\u0140\5\2<<\u00f8\u00f8\u0140\u0140\4\2\u0118"+
		"\u0118\u0173\u0173\4\2\u00a4\u00a4\u0136\u0136\4\2ZZ\u01bf\u01bf\4\2\u00e4"+
		"\u00e4\u014d\u014d\4\2))\61\61\6\2ZZ\u00a2\u00a2\u00de\u00de\u014d\u014d"+
		"\3\2\u01e5\u01e6\4\2\u01e0\u01e0\u01e7\u01e7H\2\4\b\13\13\16\16\21\32"+
		"\35%\'\')*,.\60\63\65@CNPQSXZ`bcegknpqsuxz|\u0080\u0082\u0084\u0086\u0086"+
		"\u0088\u008c\u008f\u0094\u0096\u0097\u0099\u009a\u009e\u009f\u00a1\u00a2"+
		"\u00a4\u00a5\u00a7\u00aa\u00ac\u00b2\u00b4\u00b7\u00b9\u00b9\u00bb\u00bb"+
		"\u00bd\u00c8\u00ca\u00ce\u00d0\u00dc\u00de\u00e0\u00e2\u00f1\u00f3\u00f5"+
		"\u00f8\u00f8\u00fa\u00fa\u00fe\u0102\u0104\u0106\u0108\u0109\u010c\u010c"+
		"\u010e\u011a\u011d\u011d\u011f\u0126\u0129\u013d\u013f\u014b\u014d\u014f"+
		"\u0151\u0151\u0153\u015a\u015c\u0161\u0163\u016a\u016c\u0177\u017b\u0183"+
		"\u0185\u018a\u018c\u018f\u0192\u0192\u0194\u0194\u0196\u0199\u019b\u019c"+
		"\u019e\u01a7\u01a9\u01a9\u01ab\u01ab\u01ad\u01df\u0266\u0266\u16f3\2\u02fb"+
		"\3\2\2\2\4\u0302\3\2\2\2\6\u030b\3\2\2\2\b\u0323\3\2\2\2\n\u0325\3\2\2"+
		"\2\f\u032a\3\2\2\2\16\u0342\3\2\2\2\20\u0376\3\2\2\2\22\u037a\3\2\2\2"+
		"\24\u0392\3\2\2\2\26\u0396\3\2\2\2\30\u03a2\3\2\2\2\32\u03b0\3\2\2\2\34"+
		"\u03b8\3\2\2\2\36\u03ce\3\2\2\2 \u03da\3\2\2\2\"\u03eb\3\2\2\2$\u0403"+
		"\3\2\2\2&\u0405\3\2\2\2(\u0416\3\2\2\2*\u0439\3\2\2\2,\u043b\3\2\2\2."+
		"\u0440\3\2\2\2\60\u0458\3\2\2\2\62\u047d\3\2\2\2\64\u0482\3\2\2\2\66\u049b"+
		"\3\2\2\28\u04b3\3\2\2\2:\u04bc\3\2\2\2<\u04c5\3\2\2\2>\u04ce\3\2\2\2@"+
		"\u04d2\3\2\2\2B\u04d7\3\2\2\2D\u04ef\3\2\2\2F\u04f1\3\2\2\2H\u04f5\3\2"+
		"\2\2J\u0529\3\2\2\2L\u0545\3\2\2\2N\u0547\3\2\2\2P\u0555\3\2\2\2R\u0561"+
		"\3\2\2\2T\u0566\3\2\2\2V\u056c\3\2\2\2X\u056f\3\2\2\2Z\u057a\3\2\2\2\\"+
		"\u0589\3\2\2\2^\u059a\3\2\2\2`\u05ab\3\2\2\2b\u05b3\3\2\2\2d\u05b8\3\2"+
		"\2\2f\u05c8\3\2\2\2h\u05cc\3\2\2\2j\u05e4\3\2\2\2l\u05e7\3\2\2\2n\u05ed"+
		"\3\2\2\2p\u05f9\3\2\2\2r\u0602\3\2\2\2t\u061e\3\2\2\2v\u0624\3\2\2\2x"+
		"\u0627\3\2\2\2z\u062e\3\2\2\2|\u0636\3\2\2\2~\u0642\3\2\2\2\u0080\u0644"+
		"\3\2\2\2\u0082\u0648\3\2\2\2\u0084\u064e\3\2\2\2\u0086\u066a\3\2\2\2\u0088"+
		"\u068c\3\2\2\2\u008a\u06bc\3\2\2\2\u008c\u06c6\3\2\2\2\u008e\u06c8\3\2"+
		"\2\2\u0090\u06cd\3\2\2\2\u0092\u06db\3\2\2\2\u0094\u06dd\3\2\2\2\u0096"+
		"\u06e2\3\2\2\2\u0098\u06f2\3\2\2\2\u009a\u0713\3\2\2\2\u009c\u0736\3\2"+
		"\2\2\u009e\u073a\3\2\2\2\u00a0\u0749\3\2\2\2\u00a2\u074b\3\2\2\2\u00a4"+
		"\u074e\3\2\2\2\u00a6\u0753\3\2\2\2\u00a8\u075d\3\2\2\2\u00aa\u0779\3\2"+
		"\2\2\u00ac\u077b\3\2\2\2\u00ae\u077f\3\2\2\2\u00b0\u0782\3\2\2\2\u00b2"+
		"\u0786\3\2\2\2\u00b4\u078b\3\2\2\2\u00b6\u078f\3\2\2\2\u00b8\u07a0\3\2"+
		"\2\2\u00ba\u07ad\3\2\2\2\u00bc\u07be\3\2\2\2\u00be\u07cb\3\2\2\2\u00c0"+
		"\u07d7\3\2\2\2\u00c2\u07d9\3\2\2\2\u00c4\u07e7\3\2\2\2\u00c6\u07f8\3\2"+
		"\2\2\u00c8\u0811\3\2\2\2\u00ca\u081b\3\2\2\2\u00cc\u081f\3\2\2\2\u00ce"+
		"\u0844\3\2\2\2\u00d0\u0846\3\2\2\2\u00d2\u085f\3\2\2\2\u00d4\u086a\3\2"+
		"\2\2\u00d6\u0871\3\2\2\2\u00d8\u0875\3\2\2\2\u00da\u0887\3\2\2\2\u00dc"+
		"\u088f\3\2\2\2\u00de\u089a\3\2\2\2\u00e0\u08a1\3\2\2\2\u00e2\u08a5\3\2"+
		"\2\2\u00e4\u08c2\3\2\2\2\u00e6\u08c6\3\2\2\2\u00e8\u08cb\3\2\2\2\u00ea"+
		"\u08d3\3\2\2\2\u00ec\u08db\3\2\2\2\u00ee\u08de\3\2\2\2\u00f0\u08ee\3\2"+
		"\2\2\u00f2\u08f3\3\2\2\2\u00f4\u08f7\3\2\2\2\u00f6\u091b\3\2\2\2\u00f8"+
		"\u091d\3\2\2\2\u00fa\u0933\3\2\2\2\u00fc\u0935\3\2\2\2\u00fe\u093a\3\2"+
		"\2\2\u0100\u093c\3\2\2\2\u0102\u093e\3\2\2\2\u0104\u0940\3\2\2\2\u0106"+
		"\u0944\3\2\2\2\u0108\u0949\3\2\2\2\u010a\u094f\3\2\2\2\u010c\u095a\3\2"+
		"\2\2\u010e\u0960\3\2\2\2\u0110\u0974\3\2\2\2\u0112\u0979\3\2\2\2\u0114"+
		"\u0986\3\2\2\2\u0116\u0988\3\2\2\2\u0118\u0996\3\2\2\2\u011a\u09a0\3\2"+
		"\2\2\u011c\u09a6\3\2\2\2\u011e\u09a8\3\2\2\2\u0120\u09ab\3\2\2\2\u0122"+
		"\u09b0\3\2\2\2\u0124\u09c8\3\2\2\2\u0126\u09d7\3\2\2\2\u0128\u09d9\3\2"+
		"\2\2\u012a\u09ee\3\2\2\2\u012c\u09fd\3\2\2\2\u012e\u0a13\3\2\2\2\u0130"+
		"\u0a1a\3\2\2\2\u0132\u0a27\3\2\2\2\u0134\u0a2a\3\2\2\2\u0136\u0a3f\3\2"+
		"\2\2\u0138\u0a49\3\2\2\2\u013a\u0a52\3\2\2\2\u013c\u0a6d\3\2\2\2\u013e"+
		"\u0a98\3\2\2\2\u0140\u0aa8\3\2\2\2\u0142\u0ab5\3\2\2\2\u0144\u0abe\3\2"+
		"\2\2\u0146\u0ac0\3\2\2\2\u0148\u0adf\3\2\2\2\u014a\u0ae3\3\2\2\2\u014c"+
		"\u0aeb\3\2\2\2\u014e\u0aed\3\2\2\2\u0150\u0af5\3\2\2\2\u0152\u0b1c\3\2"+
		"\2\2\u0154\u0b28\3\2\2\2\u0156\u0b3d\3\2\2\2\u0158\u0b40\3\2\2\2\u015a"+
		"\u0b4c\3\2\2\2\u015c\u0b50\3\2\2\2\u015e\u0b69\3\2\2\2\u0160\u0b6b\3\2"+
		"\2\2\u0162\u0b7c\3\2\2\2\u0164\u0b83\3\2\2\2\u0166\u0b92\3\2\2\2\u0168"+
		"\u0ba9\3\2\2\2\u016a\u0baf\3\2\2\2\u016c\u0bb1\3\2\2\2\u016e\u0bc9\3\2"+
		"\2\2\u0170\u0be1\3\2\2\2\u0172\u0c05\3\2\2\2\u0174\u0c07\3\2\2\2\u0176"+
		"\u0c25\3\2\2\2\u0178\u0c2a\3\2\2\2\u017a\u0c2c\3\2\2\2\u017c\u0c38\3\2"+
		"\2\2\u017e\u0c48\3\2\2\2\u0180\u0c4a\3\2\2\2\u0182\u0c4d\3\2\2\2\u0184"+
		"\u0c67\3\2\2\2\u0186\u0c69\3\2\2\2\u0188\u0c6d\3\2\2\2\u018a\u0c7c\3\2"+
		"\2\2\u018c\u0c88\3\2\2\2\u018e\u0c90\3\2\2\2\u0190\u0c94\3\2\2\2\u0192"+
		"\u0c9f\3\2\2\2\u0194\u0ca4\3\2\2\2\u0196\u0cb1\3\2\2\2\u0198\u0cc5\3\2"+
		"\2\2\u019a\u0cce\3\2\2\2\u019c\u0cd0\3\2\2\2\u019e\u0cd7\3\2\2\2\u01a0"+
		"\u0cdc\3\2\2\2\u01a2\u0ce9\3\2\2\2\u01a4\u0cf1\3\2\2\2\u01a6\u0cf9\3\2"+
		"\2\2\u01a8\u0d07\3\2\2\2\u01aa\u0d09\3\2\2\2\u01ac\u0d15\3\2\2\2\u01ae"+
		"\u0d38\3\2\2\2\u01b0\u0d3a\3\2\2\2\u01b2\u0d48\3\2\2\2\u01b4\u0d4d\3\2"+
		"\2\2\u01b6\u0d5f\3\2\2\2\u01b8\u0d63\3\2\2\2\u01ba\u0d6b\3\2\2\2\u01bc"+
		"\u0d75\3\2\2\2\u01be\u0d7d\3\2\2\2\u01c0\u0d83\3\2\2\2\u01c2\u0d92\3\2"+
		"\2\2\u01c4\u0d95\3\2\2\2\u01c6\u0dae\3\2\2\2\u01c8\u0dc1\3\2\2\2\u01ca"+
		"\u0dc5\3\2\2\2\u01cc\u0dc8\3\2\2\2\u01ce\u0de4\3\2\2\2\u01d0\u0de9\3\2"+
		"\2\2\u01d2\u0dfc\3\2\2\2\u01d4\u0dfe\3\2\2\2\u01d6\u0e0e\3\2\2\2\u01d8"+
		"\u0e16\3\2\2\2\u01da\u0e1b\3\2\2\2\u01dc\u0e26\3\2\2\2\u01de\u0e31\3\2"+
		"\2\2\u01e0\u0e34\3\2\2\2\u01e2\u0e46\3\2\2\2\u01e4\u0e48\3\2\2\2\u01e6"+
		"\u0e57\3\2\2\2\u01e8\u0e62\3\2\2\2\u01ea\u0e70\3\2\2\2\u01ec\u0e75\3\2"+
		"\2\2\u01ee\u0e7a\3\2\2\2\u01f0\u0e87\3\2\2\2\u01f2\u0e89\3\2\2\2\u01f4"+
		"\u0e94\3\2\2\2\u01f6\u0e96\3\2\2\2\u01f8\u0e98\3\2\2\2\u01fa\u0ea3\3\2"+
		"\2\2\u01fc\u0ea5\3\2\2\2\u01fe\u0eca\3\2\2\2\u0200\u0ed3\3\2\2\2\u0202"+
		"\u0ed5\3\2\2\2\u0204\u0ee4\3\2\2\2\u0206\u0ef5\3\2\2\2\u0208\u0ef7\3\2"+
		"\2\2\u020a\u0f0c\3\2\2\2\u020c\u0f0e\3\2\2\2\u020e\u0f12\3\2\2\2\u0210"+
		"\u0f1b\3\2\2\2\u0212\u0f1d\3\2\2\2\u0214\u0f25\3\2\2\2\u0216\u0f2d\3\2"+
		"\2\2\u0218\u0f50\3\2\2\2\u021a\u0f52\3\2\2\2\u021c\u0f70\3\2\2\2\u021e"+
		"\u0f72\3\2\2\2\u0220\u0f82\3\2\2\2\u0222\u0f85\3\2\2\2\u0224\u0f87\3\2"+
		"\2\2\u0226\u0fb6\3\2\2\2\u0228\u0fba\3\2\2\2\u022a\u0fbd\3\2\2\2\u022c"+
		"\u0fd0\3\2\2\2\u022e\u0fd8\3\2\2\2\u0230\u0fea\3\2\2\2\u0232\u0ff1\3\2"+
		"\2\2\u0234\u100a\3\2\2\2\u0236\u100c\3\2\2\2\u0238\u1010\3\2\2\2\u023a"+
		"\u1019\3\2\2\2\u023c\u115e\3\2\2\2\u023e\u1160\3\2\2\2\u0240\u1162\3\2"+
		"\2\2\u0242\u1164\3\2\2\2\u0244\u1166\3\2\2\2\u0246\u1173\3\2\2\2\u0248"+
		"\u117c\3\2\2\2\u024a\u1185\3\2\2\2\u024c\u1187\3\2\2\2\u024e\u1198\3\2"+
		"\2\2\u0250\u119e\3\2\2\2\u0252\u11a9\3\2\2\2\u0254\u11ab\3\2\2\2\u0256"+
		"\u11bf\3\2\2\2\u0258\u11cd\3\2\2\2\u025a\u11df\3\2\2\2\u025c\u11f4\3\2"+
		"\2\2\u025e\u1201\3\2\2\2\u0260\u1204\3\2\2\2\u0262\u120d\3\2\2\2\u0264"+
		"\u1213\3\2\2\2\u0266\u121b\3\2\2\2\u0268\u121e\3\2\2\2\u026a\u1229\3\2"+
		"\2\2\u026c\u1231\3\2\2\2\u026e\u1236\3\2\2\2\u0270\u123f\3\2\2\2\u0272"+
		"\u1248\3\2\2\2\u0274\u124a\3\2\2\2\u0276\u1250\3\2\2\2\u0278\u1252\3\2"+
		"\2\2\u027a\u1260\3\2\2\2\u027c\u1264\3\2\2\2\u027e\u1266\3\2\2\2\u0280"+
		"\u1268\3\2\2\2\u0282\u126d\3\2\2\2\u0284\u1285\3\2\2\2\u0286\u1289\3\2"+
		"\2\2\u0288\u128b\3\2\2\2\u028a\u128d\3\2\2\2\u028c\u128f\3\2\2\2\u028e"+
		"\u1291\3\2\2\2\u0290\u1293\3\2\2\2\u0292\u1295\3\2\2\2\u0294\u1297\3\2"+
		"\2\2\u0296\u12a3\3\2\2\2\u0298\u12a5\3\2\2\2\u029a\u12aa\3\2\2\2\u029c"+
		"\u12ac\3\2\2\2\u029e\u12ae\3\2\2\2\u02a0\u12b0\3\2\2\2\u02a2\u12b8\3\2"+
		"\2\2\u02a4\u12ba\3\2\2\2\u02a6\u12c6\3\2\2\2\u02a8\u12c8\3\2\2\2\u02aa"+
		"\u12d0\3\2\2\2\u02ac\u12d8\3\2\2\2\u02ae\u12e0\3\2\2\2\u02b0\u12e5\3\2"+
		"\2\2\u02b2\u12ea\3\2\2\2\u02b4\u12f9\3\2\2\2\u02b6\u12fb\3\2\2\2\u02b8"+
		"\u12ff\3\2\2\2\u02ba\u1303\3\2\2\2\u02bc\u1305\3\2\2\2\u02be\u130a\3\2"+
		"\2\2\u02c0\u130c\3\2\2\2\u02c2\u1314\3\2\2\2\u02c4\u131e\3\2\2\2\u02c6"+
		"\u1326\3\2\2\2\u02c8\u132f\3\2\2\2\u02ca\u133e\3\2\2\2\u02cc\u1353\3\2"+
		"\2\2\u02ce\u137d\3\2\2\2\u02d0\u1384\3\2\2\2\u02d2\u1390\3\2\2\2\u02d4"+
		"\u13ae\3\2\2\2\u02d6\u13b0\3\2\2\2\u02d8\u13f7\3\2\2\2\u02da\u13fc\3\2"+
		"\2\2\u02dc\u140f\3\2\2\2\u02de\u1419\3\2\2\2\u02e0\u1428\3\2\2\2\u02e2"+
		"\u1470\3\2\2\2\u02e4\u1472\3\2\2\2\u02e6\u1474\3\2\2\2\u02e8\u1477\3\2"+
		"\2\2\u02ea\u147b\3\2\2\2\u02ec\u1481\3\2\2\2\u02ee\u148a\3\2\2\2\u02f0"+
		"\u148f\3\2\2\2\u02f2\u1494\3\2\2\2\u02f4\u1499\3\2\2\2\u02f6\u149b\3\2"+
		"\2\2\u02f8\u149f\3\2\2\2\u02fa\u02fc\n\2\2\2\u02fb\u02fa\3\2\2\2\u02fc"+
		"\u02fd\3\2\2\2\u02fd\u02fb\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\3\3\2\2\2"+
		"\u02ff\u0301\5\b\5\2\u0300\u02ff\3\2\2\2\u0301\u0304\3\2\2\2\u0302\u0300"+
		"\3\2\2\2\u0302\u0303\3\2\2\2\u0303\u0305\3\2\2\2\u0304\u0302\3\2\2\2\u0305"+
		"\u0306\7\2\2\3\u0306\5\3\2\2\2\u0307\u030a\5\b\5\2\u0308\u030a\5\u026c"+
		"\u0137\2\u0309\u0307\3\2\2\2\u0309\u0308\3\2\2\2\u030a\u030d\3\2\2\2\u030b"+
		"\u0309\3\2\2\2\u030b\u030c\3\2\2\2\u030c\u030e\3\2\2\2\u030d\u030b\3\2"+
		"\2\2\u030e\u030f\7\2\2\3\u030f\7\3\2\2\2\u0310\u0324\5\f\7\2\u0311\u0324"+
		"\5\34\17\2\u0312\u0324\5.\30\2\u0313\u0324\5\u00a6T\2\u0314\u0324\5\64"+
		"\33\2\u0315\u0324\5Z.\2\u0316\u0324\5\16\b\2\u0317\u0324\5\60\31\2\u0318"+
		"\u0324\5\36\20\2\u0319\u0324\5\u00a8U\2\u031a\u0324\5\66\34\2\u031b\u0324"+
		"\5n8\2\u031c\u0324\5\n\6\2\u031d\u0324\5\32\16\2\u031e\u0324\5,\27\2\u031f"+
		"\u0324\5\u00a4S\2\u0320\u0324\5\62\32\2\u0321\u0324\5X-\2\u0322\u0324"+
		"\5\u011a\u008e\2\u0323\u0310\3\2\2\2\u0323\u0311\3\2\2\2\u0323\u0312\3"+
		"\2\2\2\u0323\u0313\3\2\2\2\u0323\u0314\3\2\2\2\u0323\u0315\3\2\2\2\u0323"+
		"\u0316\3\2\2\2\u0323\u0317\3\2\2\2\u0323\u0318\3\2\2\2\u0323\u0319\3\2"+
		"\2\2\u0323\u031a\3\2\2\2\u0323\u031b\3\2\2\2\u0323\u031c\3\2\2\2\u0323"+
		"\u031d\3\2\2\2\u0323\u031e\3\2\2\2\u0323\u031f\3\2\2\2\u0323\u0320\3\2"+
		"\2\2\u0323\u0321\3\2\2\2\u0323\u0322\3\2\2\2\u0324\t\3\2\2\2\u0325\u0326"+
		"\7r\2\2\u0326\u0327\7\u009a\2\2\u0327\u0328\5\u02ae\u0158\2\u0328\u0329"+
		"\7\u01f7\2\2\u0329\13\3\2\2\2\u032a\u032b\7\n\2\2\u032b\u032c\7\u009a"+
		"\2\2\u032c\u032d\5\u02ae\u0158\2\u032d\u032f\7?\2\2\u032e\u0330\7^\2\2"+
		"\u032f\u032e\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0334\3\2\2\2\u0331\u0333"+
		"\5\u00b0Y\2\u0332\u0331\3\2\2\2\u0333\u0336\3\2\2\2\u0334\u0332\3\2\2"+
		"\2\u0334\u0335\3\2\2\2\u0335\u0339\3\2\2\2\u0336\u0334\3\2\2\2\u0337\u0338"+
		"\7\u013c\2\2\u0338\u033a\7\u015a\2\2\u0339\u0337\3\2\2\2\u0339\u033a\3"+
		"\2\2\2\u033a\u033b\3\2\2\2\u033b\u033c\7\u01f7\2\2\u033c\r\3\2\2\2\u033d"+
		"\u0340\7O\2\2\u033e\u033f\7\u010b\2\2\u033f\u0341\7\u0135\2\2\u0340\u033e"+
		"\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0343\3\2\2\2\u0342\u033d\3\2\2\2\u0342"+
		"\u0343\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0345\7\u009a\2\2\u0345\u0351"+
		"\5\u02ae\u0158\2\u0346\u0347\7\u01eb\2\2\u0347\u034c\5\u00bc_\2\u0348"+
		"\u0349\7\u01f1\2\2\u0349\u034b\5\u00bc_\2\u034a\u0348\3\2\2\2\u034b\u034e"+
		"\3\2\2\2\u034c\u034a\3\2\2\2\u034c\u034d\3\2\2\2\u034d\u034f\3\2\2\2\u034e"+
		"\u034c\3\2\2\2\u034f\u0350\7\u01ec\2\2\u0350\u0352\3\2\2\2\u0351\u0346"+
		"\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0354\7\u013a\2"+
		"\2\u0354\u035b\5\u02d2\u016a\2\u0355\u035a\5\u00aeX\2\u0356\u035a\5\20"+
		"\t\2\u0357\u035a\5\24\13\2\u0358\u035a\7k\2\2\u0359\u0355\3\2\2\2\u0359"+
		"\u0356\3\2\2\2\u0359\u0357\3\2\2\2\u0359\u0358\3\2\2\2\u035a\u035d\3\2"+
		"\2\2\u035b\u0359\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u0372\3\2\2\2\u035d"+
		"\u035b\3\2\2\2\u035e\u0360\7\u011d\2\2\u035f\u035e\3\2\2\2\u035f\u0360"+
		"\3\2\2\2\u0360\u0361\3\2\2\2\u0361\u036d\t\3\2\2\u0362\u0364\7a\2\2\u0363"+
		"\u0362\3\2\2\2\u0363\u0364\3\2\2\2\u0364\u0368\3\2\2\2\u0365\u0367\5\u00c0"+
		"a\2\u0366\u0365\3\2\2\2\u0367\u036a\3\2\2\2\u0368\u0366\3\2\2\2\u0368"+
		"\u0369\3\2\2\2\u0369\u036b\3\2\2\2\u036a\u0368\3\2\2\2\u036b\u036e\5\u010a"+
		"\u0086\2\u036c\u036e\5\u00b2Z\2\u036d\u0363\3\2\2\2\u036d\u036c\3\2\2"+
		"\2\u036e\u0373\3\2\2\2\u036f\u0370\t\4\2\2\u0370\u0371\7\u019a\2\2\u0371"+
		"\u0373\5\u0298\u014d\2\u0372\u035f\3\2\2\2\u0372\u036f\3\2\2\2\u0373\u0374"+
		"\3\2\2\2\u0374\u0375\7\u01f7\2\2\u0375\17\3\2\2\2\u0376\u0378\7\u0115"+
		"\2\2\u0377\u0379\5\22\n\2\u0378\u0377\3\2\2\2\u0378\u0379\3\2\2\2\u0379"+
		"\21\3\2\2\2\u037a\u037b\7\u01eb\2\2\u037b\u037c\7\u0118\2\2\u037c\u037d"+
		"\5\u01f4\u00fb\2\u037d\u038b\7(\2\2\u037e\u038c\7\r\2\2\u037f\u0380\t"+
		"\5\2\2\u0380\u0381\7\u01eb\2\2\u0381\u0386\5\u02c0\u0161\2\u0382\u0383"+
		"\7\u01f1\2\2\u0383\u0385\5\u02c0\u0161\2\u0384\u0382\3\2\2\2\u0385\u0388"+
		"\3\2\2\2\u0386\u0384\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u0389\3\2\2\2\u0388"+
		"\u0386\3\2\2\2\u0389\u038a\7\u01ec\2\2\u038a\u038c\3\2\2\2\u038b\u037e"+
		"\3\2\2\2\u038b\u037f\3\2\2\2\u038c\u038e\3\2\2\2\u038d\u038f\5\30\r\2"+
		"\u038e\u038d\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0391"+
		"\7\u01ec\2\2\u0391\23\3\2\2\2\u0392\u0394\7\u0139\2\2\u0393\u0395\5\26"+
		"\f\2\u0394\u0393\3\2\2\2\u0394\u0395\3\2\2\2\u0395\25\3\2\2\2\u0396\u0397"+
		"\7\u0133\2\2\u0397\u0398\7\u01eb\2\2\u0398\u039d\5\u02c2\u0162\2\u0399"+
		"\u039a\7\u01f1\2\2\u039a\u039c\5\u02c2\u0162\2\u039b\u0399\3\2\2\2\u039c"+
		"\u039f\3\2\2\2\u039d\u039b\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u03a0\3\2"+
		"\2\2\u039f\u039d\3\2\2\2\u03a0\u03a1\7\u01ec\2\2\u03a1\27\3\2\2\2\u03a2"+
		"\u03a3\t\6\2\2\u03a3\u03a4\5\u01f4\u00fb\2\u03a4\u03a5\7(\2\2\u03a5\u03a6"+
		"\7\u01eb\2\2\u03a6\u03ab\5\u02c0\u0161\2\u03a7\u03a8\7\u01f1\2\2\u03a8"+
		"\u03aa\5\u02c0\u0161\2\u03a9\u03a7\3\2\2\2\u03aa\u03ad\3\2\2\2\u03ab\u03a9"+
		"\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03ae\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ae"+
		"\u03af\7\u01ec\2\2\u03af\31\3\2\2\2\u03b0\u03b1\7r\2\2\u03b1\u03b3\7\u0114"+
		"\2\2\u03b2\u03b4\7#\2\2\u03b3\u03b2\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4"+
		"\u03b5\3\2\2\2\u03b5\u03b6\5\u0296\u014c\2\u03b6\u03b7\7\u01f7\2\2\u03b7"+
		"\33\3\2\2\2\u03b8\u03b9\7\n\2\2\u03b9\u03ba\7\u0114\2\2\u03ba\u03bb\5"+
		"\u0296\u014c\2\u03bb\u03bd\7?\2\2\u03bc\u03be\7^\2\2\u03bd\u03bc\3\2\2"+
		"\2\u03bd\u03be\3\2\2\2\u03be\u03c0\3\2\2\2\u03bf\u03c1\t\7\2\2\u03c0\u03bf"+
		"\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c5\3\2\2\2\u03c2\u03c4\5\u00b0Y"+
		"\2\u03c3\u03c2\3\2\2\2\u03c4\u03c7\3\2\2\2\u03c5\u03c3\3\2\2\2\u03c5\u03c6"+
		"\3\2\2\2\u03c6\u03ca\3\2\2\2\u03c7\u03c5\3\2\2\2\u03c8\u03c9\7\u013c\2"+
		"\2\u03c9\u03cb\7\u015a\2\2\u03ca\u03c8\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb"+
		"\u03cc\3\2\2\2\u03cc\u03cd\7\u01f7\2\2\u03cd\35\3\2\2\2\u03ce\u03d1\7"+
		"O\2\2\u03cf\u03d0\7\u010b\2\2\u03d0\u03d2\7\u0135\2\2\u03d1\u03cf\3\2"+
		"\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d6\7\u0114\2\2\u03d4"+
		"\u03d7\5\"\22\2\u03d5\u03d7\5 \21\2\u03d6\u03d4\3\2\2\2\u03d6\u03d5\3"+
		"\2\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03d9\7\u01f7\2\2"+
		"\u03d9\37\3\2\2\2\u03da\u03db\7#\2\2\u03db\u03dc\5\u0296\u014c\2\u03dc"+
		"\u03e0\t\3\2\2\u03dd\u03df\5*\26\2\u03de\u03dd\3\2\2\2\u03df\u03e2\3\2"+
		"\2\2\u03e0\u03de\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e9\3\2\2\2\u03e2"+
		"\u03e0\3\2\2\2\u03e3\u03e4\7\33\2\2\u03e4\u03ea\5\u00e0q\2\u03e5\u03e7"+
		"\7{\2\2\u03e6\u03e8\5\u0296\u014c\2\u03e7\u03e6\3\2\2\2\u03e7\u03e8\3"+
		"\2\2\2\u03e8\u03ea\3\2\2\2\u03e9\u03e3\3\2\2\2\u03e9\u03e5\3\2\2\2\u03ea"+
		"!\3\2\2\2\u03eb\u03ed\5\u0296\u014c\2\u03ec\u03ee\5\u00aeX\2\u03ed\u03ec"+
		"\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03f3\t\3\2\2\u03f0"+
		"\u03f2\5$\23\2\u03f1\u03f0\3\2\2\2\u03f2\u03f5\3\2\2\2\u03f3\u03f1\3\2"+
		"\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f6\3\2\2\2\u03f5\u03f3\3\2\2\2\u03f6"+
		"\u03f8\7{\2\2\u03f7\u03f9\5\u0296\u014c\2\u03f8\u03f7\3\2\2\2\u03f8\u03f9"+
		"\3\2\2\2\u03f9#\3\2\2\2\u03fa\u0404\5\u00c2b\2\u03fb\u0404\5\u00c4c\2"+
		"\u03fc\u0404\5\u00c6d\2\u03fd\u0404\5\u00caf\2\u03fe\u0404\5\u00ccg\2"+
		"\u03ff\u0404\5\u00ceh\2\u0400\u0404\5\u00d6l\2\u0401\u0404\5&\24\2\u0402"+
		"\u0404\5(\25\2\u0403\u03fa\3\2\2\2\u0403\u03fb\3\2\2\2\u0403\u03fc\3\2"+
		"\2\2\u0403\u03fd\3\2\2\2\u0403\u03fe\3\2\2\2\u0403\u03ff\3\2\2\2\u0403"+
		"\u0400\3\2\2\2\u0403\u0401\3\2\2\2\u0403\u0402\3\2\2\2\u0404%\3\2\2\2"+
		"\u0405\u0406\7\u0128\2\2\u0406\u0412\5\u02b0\u0159\2\u0407\u0408\7\u01eb"+
		"\2\2\u0408\u040d\5\u00bc_\2\u0409\u040a\7\u01f1\2\2\u040a\u040c\5\u00bc"+
		"_\2\u040b\u0409\3\2\2\2\u040c\u040f\3\2\2\2\u040d\u040b\3\2\2\2\u040d"+
		"\u040e\3\2\2\2\u040e\u0410\3\2\2\2\u040f\u040d\3\2\2\2\u0410\u0411\7\u01ec"+
		"\2\2\u0411\u0413\3\2\2\2\u0412\u0407\3\2\2\2\u0412\u0413\3\2\2\2\u0413"+
		"\u0414\3\2\2\2\u0414\u0415\7\u01f7\2\2\u0415\'\3\2\2\2\u0416\u0417\7\u009a"+
		"\2\2\u0417\u0423\5\u02ae\u0158\2\u0418\u0419\7\u01eb\2\2\u0419\u041e\5"+
		"\u00bc_\2\u041a\u041b\7\u01f1\2\2\u041b\u041d\5\u00bc_\2\u041c\u041a\3"+
		"\2\2\2\u041d\u0420\3\2\2\2\u041e\u041c\3\2\2\2\u041e\u041f\3\2\2\2\u041f"+
		"\u0421\3\2\2\2\u0420\u041e\3\2\2\2\u0421\u0422\7\u01ec\2\2\u0422\u0424"+
		"\3\2\2\2\u0423\u0418\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0425\3\2\2\2\u0425"+
		"\u0426\7\u013a\2\2\u0426\u0428\5\u02d2\u016a\2\u0427\u0429\7k\2\2\u0428"+
		"\u0427\3\2\2\2\u0428\u0429\3\2\2\2\u0429\u042b\3\2\2\2\u042a\u042c\7\u0139"+
		"\2\2\u042b\u042a\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u042d\3\2\2\2\u042d"+
		"\u042e\7\u01f7\2\2\u042e)\3\2\2\2\u042f\u043a\5\u00c2b\2\u0430\u043a\5"+
		"\u00c4c\2\u0431\u043a\5\u00c6d\2\u0432\u043a\5\u00caf\2\u0433\u043a\5"+
		"\u00ceh\2\u0434\u043a\5\u00d6l\2\u0435\u043a\5\60\31\2\u0436\u043a\5\16"+
		"\b\2\u0437\u043a\5&\24\2\u0438\u043a\5(\25\2\u0439\u042f\3\2\2\2\u0439"+
		"\u0430\3\2\2\2\u0439\u0431\3\2\2\2\u0439\u0432\3\2\2\2\u0439\u0433\3\2"+
		"\2\2\u0439\u0434\3\2\2\2\u0439\u0435\3\2\2\2\u0439\u0436\3\2\2\2\u0439"+
		"\u0437\3\2\2\2\u0439\u0438\3\2\2\2\u043a+\3\2\2\2\u043b\u043c\7r\2\2\u043c"+
		"\u043d\7\u0128\2\2\u043d\u043e\5\u02b0\u0159\2\u043e\u043f\7\u01f7\2\2"+
		"\u043f-\3\2\2\2\u0440\u0441\7\n\2\2\u0441\u0442\7\u0128\2\2\u0442\u0443"+
		"\5\u02b0\u0159\2\u0443\u0445\7?\2\2\u0444\u0446\7^\2\2\u0445\u0444\3\2"+
		"\2\2\u0445\u0446\3\2\2\2\u0446\u044a\3\2\2\2\u0447\u0449\5\u00b0Y\2\u0448"+
		"\u0447\3\2\2\2\u0449\u044c\3\2\2\2\u044a\u0448\3\2\2\2\u044a\u044b\3\2"+
		"\2\2\u044b\u044f\3\2\2\2\u044c\u044a\3\2\2\2\u044d\u044e\7\u013c\2\2\u044e"+
		"\u0450\7\u015a\2\2\u044f\u044d\3\2\2\2\u044f\u0450\3\2\2\2\u0450\u0451"+
		"\3\2\2\2\u0451\u0452\7\u01f7\2\2\u0452/\3\2\2\2\u0453\u0456\7O\2\2\u0454"+
		"\u0455\7\u010b\2\2\u0455\u0457\7\u0135\2\2\u0456\u0454\3\2\2\2\u0456\u0457"+
		"\3\2\2\2\u0457\u0459\3\2\2\2\u0458\u0453\3\2\2\2\u0458\u0459\3\2\2\2\u0459"+
		"\u045a\3\2\2\2\u045a\u045b\7\u0128\2\2\u045b\u0467\5\u02b0\u0159\2\u045c"+
		"\u045d\7\u01eb\2\2\u045d\u0462\5\u00bc_\2\u045e\u045f\7\u01f1\2\2\u045f"+
		"\u0461\5\u00bc_\2\u0460\u045e\3\2\2\2\u0461\u0464\3\2\2\2\u0462\u0460"+
		"\3\2\2\2\u0462\u0463\3\2\2\2\u0463\u0465\3\2\2\2\u0464\u0462\3\2\2\2\u0465"+
		"\u0466\7\u01ec\2\2\u0466\u0468\3\2\2\2\u0467\u045c\3\2\2\2\u0467\u0468"+
		"\3\2\2\2\u0468\u046a\3\2\2\2\u0469\u046b\5\u00aeX\2\u046a\u0469\3\2\2"+
		"\2\u046a\u046b\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u0479\t\3\2\2\u046d\u046f"+
		"\7a\2\2\u046e\u046d\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0473\3\2\2\2\u0470"+
		"\u0472\5\u00c0a\2\u0471\u0470\3\2\2\2\u0472\u0475\3\2\2\2\u0473\u0471"+
		"\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u0476\3\2\2\2\u0475\u0473\3\2\2\2\u0476"+
		"\u047a\5\u010a\u0086\2\u0477\u047a\5\u00b2Z\2\u0478\u047a\7\u008a\2\2"+
		"\u0479\u046e\3\2\2\2\u0479\u0477\3\2\2\2\u0479\u0478\3\2\2\2\u047a\u047b"+
		"\3\2\2\2\u047b\u047c\7\u01f7\2\2\u047c\61\3\2\2\2\u047d\u047e\7r\2\2\u047e"+
		"\u047f\7\u0189\2\2\u047f\u0480\5\u02b2\u015a\2\u0480\u0481\7\u01f7\2\2"+
		"\u0481\63\3\2\2\2\u0482\u0483\7\n\2\2\u0483\u0484\7\u0189\2\2\u0484\u0497"+
		"\5\u02b2\u015a\2\u0485\u0498\t\b\2\2\u0486\u0487\7\u0134\2\2\u0487\u0488"+
		"\7\u0184\2\2\u0488\u0498\5\u02b2\u015a\2\u0489\u048b\7?\2\2\u048a\u048c"+
		"\7^\2\2\u048b\u048a\3\2\2\2\u048b\u048c\3\2\2\2\u048c\u0490\3\2\2\2\u048d"+
		"\u048f\5\u00b0Y\2\u048e\u048d\3\2\2\2\u048f\u0492\3\2\2\2\u0490\u048e"+
		"\3\2\2\2\u0490\u0491\3\2\2\2\u0491\u0495\3\2\2\2\u0492\u0490\3\2\2\2\u0493"+
		"\u0494\7\u013c\2\2\u0494\u0496\7\u015a\2\2\u0495\u0493\3\2\2\2\u0495\u0496"+
		"\3\2\2\2\u0496\u0498\3\2\2\2\u0497\u0485\3\2\2\2\u0497\u0486\3\2\2\2\u0497"+
		"\u0489\3\2\2\2\u0498\u0499\3\2\2\2\u0499\u049a\7\u01f7\2\2\u049a\65\3"+
		"\2\2\2\u049b\u049e\7O\2\2\u049c\u049d\7\u010b\2\2\u049d\u049f\7\u0135"+
		"\2\2\u049e\u049c\3\2\2\2\u049e\u049f\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0"+
		"\u04a1\7\u0189\2\2\u04a1\u04a5\5\u02b2\u015a\2\u04a2\u04a6\5<\37\2\u04a3"+
		"\u04a6\5@!\2\u04a4\u04a6\5B\"\2\u04a5\u04a2\3\2\2\2\u04a5\u04a3\3\2\2"+
		"\2\u04a5\u04a4\3\2\2\2\u04a6\u04a8\3\2\2\2\u04a7\u04a9\58\35\2\u04a8\u04a7"+
		"\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04ab\3\2\2\2\u04aa\u04ac\t\b\2\2\u04ab"+
		"\u04aa\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u04ae\3\2\2\2\u04ad\u04af\5:"+
		"\36\2\u04ae\u04ad\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0"+
		"\u04b1\5D#\2\u04b1\u04b2\7\u01f7\2\2\u04b2\67\3\2\2\2\u04b3\u04b4\7\u0094"+
		"\2\2\u04b4\u04b9\5\u02b2\u015a\2\u04b5\u04b6\7\u01f1\2\2\u04b6\u04b8\5"+
		"\u02b2\u015a\2\u04b7\u04b5\3\2\2\2\u04b8\u04bb\3\2\2\2\u04b9\u04b7\3\2"+
		"\2\2\u04b9\u04ba\3\2\2\2\u04ba9\3\2\2\2\u04bb\u04b9\3\2\2\2\u04bc\u04bd"+
		"\7\u01a8\2\2\u04bd\u04be\7\u01eb\2\2\u04be\u04bf\5\u01f0\u00f9\2\u04bf"+
		"\u04c0\7\u01ec\2\2\u04c0;\3\2\2\2\u04c1\u04c6\7\32\2\2\u04c2\u04c6\7\6"+
		"\2\2\u04c3\u04c4\7\u00b5\2\2\u04c4\u04c6\7\u0103\2\2\u04c5\u04c1\3\2\2"+
		"\2\u04c5\u04c2\3\2\2\2\u04c5\u04c3\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04c9"+
		"\5N(\2\u04c8\u04ca\5T+\2\u04c9\u04c8\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca"+
		"\u04cc\3\2\2\2\u04cb\u04cd\5> \2\u04cc\u04cb\3\2\2\2\u04cc\u04cd\3\2\2"+
		"\2\u04cd=\3\2\2\2\u04ce\u04cf\7\u0095\2\2\u04cf\u04d0\7t\2\2\u04d0\u04d1"+
		"\7\u0142\2\2\u04d1?\3\2\2\2\u04d2\u04d3\7\u0095\2\2\u04d3\u04d5\5N(\2"+
		"\u04d4\u04d6\5T+\2\u04d5\u04d4\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6A\3\2"+
		"\2\2\u04d7\u04d8\t\t\2\2\u04d8\u04dd\5L\'\2\u04d9\u04da\7\u010b\2\2\u04da"+
		"\u04dc\5L\'\2\u04db\u04d9\3\2\2\2\u04dc\u04df\3\2\2\2\u04dd\u04db\3\2"+
		"\2\2\u04dd\u04de\3\2\2\2\u04de\u04e0\3\2\2\2\u04df\u04dd\3\2\2\2\u04e0"+
		"\u04e8\7\u0107\2\2\u04e1\u04e9\7X\2\2\u04e2\u04e3\5\u0292\u014a\2\u04e3"+
		"\u04e4\7\u01e4\2\2\u04e4\u04e6\3\2\2\2\u04e5\u04e2\3\2\2\2\u04e5\u04e6"+
		"\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7\u04e9\7\u0149\2\2\u04e8\u04e1\3\2\2"+
		"\2\u04e8\u04e5\3\2\2\2\u04e9C\3\2\2\2\u04ea\u04eb\7@\2\2\u04eb\u04f0\7"+
		"\u0189\2\2\u04ec\u04ed\7,\2\2\u04ed\u04f0\5\u02ea\u0176\2\u04ee\u04f0"+
		"\5\u0110\u0089\2\u04ef\u04ea\3\2\2\2\u04ef\u04ec\3\2\2\2\u04ef\u04ee\3"+
		"\2\2\2\u04f0E\3\2\2\2\u04f1\u04f3\5\u0294\u014b\2\u04f2\u04f4\5\u02c8"+
		"\u0165\2\u04f3\u04f2\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4G\3\2\2\2\u04f5"+
		"\u04f6\7@\2\2\u04f6\u04fa\7\u0189\2\2\u04f7\u04f9\5\u00c0a\2\u04f8\u04f7"+
		"\3\2\2\2\u04f9\u04fc\3\2\2\2\u04fa\u04f8\3\2\2\2\u04fa\u04fb\3\2\2\2\u04fb"+
		"\u04fe\3\2\2\2\u04fc\u04fa\3\2\2\2\u04fd\u04ff\5J&\2\u04fe\u04fd\3\2\2"+
		"\2\u04ff\u0500\3\2\2\2\u0500\u04fe\3\2\2\2\u0500\u0501\3\2\2\2\u0501\u0502"+
		"\3\2\2\2\u0502\u0503\7{\2\2\u0503\u0504\5\u02b2\u015a\2\u0504I\3\2\2\2"+
		"\u0505\u0506\7\32\2\2\u0506\u0507\7\u016d\2\2\u0507\u0508\7\u00bc\2\2"+
		"\u0508\u0509\5\u0110\u0089\2\u0509\u050a\7\32\2\2\u050a\u050b\7\u016d"+
		"\2\2\u050b\u050c\7\u01f7\2\2\u050c\u052a\3\2\2\2\u050d\u050e\7\32\2\2"+
		"\u050e\u050f\7t\2\2\u050f\u0510\7\u0142\2\2\u0510\u0511\7\u00bc\2\2\u0511"+
		"\u0512\5\u0110\u0089\2\u0512\u0513\7\32\2\2\u0513\u0514\7t\2\2\u0514\u0515"+
		"\7\u0142\2\2\u0515\u0516\7\u01f7\2\2\u0516\u052a\3\2\2\2\u0517\u0518\7"+
		"\6\2\2\u0518\u0519\7\u016d\2\2\u0519\u051a\7\u00bc\2\2\u051a\u051b\5\u0110"+
		"\u0089\2\u051b\u051c\7\6\2\2\u051c\u051d\7\u016d\2\2\u051d\u051e\7\u01f7"+
		"\2\2\u051e\u052a\3\2\2\2\u051f\u0520\7\6\2\2\u0520\u0521\7t\2\2\u0521"+
		"\u0522\7\u0142\2\2\u0522\u0523\7\u00bc\2\2\u0523\u0524\5\u0110\u0089\2"+
		"\u0524\u0525\7\6\2\2\u0525\u0526\7t\2\2\u0526\u0527\7\u0142\2\2\u0527"+
		"\u0528\7\u01f7\2\2\u0528\u052a\3\2\2\2\u0529\u0505\3\2\2\2\u0529\u050d"+
		"\3\2\2\2\u0529\u0517\3\2\2\2\u0529\u051f\3\2\2\2\u052aK\3\2\2\2\u052b"+
		"\u0546\7\n\2\2\u052c\u0546\7\13\2\2\u052d\u052e\7\21\2\2\u052e\u0546\7"+
		"\u0170\2\2\u052f\u0546\7\24\2\2\u0530\u0546\7;\2\2\u0531\u0546\7O\2\2"+
		"\u0532\u0533\7n\2\2\u0533\u0546\7\u0170\2\2\u0534\u0546\7r\2\2\u0535\u0546"+
		"\7\u009c\2\2\u0536\u0546\7\u00f1\2\2\u0537\u0546\7\u0134\2\2\u0538\u0546"+
		"\7\u013e\2\2\u0539\u0546\7\u018c\2\2\u053a\u0546\7]\2\2\u053b\u0546\7"+
		"\u016c\2\2\u053c\u0546\7\u015d\2\2\u053d\u0546\7[\2\2\u053e\u0546\7\u00d3"+
		"\2\2\u053f\u0546\7\u00d2\2\2\u0540\u0546\7\u0156\2\2\u0541\u0546\7\u0177"+
		"\2\2\u0542\u0546\7X\2\2\u0543\u0546\7\u0149\2\2\u0544\u0546\7\u0094\2"+
		"\2\u0545\u052b\3\2\2\2\u0545\u052c\3\2\2\2\u0545\u052d\3\2\2\2\u0545\u052f"+
		"\3\2\2\2\u0545\u0530\3\2\2\2\u0545\u0531\3\2\2\2\u0545\u0532\3\2\2\2\u0545"+
		"\u0534\3\2\2\2\u0545\u0535\3\2\2\2\u0545\u0536\3\2\2\2\u0545\u0537\3\2"+
		"\2\2\u0545\u0538\3\2\2\2\u0545\u0539\3\2\2\2\u0545\u053a\3\2\2\2\u0545"+
		"\u053b\3\2\2\2\u0545\u053c\3\2\2\2\u0545\u053d\3\2\2\2\u0545\u053e\3\2"+
		"\2\2\u0545\u053f\3\2\2\2\u0545\u0540\3\2\2\2\u0545\u0541\3\2\2\2\u0545"+
		"\u0542\3\2\2\2\u0545\u0543\3\2\2\2\u0545\u0544\3\2\2\2\u0546M\3\2\2\2"+
		"\u0547\u054c\5P)\2\u0548\u0549\7\u010b\2\2\u0549\u054b\5P)\2\u054a\u0548"+
		"\3\2\2\2\u054b\u054e\3\2\2\2\u054c\u054a\3\2\2\2\u054c\u054d\3\2\2\2\u054d"+
		"\u054f\3\2\2\2\u054e\u054c\3\2\2\2\u054f\u0551\7\u0107\2\2\u0550\u0552"+
		"\5R*\2\u0551\u0550\3\2\2\2\u0551\u0552\3\2\2\2\u0552\u0553\3\2\2\2\u0553"+
		"\u0554\5\u02c2\u0162\2\u0554O\3\2\2\2\u0555\u055f\t\n\2\2\u0556\u0557"+
		"\7\u0103\2\2\u0557\u055c\5\u02c0\u0161\2\u0558\u0559\7\u01f1\2\2\u0559"+
		"\u055b\5\u02c0\u0161\2\u055a\u0558\3\2\2\2\u055b\u055e\3\2\2\2\u055c\u055a"+
		"\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u0560\3\2\2\2\u055e\u055c\3\2\2\2\u055f"+
		"\u0556\3\2\2\2\u055f\u0560\3\2\2\2\u0560Q\3\2\2\2\u0561\u0562\7\u00ee"+
		"\2\2\u0562\u0563\7\u0178\2\2\u0563\u0564\5\u02c2\u0162\2\u0564\u0565\7"+
		"\u0103\2\2\u0565S\3\2\2\2\u0566\u0568\7\u0131\2\2\u0567\u0569\5V,\2\u0568"+
		"\u0567\3\2\2\2\u0569\u056a\3\2\2\2\u056a\u0568\3\2\2\2\u056a\u056b\3\2"+
		"\2\2\u056bU\3\2\2\2\u056c\u056d\t\13\2\2\u056d\u056e\5\u027a\u013e\2\u056e"+
		"W\3\2\2\2\u056f\u0570\7r\2\2\u0570\u0572\7\u018d\2\2\u0571\u0573\7#\2"+
		"\2\u0572\u0571\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0576"+
		"\5\u02a8\u0155\2\u0575\u0577\t\f\2\2\u0576\u0575\3\2\2\2\u0576\u0577\3"+
		"\2\2\2\u0577\u0578\3\2\2\2\u0578\u0579\7\u01f7\2\2\u0579Y\3\2\2\2\u057a"+
		"\u057b\7\n\2\2\u057b\u057c\7\u018d\2\2\u057c\u0582\5\u02a8\u0155\2\u057d"+
		"\u0583\5\\/\2\u057e\u0583\5^\60\2\u057f\u0583\5`\61\2\u0580\u0583\5h\65"+
		"\2\u0581\u0583\5\u008aF\2\u0582\u057d\3\2\2\2\u0582\u057e\3\2\2\2\u0582"+
		"\u057f\3\2\2\2\u0582\u0580\3\2\2\2\u0582\u0581\3\2\2\2\u0583\u0585\3\2"+
		"\2\2\u0584\u0586\5j\66\2\u0585\u0584\3\2\2\2\u0585\u0586\3\2\2\2\u0586"+
		"\u0587\3\2\2\2\u0587\u0588\7\u01f7\2\2\u0588[\3\2\2\2\u0589\u058b\7?\2"+
		"\2\u058a\u058c\7^\2\2\u058b\u058a\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u058e"+
		"\3\2\2\2\u058d\u058f\t\r\2\2\u058e\u058d\3\2\2\2\u058e\u058f\3\2\2\2\u058f"+
		"\u0593\3\2\2\2\u0590\u0592\5\u00b0Y\2\u0591\u0590\3\2\2\2\u0592\u0595"+
		"\3\2\2\2\u0593\u0591\3\2\2\2\u0593\u0594\3\2\2\2\u0594\u0598\3\2\2\2\u0595"+
		"\u0593\3\2\2\2\u0596\u0597\7\u013c\2\2\u0597\u0599\7\u015a\2\2\u0598\u0596"+
		"\3\2\2\2\u0598\u0599\3\2\2\2\u0599]\3\2\2\2\u059a\u059c\7\u0135\2\2\u059b"+
		"\u059d\5\u00aeX\2\u059c\u059b\3\2\2\2\u059c\u059d\3\2\2\2\u059d\u059e"+
		"\3\2\2\2\u059e\u059f\7\17\2\2\u059f\u05a0\7\u0102\2\2\u05a0\u05a1\7\u01eb"+
		"\2\2\u05a1\u05a6\5\u008cG\2\u05a2\u05a3\7\u01f1\2\2\u05a3\u05a5\5\u008c"+
		"G\2\u05a4\u05a2\3\2\2\2\u05a5\u05a8\3\2\2\2\u05a6\u05a4\3\2\2\2\u05a6"+
		"\u05a7\3\2\2\2\u05a7\u05a9\3\2\2\2\u05a8\u05a6\3\2\2\2\u05a9\u05aa\7\u01ec"+
		"\2\2\u05aa_\3\2\2\2\u05ab\u05b0\5b\62\2\u05ac\u05ad\7\u01f1\2\2\u05ad"+
		"\u05af\5b\62\2\u05ae\u05ac\3\2\2\2\u05af\u05b2\3\2\2\2\u05b0\u05ae\3\2"+
		"\2\2\u05b0\u05b1\3\2\2\2\u05b1a\3\2\2\2\u05b2\u05b0\3\2\2\2\u05b3\u05b6"+
		"\t\16\2\2\u05b4\u05b7\5\u009cO\2\u05b5\u05b7\5\u0094K\2\u05b6\u05b4\3"+
		"\2\2\2\u05b6\u05b5\3\2\2\2\u05b7c\3\2\2\2\u05b8\u05b9\t\17\2\2\u05b9\u05c6"+
		"\7\23\2\2\u05ba\u05c7\5f\64\2\u05bb\u05bc\7\u01eb\2\2\u05bc\u05c1\5f\64"+
		"\2\u05bd\u05be\7\u01f1\2\2\u05be\u05c0\5f\64\2\u05bf\u05bd\3\2\2\2\u05c0"+
		"\u05c3\3\2\2\2\u05c1\u05bf\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\u05c4\3\2"+
		"\2\2\u05c3\u05c1\3\2\2\2\u05c4\u05c5\7\u01ec\2\2\u05c5\u05c7\3\2\2\2\u05c6"+
		"\u05ba\3\2\2\2\u05c6\u05bb\3\2\2\2\u05c7e\3\2\2\2\u05c8\u05ca\5\u028a"+
		"\u0146\2\u05c9\u05cb\5\u02d2\u016a\2\u05ca\u05c9\3\2\2\2\u05ca\u05cb\3"+
		"\2\2\2\u05cbg\3\2\2\2\u05cc\u05d2\7\u00e3\2\2\u05cd\u05ce\7\u00cd\2\2"+
		"\u05ce\u05d3\5\u01f4\u00fb\2\u05cf\u05d0\7u\2\2\u05d0\u05d1\7\u018d\2"+
		"\2\u05d1\u05d3\5\u02d2\u016a\2\u05d2\u05cd\3\2\2\2\u05d2\u05cf\3\2\2\2"+
		"\u05d3i\3\2\2\2\u05d4\u05e5\7\u00bb\2\2\u05d5\u05df\7.\2\2\u05d6\u05d7"+
		"\7J\2\2\u05d7\u05d8\7\u0184\2\2\u05d8\u05e0\7\u0174\2\2\u05d9\u05db\7"+
		"\u00fb\2\2\u05da\u05d9\3\2\2\2\u05da\u05db\3\2\2\2\u05db\u05dc\3\2\2\2"+
		"\u05dc\u05dd\7\u00a8\2\2\u05dd\u05de\7\u0178\2\2\u05de\u05e0\7W\2\2\u05df"+
		"\u05d6\3\2\2\2\u05df\u05da\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e2\3\2"+
		"\2\2\u05e1\u05e3\5l\67\2\u05e2\u05e1\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3"+
		"\u05e5\3\2\2\2\u05e4\u05d4\3\2\2\2\u05e4\u05d5\3\2\2\2\u05e5k\3\2\2\2"+
		"\u05e6\u05e8\7\u0097\2\2\u05e7\u05e6\3\2\2\2\u05e7\u05e8\3\2\2\2\u05e8"+
		"\u05e9\3\2\2\2\u05e9\u05ea\7\u0083\2\2\u05ea\u05eb\7\u00ba\2\2\u05eb\u05ec"+
		"\5\u02c2\u0162\2\u05ecm\3\2\2\2\u05ed\u05f0\7O\2\2\u05ee\u05ef\7\u010b"+
		"\2\2\u05ef\u05f1\7\u0135\2\2\u05f0\u05ee\3\2\2\2\u05f0\u05f1\3\2\2\2\u05f1"+
		"\u05f2\3\2\2\2\u05f2\u05f5\7\u018d\2\2\u05f3\u05f6\5p9\2\u05f4\u05f6\5"+
		"|?\2\u05f5\u05f3\3\2\2\2\u05f5\u05f4\3\2\2\2\u05f6\u05f7\3\2\2\2\u05f7"+
		"\u05f8\7\u01f7\2\2\u05f8o\3\2\2\2\u05f9\u05fc\5\u02a8\u0155\2\u05fa\u05fb"+
		"\7\u0105\2\2\u05fb\u05fd\7\u01e7\2\2\u05fc\u05fa\3\2\2\2\u05fc\u05fd\3"+
		"\2\2\2\u05fd\u05ff\3\2\2\2\u05fe\u0600\5r:\2\u05ff\u05fe\3\2\2\2\u05ff"+
		"\u0600\3\2\2\2\u0600q\3\2\2\2\u0601\u0603\5\u00aeX\2\u0602\u0601\3\2\2"+
		"\2\u0602\u0603\3\2\2\2\u0603\u0606\3\2\2\2\u0604\u0607\5t;\2\u0605\u0607"+
		"\5v<\2\u0606\u0604\3\2\2\2\u0606\u0605\3\2\2\2\u0607\u0609\3\2\2\2\u0608"+
		"\u060a\5z>\2\u0609\u0608\3\2\2\2\u0609\u060a\3\2\2\2\u060a\u0616\3\2\2"+
		"\2\u060b\u060c\7\u01eb\2\2\u060c\u0611\5\u008cG\2\u060d\u060e\7\u01f1"+
		"\2\2\u060e\u0610\5\u008cG\2\u060f\u060d\3\2\2\2\u0610\u0613\3\2\2\2\u0611"+
		"\u060f\3\2\2\2\u0611\u0612\3\2\2\2\u0612\u0614\3\2\2\2\u0613\u0611\3\2"+
		"\2\2\u0614\u0615\7\u01ec\2\2\u0615\u0617\3\2\2\2\u0616\u060b\3\2\2\2\u0616"+
		"\u0617\3\2\2\2\u0617\u061b\3\2\2\2\u0618\u061a\5\u008aF\2\u0619\u0618"+
		"\3\2\2\2\u061a\u061d\3\2\2\2\u061b\u0619\3\2\2\2\u061b\u061c\3\2\2\2\u061c"+
		"s\3\2\2\2\u061d\u061b\3\2\2\2\u061e\u0622\t\3\2\2\u061f\u0623\7\u0102"+
		"\2\2\u0620\u0623\5\u00dco\2\u0621\u0623\5x=\2\u0622\u061f\3\2\2\2\u0622"+
		"\u0620\3\2\2\2\u0622\u0621\3\2\2\2\u0623u\3\2\2\2\u0624\u0625\7\u018f"+
		"\2\2\u0625\u0626\5\u02d2\u016a\2\u0626w\3\2\2\2\u0627\u0628\7\u0178\2"+
		"\2\u0628\u0629\7\u0103\2\2\u0629\u062c\5\u02d2\u016a\2\u062a\u062b\7\u00fb"+
		"\2\2\u062b\u062d\7\u00fd\2\2\u062c\u062a\3\2\2\2\u062c\u062d\3\2\2\2\u062d"+
		"y\3\2\2\2\u062e\u062f\7\u008a\2\2\u062f\u0630\7\u00e6\2\2\u0630\u0631"+
		"\5\u01f4\u00fb\2\u0631\u0632\7\u00c2\2\2\u0632\u0633\7\u00bf\2\2\u0633"+
		"\u0634\7\u019a\2\2\u0634\u0635\t\20\2\2\u0635{\3\2\2\2\u0636\u0637\7#"+
		"\2\2\u0637\u0638\5\u02a8\u0155\2\u0638\u063a\t\3\2\2\u0639\u063b\5~@\2"+
		"\u063a\u0639\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u063a\3\2\2\2\u063c\u063d"+
		"\3\2\2\2\u063d\u063e\3\2\2\2\u063e\u063f\7{\2\2\u063f}\3\2\2\2\u0640\u0643"+
		"\5\u0080A\2\u0641\u0643\5\u0082B\2\u0642\u0640\3\2\2\2\u0642\u0641\3\2"+
		"\2\2\u0643\177\3\2\2\2\u0644\u0645\t\21\2\2\u0645\u0646\7\u00db\2\2\u0646"+
		"\u0647\5\u0086D\2\u0647\u0081\3\2\2\2\u0648\u064c\t\22\2\2\u0649\u064d"+
		"\5\u0084C\2\u064a\u064d\5\u0086D\2\u064b\u064d\5\u0088E\2\u064c\u0649"+
		"\3\2\2\2\u064c\u064a\3\2\2\2\u064c\u064b\3\2\2\2\u064d\u0083\3\2\2\2\u064e"+
		"\u064f\7\u0128\2\2\u064f\u0650\5\u02b0\u0159\2\u0650\u0651\7\u01eb\2\2"+
		"\u0651\u0656\5\u00a2R\2\u0652\u0653\7\u01f1\2\2\u0653\u0655\5\u00a2R\2"+
		"\u0654\u0652\3\2\2\2\u0655\u0658\3\2\2\2\u0656\u0654\3\2\2\2\u0656\u0657"+
		"\3\2\2\2\u0657\u0659\3\2\2\2\u0658\u0656\3\2\2\2\u0659\u065a\7\u01ec\2"+
		"\2\u065a\u0668\t\3\2\2\u065b\u0669\5\u00b2Z\2\u065c\u065e\7a\2\2\u065d"+
		"\u065c\3\2\2\2\u065d\u065e\3\2\2\2\u065e\u0662\3\2\2\2\u065f\u0661\5\u00c0"+
		"a\2\u0660\u065f\3\2\2\2\u0661\u0664\3\2\2\2\u0662\u0660\3\2\2\2\u0662"+
		"\u0663\3\2\2\2\u0663\u0665\3\2\2\2\u0664\u0662\3\2\2\2\u0665\u0666\5\u010a"+
		"\u0086\2\u0666\u0667\7\u01f7\2\2\u0667\u0669\3\2\2\2\u0668\u065b\3\2\2"+
		"\2\u0668\u065d\3\2\2\2\u0669\u0085\3\2\2\2\u066a\u066b\7\u009a\2\2\u066b"+
		"\u0677\5\u02ae\u0158\2\u066c\u066d\7\u01eb\2\2\u066d\u0672\5\u00a2R\2"+
		"\u066e\u066f\7\u01f1\2\2\u066f\u0671\5\u00a2R\2\u0670\u066e\3\2\2\2\u0671"+
		"\u0674\3\2\2\2\u0672\u0670\3\2\2\2\u0672\u0673\3\2\2\2\u0673\u0675\3\2"+
		"\2\2\u0674\u0672\3\2\2\2\u0675\u0676\7\u01ec\2\2\u0676\u0678\3\2\2\2\u0677"+
		"\u066c\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u0679\3\2\2\2\u0679\u067a\7\u013a"+
		"\2\2\u067a\u067b\5\u02d2\u016a\2\u067b\u0689\t\3\2\2\u067c\u068a\5\u00b2"+
		"Z\2\u067d\u067f\7a\2\2\u067e\u067d\3\2\2\2\u067e\u067f\3\2\2\2\u067f\u0683"+
		"\3\2\2\2\u0680\u0682\5\u00c0a\2\u0681\u0680\3\2\2\2\u0682\u0685\3\2\2"+
		"\2\u0683\u0681\3\2\2\2\u0683\u0684\3\2\2\2\u0684\u0686\3\2\2\2\u0685\u0683"+
		"\3\2\2\2\u0686\u0687\5\u010a\u0086\2\u0687\u0688\7\u01f7\2\2\u0688\u068a"+
		"\3\2\2\2\u0689\u067c\3\2\2\2\u0689\u067e\3\2\2\2\u068a\u0087\3\2\2\2\u068b"+
		"\u068d\7\u008f\2\2\u068c\u068b\3\2\2\2\u068c\u068d\3\2\2\2\u068d\u068f"+
		"\3\2\2\2\u068e\u0690\7\u00b4\2\2\u068f\u068e\3\2\2\2\u068f\u0690\3\2\2"+
		"\2\u0690\u0691\3\2\2\2\u0691\u0692\7F\2\2\u0692\u0693\7\u009a\2\2\u0693"+
		"\u06a5\5\u02d2\u016a\2\u0694\u0695\7\u01eb\2\2\u0695\u0696\7\u0151\2\2"+
		"\u0696\u0697\7\u00a6\2\2\u0697\u0698\7\u0110\2\2\u0698\u0699\5\u02d2\u016a"+
		"\2\u0699\u069a\7\u01f1\2\2\u069a\u069b\3\2\2\2\u069b\u06a0\5\u00a2R\2"+
		"\u069c\u069d\7\u01f1\2\2\u069d\u069f\5\u00a2R\2\u069e\u069c\3\2\2\2\u069f"+
		"\u06a2\3\2\2\2\u06a0\u069e\3\2\2\2\u06a0\u06a1\3\2\2\2\u06a1\u06a3\3\2"+
		"\2\2\u06a2\u06a0\3\2\2\2\u06a3\u06a4\7\u01ec\2\2\u06a4\u06a6\3\2\2\2\u06a5"+
		"\u0694\3\2\2\2\u06a5\u06a6\3\2\2\2\u06a6\u06a7\3\2\2\2\u06a7\u06a8\7\u013a"+
		"\2\2\u06a8\u06a9\7\u0151\2\2\u06a9\u06aa\7\17\2\2\u06aa\u06ab\7\u0138"+
		"\2\2\u06ab\u06b9\t\3\2\2\u06ac\u06ba\5\u00b2Z\2\u06ad\u06af\7a\2\2\u06ae"+
		"\u06ad\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u06b3\3\2\2\2\u06b0\u06b2\5\u00c0"+
		"a\2\u06b1\u06b0\3\2\2\2\u06b2\u06b5\3\2\2\2\u06b3\u06b1\3\2\2\2\u06b3"+
		"\u06b4\3\2\2\2\u06b4\u06b6\3\2\2\2\u06b5\u06b3\3\2\2\2\u06b6\u06b7\5\u010a"+
		"\u0086\2\u06b7\u06b8\7\u01f7\2\2\u06b8\u06ba\3\2\2\2\u06b9\u06ac\3\2\2"+
		"\2\u06b9\u06ae\3\2\2\2\u06ba\u0089\3\2\2\2\u06bb\u06bd\7\u00fb\2\2\u06bc"+
		"\u06bb\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u06be\3\2\2\2\u06be\u06bf\t\23"+
		"\2\2\u06bf\u008b\3\2\2\2\u06c0\u06c1\5\u02ea\u0176\2\u06c1\u06c3\5\u02d2"+
		"\u016a\2\u06c2\u06c4\5\u008eH\2\u06c3\u06c2\3\2\2\2\u06c3\u06c4\3\2\2"+
		"\2\u06c4\u06c7\3\2\2\2\u06c5\u06c7\5\u0090I\2\u06c6\u06c0\3\2\2\2\u06c6"+
		"\u06c5\3\2\2\2\u06c7\u008d\3\2\2\2\u06c8\u06c9\7\u008a\2\2\u06c9\u06ca"+
		"\7\u00e6\2\2\u06ca\u06cb\5\u01f4\u00fb\2\u06cb\u008f\3\2\2\2\u06cc\u06ce"+
		"\5\u008aF";
	private static final String _serializedATNSegment1 =
		"\2\u06cd\u06cc\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06d0\3\2\2\2\u06cf\u06d1"+
		"\5\u0092J\2\u06d0\u06cf\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2\u06d0\3\2\2"+
		"\2\u06d2\u06d3\3\2\2\2\u06d3\u06d6\3\2\2\2\u06d4\u06d5\7\u01f1\2\2\u06d5"+
		"\u06d7\5\u009eP\2\u06d6\u06d4\3\2\2\2\u06d6\u06d7\3\2\2\2\u06d7\u0091"+
		"\3\2\2\2\u06d8\u06dc\5\u0094K\2\u06d9\u06dc\5\u009aN\2\u06da\u06dc\5\u009c"+
		"O\2\u06db\u06d8\3\2\2\2\u06db\u06d9\3\2\2\2\u06db\u06da\3\2\2\2\u06dc"+
		"\u0093\3\2\2\2\u06dd\u06e0\t\22\2\2\u06de\u06e1\5\u0096L\2\u06df\u06e1"+
		"\5\u0098M\2\u06e0\u06de\3\2\2\2\u06e0\u06df\3\2\2\2\u06e1\u0095\3\2\2"+
		"\2\u06e2\u06e3\7\u0128\2\2\u06e3\u06e4\5\u02b0\u0159\2\u06e4\u06e5\7\u01eb"+
		"\2\2\u06e5\u06ea\5\u00a2R\2\u06e6\u06e7\7\u01f1\2\2\u06e7\u06e9\5\u00a2"+
		"R\2\u06e8\u06e6\3\2\2\2\u06e9\u06ec\3\2\2\2\u06ea\u06e8\3\2\2\2\u06ea"+
		"\u06eb\3\2\2\2\u06eb\u06ed\3\2\2\2\u06ec\u06ea\3\2\2\2\u06ed\u06f0\7\u01ec"+
		"\2\2\u06ee\u06ef\t\3\2\2\u06ef\u06f1\5\u00b2Z\2\u06f0\u06ee\3\2\2\2\u06f0"+
		"\u06f1\3\2\2\2\u06f1\u0097\3\2\2\2\u06f2\u06f3\7\u009a\2\2\u06f3\u06ff"+
		"\5\u02ae\u0158\2\u06f4\u06f5\7\u01eb\2\2\u06f5\u06fa\5\u00a2R\2\u06f6"+
		"\u06f7\7\u01f1\2\2\u06f7\u06f9\5\u00a2R\2\u06f8\u06f6\3\2\2\2\u06f9\u06fc"+
		"\3\2\2\2\u06fa\u06f8\3\2\2\2\u06fa\u06fb\3\2\2\2\u06fb\u06fd\3\2\2\2\u06fc"+
		"\u06fa\3\2\2\2\u06fd\u06fe\7\u01ec\2\2\u06fe\u0700\3\2\2\2\u06ff\u06f4"+
		"\3\2\2\2\u06ff\u0700\3\2\2\2\u0700\u0701\3\2\2\2\u0701\u0706\7\u013a\2"+
		"\2\u0702\u0707\5\u02d2\u016a\2\u0703\u0704\7\u0151\2\2\u0704\u0705\7\17"+
		"\2\2\u0705\u0707\7\u0138\2\2\u0706\u0702\3\2\2\2\u0706\u0703\3\2\2\2\u0707"+
		"\u0710\3\2\2\2\u0708\u0709\t\3\2\2\u0709\u0711\5\u00b2Z\2\u070a\u070c"+
		"\7\u008a\2\2\u070b\u070d\7\u01a0\2\2\u070c\u070b\3\2\2\2\u070c\u070d\3"+
		"\2\2\2\u070d\u070e\3\2\2\2\u070e\u070f\7\u00e6\2\2\u070f\u0711\5\u01f4"+
		"\u00fb\2\u0710\u0708\3\2\2\2\u0710\u070a\3\2\2\2\u0710\u0711\3\2\2\2\u0711"+
		"\u0099\3\2\2\2\u0712\u0714\7\u008f\2\2\u0713\u0712\3\2\2\2\u0713\u0714"+
		"\3\2\2\2\u0714\u0716\3\2\2\2\u0715\u0717\7\u00b4\2\2\u0716\u0715\3\2\2"+
		"\2\u0716\u0717\3\2\2\2\u0717\u0718\3\2\2\2\u0718\u0719\7F\2\2\u0719\u071a"+
		"\7\u009a\2\2\u071a\u072c\5\u02d2\u016a\2\u071b\u071c\7\u01eb\2\2\u071c"+
		"\u071d\7\u0151\2\2\u071d\u071e\7\u00a6\2\2\u071e\u071f\7\u0110\2\2\u071f"+
		"\u0720\5\u02d2\u016a\2\u0720\u0721\7\u01f1\2\2\u0721\u0722\3\2\2\2\u0722"+
		"\u0727\5\u00a2R\2\u0723\u0724\7\u01f1\2\2\u0724\u0726\5\u00a2R\2\u0725"+
		"\u0723\3\2\2\2\u0726\u0729\3\2\2\2\u0727\u0725\3\2\2\2\u0727\u0728\3\2"+
		"\2\2\u0728\u072a\3\2\2\2\u0729\u0727\3\2\2\2\u072a\u072b\7\u01ec\2\2\u072b"+
		"\u072d\3\2\2\2\u072c\u071b\3\2\2\2\u072c\u072d\3\2\2\2\u072d\u072e\3\2"+
		"\2\2\u072e\u072f\7\u013a\2\2\u072f\u0730\7\u0151\2\2\u0730\u0731\7\17"+
		"\2\2\u0731\u0734\7\u0138\2\2\u0732\u0733\t\3\2\2\u0733\u0735\5\u00b2Z"+
		"\2\u0734\u0732\3\2\2\2\u0734\u0735\3\2\2\2\u0735\u009b\3\2\2\2\u0736\u0737"+
		"\t\21\2\2\u0737\u0738\7\u00db\2\2\u0738\u0739\5\u0098M\2\u0739\u009d\3"+
		"\2\2\2\u073a\u073b\7\u0123\2\2\u073b\u073c\7\u0137\2\2\u073c\u073d\7\u01eb"+
		"\2\2\u073d\u0742\5\u00a0Q\2\u073e\u073f\7\u01f1\2\2\u073f\u0741\5\u00a0"+
		"Q\2\u0740\u073e\3\2\2\2\u0741\u0744\3\2\2\2\u0742\u0740\3\2\2\2\u0742"+
		"\u0743\3\2\2\2\u0743\u0745\3\2\2\2\u0744\u0742\3\2\2\2\u0745\u0746\7\u01ec"+
		"\2\2\u0746\u009f\3\2\2\2\u0747\u074a\5\u02ea\u0176\2\u0748\u074a\7d\2"+
		"\2\u0749\u0747\3\2\2\2\u0749\u0748\3\2\2\2\u074a\u00a1\3\2\2\2\u074b\u074c"+
		"\5\u029a\u014e\2\u074c\u074d\5\u02d2\u016a\2\u074d\u00a3\3\2\2\2\u074e"+
		"\u074f\7r\2\2\u074f\u0750\7\u0152\2\2\u0750\u0751\5\u02aa\u0156\2\u0751"+
		"\u0752\7\u01f7\2\2\u0752\u00a5\3\2\2\2\u0753\u0754\7\n\2\2\u0754\u0755"+
		"\7\u0152\2\2\u0755\u0757\5\u02aa\u0156\2\u0756\u0758\5\u00aaV\2\u0757"+
		"\u0756\3\2\2\2\u0758\u0759\3\2\2\2\u0759\u0757\3\2\2\2\u0759\u075a\3\2"+
		"\2\2\u075a\u075b\3\2\2\2\u075b\u075c\7\u01f7\2\2\u075c\u00a7\3\2\2\2\u075d"+
		"\u075e\7O\2\2\u075e\u075f\7\u0152\2\2\u075f\u0764\5\u02aa\u0156\2\u0760"+
		"\u0763\5\u00acW\2\u0761\u0763\5\u00aaV\2\u0762\u0760\3\2\2\2\u0762\u0761"+
		"\3\2\2\2\u0763\u0766\3\2\2\2\u0764\u0762\3\2\2\2\u0764\u0765\3\2\2\2\u0765"+
		"\u0767\3\2\2\2\u0766\u0764\3\2\2\2\u0767\u0768\7\u01f7\2\2\u0768\u00a9"+
		"\3\2\2\2\u0769\u076a\7\u00a9\2\2\u076a\u076b\7(\2\2\u076b\u077a\7\u01e5"+
		"\2\2\u076c\u076d\7\u00d9\2\2\u076d\u077a\7\u01e5\2\2\u076e\u077a\7\u00f6"+
		"\2\2\u076f\u0770\7\u00df\2\2\u0770\u077a\7\u01e5\2\2\u0771\u077a\7\u00f7"+
		"\2\2\u0772\u077a\7V\2\2\u0773\u077a\7\u00f4\2\2\u0774\u0775\7+\2\2\u0775"+
		"\u077a\7\u01e5\2\2\u0776\u077a\7\u00f2\2\2\u0777\u077a\7\u010d\2\2\u0778"+
		"\u077a\7\u00f9\2\2\u0779\u0769\3\2\2\2\u0779\u076c\3\2\2\2\u0779\u076e"+
		"\3\2\2\2\u0779\u076f\3\2\2\2\u0779\u0771\3\2\2\2\u0779\u0772\3\2\2\2\u0779"+
		"\u0773\3\2\2\2\u0779\u0774\3\2\2\2\u0779\u0776\3\2\2\2\u0779\u0777\3\2"+
		"\2\2\u0779\u0778\3\2\2\2\u077a\u00ab\3\2\2\2\u077b\u077c\7\u016b\2\2\u077c"+
		"\u077d\7\u01ac\2\2\u077d\u077e\7\u01e5\2\2\u077e\u00ad\3\2\2\2\u077f\u0780"+
		"\7\25\2\2\u0780\u0781\t\24\2\2\u0781\u00af\3\2\2\2\u0782\u0783\5\u02ea"+
		"\u0176\2\u0783\u0784\7\u0202\2\2\u0784\u0785\5\u01f4\u00fb\2\u0785\u00b1"+
		"\3\2\2\2\u0786\u0789\7\u00c2\2\2\u0787\u078a\5\u00b4[\2\u0788\u078a\5"+
		"\u00b6\\\2\u0789\u0787\3\2\2\2\u0789\u0788\3\2\2\2\u078a\u00b3\3\2\2\2"+
		"\u078b\u078c\7\u00bf\2\2\u078c\u078d\7\u00e6\2\2\u078d\u078e\7\u01e7\2"+
		"\2\u078e\u00b5\3\2\2\2\u078f\u0792\7*\2\2\u0790\u0791\7\u00e6\2\2\u0791"+
		"\u0793\7\u01e7\2\2\u0792\u0790\3\2\2\2\u0792\u0793\3\2\2\2\u0793\u0794"+
		"\3\2\2\2\u0794\u0795\7\u00c8\2\2\u0795\u0797\5\u02ea\u0176\2\u0796\u0798"+
		"\5\u00b8]\2\u0797\u0796\3\2\2\2\u0797\u0798\3\2\2\2\u0798\u079b\3\2\2"+
		"\2\u0799\u079a\7\u01ac\2\2\u079a\u079c\7H\2\2\u079b\u0799\3\2\2\2\u079b"+
		"\u079c\3\2\2\2\u079c\u079e\3\2\2\2\u079d\u079f\5\u00ba^\2\u079e\u079d"+
		"\3\2\2\2\u079e\u079f\3\2\2\2\u079f\u00b7\3\2\2\2\u07a0\u07a1\7\7\2\2\u07a1"+
		"\u07a2\7\u00a6\2\2\u07a2\u07a3\7\u01eb\2\2\u07a3\u07a8\5\u01f4\u00fb\2"+
		"\u07a4\u07a5\7\u01f1\2\2\u07a5\u07a7\5\u01f4\u00fb\2\u07a6\u07a4\3\2\2"+
		"\2\u07a7\u07aa\3\2\2\2\u07a8\u07a6\3\2\2\2\u07a8\u07a9\3\2\2\2\u07a9\u07ab"+
		"\3\2\2\2\u07aa\u07a8\3\2\2\2\u07ab\u07ac\7\u01ec\2\2\u07ac\u00b9\3\2\2"+
		"\2\u07ad\u07ae\7\u0116\2\2\u07ae\u07ba\7\u01eb\2\2\u07af\u07b4\5\u01f4"+
		"\u00fb\2\u07b0\u07b1\7\u01f1\2\2\u07b1\u07b3\5\u01f4\u00fb\2\u07b2\u07b0"+
		"\3\2\2\2\u07b3\u07b6\3\2\2\2\u07b4\u07b2\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5"+
		"\u07bb\3\2\2\2\u07b6\u07b4\3\2\2\2\u07b7\u07b8\7\u01e4\2\2\u07b8\u07b9"+
		"\7\u01e4\2\2\u07b9\u07bb\7\u01e4\2\2\u07ba\u07af\3\2\2\2\u07ba\u07b7\3"+
		"\2\2\2\u07bb\u07bc\3\2\2\2\u07bc\u07bd\7\u01ec\2\2\u07bd\u00bb\3\2\2\2"+
		"\u07be\u07c2\5\u029a\u014e\2\u07bf\u07c1\t\25\2\2\u07c0\u07bf\3\2\2\2"+
		"\u07c1\u07c4\3\2\2\2\u07c2\u07c0\3\2\2\2\u07c2\u07c3\3\2\2\2\u07c3\u07c6"+
		"\3\2\2\2\u07c4\u07c2\3\2\2\2\u07c5\u07c7\5\u02d2\u016a\2\u07c6\u07c5\3"+
		"\2\2\2\u07c6\u07c7\3\2\2\2\u07c7\u07c9\3\2\2\2\u07c8\u07ca\5\u00be`\2"+
		"\u07c9\u07c8\3\2\2\2\u07c9\u07ca\3\2\2\2\u07ca\u00bd\3\2\2\2\u07cb\u07cc"+
		"\t\26\2\2\u07cc\u07cd\5\u01f4\u00fb\2\u07cd\u00bf\3\2\2\2\u07ce\u07d8"+
		"\5\u00c2b\2\u07cf\u07d8\5\u00c4c\2\u07d0\u07d8\5\u00c6d\2\u07d1\u07d8"+
		"\5\u00caf\2\u07d2\u07d8\5\u00ccg\2\u07d3\u07d8\5\u00ceh\2\u07d4\u07d8"+
		"\5\u00d6l\2\u07d5\u07d8\5\60\31\2\u07d6\u07d8\5\16\b\2\u07d7\u07ce\3\2"+
		"\2\2\u07d7\u07cf\3\2\2\2\u07d7\u07d0\3\2\2\2\u07d7\u07d1\3\2\2\2\u07d7"+
		"\u07d2\3\2\2\2\u07d7\u07d3\3\2\2\2\u07d7\u07d4\3\2\2\2\u07d7\u07d5\3\2"+
		"\2\2\u07d7\u07d6\3\2\2\2\u07d8\u00c1\3\2\2\2\u07d9\u07db\5\u02b4\u015b"+
		"\2\u07da\u07dc\7C\2\2\u07db\u07da\3\2\2\2\u07db\u07dc\3\2\2\2\u07dc\u07dd"+
		"\3\2\2\2\u07dd\u07e0\5\u02d2\u016a\2\u07de\u07df\7\u00fb\2\2\u07df\u07e1"+
		"\7\u00fd\2\2\u07e0\u07de\3\2\2\2\u07e0\u07e1\3\2\2\2\u07e1\u07e3\3\2\2"+
		"\2\u07e2\u07e4\5\u00be`\2\u07e3\u07e2\3\2\2\2\u07e3\u07e4\3\2\2\2\u07e4"+
		"\u07e5\3\2\2\2\u07e5\u07e6\7\u01f7\2\2\u07e6\u00c3\3\2\2\2\u07e7\u07e8"+
		"\7\u0175\2\2\u07e8\u07e9\5\u02a8\u0155\2\u07e9\u07ea\7\u00bc\2\2\u07ea"+
		"\u07f0\5\u02d2\u016a\2\u07eb\u07ec\7\u012a\2\2\u07ec\u07ed\5\u01f4\u00fb"+
		"\2\u07ed\u07ee\7\3\2\2\u07ee\u07ef\5\u01f4\u00fb\2\u07ef\u07f1\3\2\2\2"+
		"\u07f0\u07eb\3\2\2\2\u07f0\u07f1\3\2\2\2\u07f1\u07f4\3\2\2\2\u07f2\u07f3"+
		"\7\u00fb\2\2\u07f3\u07f5\7\u00fd\2\2\u07f4\u07f2\3\2\2\2\u07f4\u07f5\3"+
		"\2\2\2\u07f5\u07f6\3\2\2\2\u07f6\u07f7\7\u01f7\2\2\u07f7\u00c5\3\2\2\2"+
		"\u07f8\u07f9\7T\2\2\u07f9\u0805\5\u02b8\u015d\2\u07fa\u07fb\7\u01eb\2"+
		"\2\u07fb\u0800\5\u00c8e\2\u07fc\u07fd\7\u01f1\2\2\u07fd\u07ff\5\u00c8"+
		"e\2\u07fe\u07fc\3\2\2\2\u07ff\u0802\3\2\2\2\u0800\u07fe\3\2\2\2\u0800"+
		"\u0801\3\2\2\2\u0801\u0803\3\2\2\2\u0802\u0800\3\2\2\2\u0803\u0804\7\u01ec"+
		"\2\2\u0804\u0806\3\2\2\2\u0805\u07fa\3\2\2\2\u0805\u0806\3\2\2\2\u0806"+
		"\u0809\3\2\2\2\u0807\u0808\7\u013a\2\2\u0808\u080a\5\u02d2\u016a\2\u0809"+
		"\u0807\3\2\2\2\u0809\u080a\3\2\2\2\u080a\u080d\3\2\2\2\u080b\u080c\7\u00bc"+
		"\2\2\u080c\u080e\5\u0136\u009c\2\u080d\u080b\3\2\2\2\u080d\u080e\3\2\2"+
		"\2\u080e\u080f\3\2\2\2\u080f\u0810\7\u01f7\2\2\u0810\u00c7\3\2\2\2\u0811"+
		"\u0816\5\u029a\u014e\2\u0812\u0814\7\u00a6\2\2\u0813\u0812\3\2\2\2\u0813"+
		"\u0814\3\2\2\2\u0814\u0815\3\2\2\2\u0815\u0817\5\u02d2\u016a\2\u0816\u0813"+
		"\3\2\2\2\u0816\u0817\3\2\2\2\u0817\u0819\3\2\2\2\u0818\u081a\5\u00be`"+
		"\2\u0819\u0818\3\2\2\2\u0819\u081a\3\2\2\2\u081a\u00c9\3\2\2\2\u081b\u081c"+
		"\5\u02ac\u0157\2\u081c\u081d\7\u0081\2\2\u081d\u081e\7\u01f7\2\2\u081e"+
		"\u00cb\3\2\2\2\u081f\u083e\7\u0123\2\2\u0820\u083f\7\u0155\2\2\u0821\u083f"+
		"\7\30\2\2\u0822\u0823\7\u0082\2\2\u0823\u0824\7\u01eb\2\2\u0824\u0825"+
		"\5\u02ac\u0157\2\u0825\u0826\7\u01f1\2\2\u0826\u0827\5\u02e6\u0174\2\u0827"+
		"\u0828\7\u01ec\2\2\u0828\u083f\3\2\2\2\u0829\u082a\7\u00b0\2\2\u082a\u082b"+
		"\7\u01eb\2\2\u082b\u082c\5\u02ea\u0176\2\u082c\u082d\7\u01f1\2\2\u082d"+
		"\u082e\5\u01f4\u00fb\2\u082e\u082f\7\u01ec\2\2\u082f\u083f\3\2\2\2\u0830"+
		"\u0831\7\u0137\2\2\u0831\u0834\7\u01eb\2\2\u0832\u0835\5\u02ea\u0176\2"+
		"\u0833\u0835\7d\2\2\u0834\u0832\3\2\2\2\u0834\u0833\3\2\2\2\u0835\u0838"+
		"\3\2\2\2\u0836\u0837\7\u01f1\2\2\u0837\u0839\5\u02ea\u0176\2\u0838\u0836"+
		"\3\2\2\2\u0839\u083a\3\2\2\2\u083a\u0838\3\2\2\2\u083a\u083b\3\2\2\2\u083b"+
		"\u083c\3\2\2\2\u083c\u083d\7\u01ec\2\2\u083d\u083f\3\2\2\2\u083e\u0820"+
		"\3\2\2\2\u083e\u0821\3\2\2\2\u083e\u0822\3\2\2\2\u083e\u0829\3\2\2\2\u083e"+
		"\u0830\3\2\2\2\u083f\u0840\3\2\2\2\u0840\u0841\7\u01f7\2\2\u0841\u00cd"+
		"\3\2\2\2\u0842\u0845\5\u00d0i\2\u0843\u0845\5\u00d4k\2\u0844\u0842\3\2"+
		"\2\2\u0844\u0843\3\2\2\2\u0845\u00cf\3\2\2\2\u0846\u0847\7\u018d\2\2\u0847"+
		"\u0848\5\u02a8\u0155\2\u0848\u085b\7\u00bc\2\2\u0849\u084a\7\u012e\2\2"+
		"\u084a\u084b\7\u01eb\2\2\u084b\u0850\5\u00d2j\2\u084c\u084d\7\u01f1\2"+
		"\2\u084d\u084f\5\u00d2j\2\u084e\u084c\3\2\2\2\u084f\u0852\3\2\2\2\u0850"+
		"\u084e\3\2\2\2\u0850\u0851\3\2\2\2\u0851\u0853\3\2\2\2\u0852\u0850\3\2"+
		"\2\2\u0853\u0854\7\u01ec\2\2\u0854\u085c\3\2\2\2\u0855\u0856\7\u012f\2"+
		"\2\u0856\u0859\7T\2\2\u0857\u0858\7\u013a\2\2\u0858\u085a\5\u02d2\u016a"+
		"\2\u0859\u0857\3\2\2\2\u0859\u085a\3\2\2\2\u085a\u085c\3\2\2\2\u085b\u0849"+
		"\3\2\2\2\u085b\u0855\3\2\2\2\u085c\u085d\3\2\2\2\u085d\u085e\7\u01f7\2"+
		"\2\u085e\u00d1\3\2\2\2\u085f\u0861\5\u02c0\u0161\2\u0860\u0862\5\u02d2"+
		"\u016a\2\u0861\u0860\3\2\2\2\u0861\u0862\3\2\2\2\u0862\u0865\3\2\2\2\u0863"+
		"\u0864\7\u00fb\2\2\u0864\u0866\7\u00fd\2\2\u0865\u0863\3\2\2\2\u0865\u0866"+
		"\3\2\2\2\u0866\u0868\3\2\2\2\u0867\u0869\5\u00be`\2\u0868\u0867\3\2\2"+
		"\2\u0868\u0869\3\2\2\2\u0869\u00d3\3\2\2\2\u086a\u086b\5\u02ba\u015e\2"+
		"\u086b\u086c\5\u02a8\u0155\2\u086c\u086d\t\27\2\2\u086d\u086e\7\u01f7"+
		"\2\2\u086e\u00d5\3\2\2\2\u086f\u0872\5\u00d8m\2\u0870\u0872\5\u00dep\2"+
		"\u0871\u086f\3\2\2\2\u0871\u0870\3\2\2\2\u0872\u0873\3\2\2\2\u0873\u0874"+
		"\7\u01f7\2\2\u0874\u00d7\3\2\2\2\u0875\u0876\7\u018d\2\2\u0876\u0877\5"+
		"\u02a8\u0155\2\u0877\u0883\7\u00bc\2\2\u0878\u0879\7\u0178\2\2\u0879\u087a"+
		"\7\u0103\2\2\u087a\u087c\5\u02d2\u016a\2\u087b\u087d\5\u00dan\2\u087c"+
		"\u087b\3\2\2\2\u087c\u087d\3\2\2\2\u087d\u0880\3\2\2\2\u087e\u087f\7\u00fb"+
		"\2\2\u087f\u0881\7\u00fd\2\2\u0880\u087e\3\2\2\2\u0880\u0881\3\2\2\2\u0881"+
		"\u0884\3\2\2\2\u0882\u0884\5\u00dco\2\u0883\u0878\3\2\2\2\u0883\u0882"+
		"\3\2\2\2\u0884\u00d9\3\2\2\2\u0885\u0888\7\u00ac\2\2\u0886\u0888\7\u00ab"+
		"\2\2\u0887\u0885\3\2\2\2\u0887\u0886\3\2\2\2\u0888\u0889\3\2\2\2\u0889"+
		"\u088a\7(\2\2\u088a\u088b\5\u02d2\u016a\2\u088b\u00db\3\2\2\2\u088c\u0890"+
		"\7\u01a1\2\2\u088d\u088e\7\u01a2\2\2\u088e\u0890\7\16\2\2\u088f\u088c"+
		"\3\2\2\2\u088f\u088d\3\2\2\2\u0890\u0891\3\2\2\2\u0891\u0892\7\u01eb\2"+
		"\2\u0892\u0893\5\u01f4\u00fb\2\u0893\u0894\7\u01ec\2\2\u0894\u0895\7\u0103"+
		"\2\2\u0895\u0898\5\u02d2\u016a\2\u0896\u0897\7\u00fb\2\2\u0897\u0899\7"+
		"\u00fd\2\2\u0898\u0896\3\2\2\2\u0898\u0899\3\2\2\2\u0899\u00dd\3\2\2\2"+
		"\u089a\u089b\5\u0290\u0149\2\u089b\u089c\5\u02d2\u016a\2\u089c\u00df\3"+
		"\2\2\2\u089d\u089e\5\u00e4s\2\u089e\u089f\t\30\2\2\u089f\u08a2\3\2\2\2"+
		"\u08a0\u08a2\5\u00e2r\2\u08a1\u089d\3\2\2\2\u08a1\u08a0\3\2\2\2\u08a2"+
		"\u08a3\3\2\2\2\u08a3\u08a1\3\2\2\2\u08a3\u08a4\3\2\2\2\u08a4\u00e1\3\2"+
		"\2\2\u08a5\u08a6\7\u01f9\2\2\u08a6\u08a7\7\u01f9\2\2\u08a7\u08a8\5\u02a6"+
		"\u0154\2\u08a8\u08a9\7\u01ff\2\2\u08a9\u08aa\7\u01ff\2\2\u08aa\u00e3\3"+
		"\2\2\2\u08ab\u08ac\7O\2\2\u08ac\u08c3\5\2\2\2\u08ad\u08ae\7\n\2\2\u08ae"+
		"\u08c3\5\2\2\2\u08af\u08b0\7\u009c\2\2\u08b0\u08c3\5\2\2\2\u08b1\u08b2"+
		"\7\u018c\2\2\u08b2\u08c3\5\2\2\2\u08b3\u08c3\5\u010a\u0086\2\u08b4\u08c3"+
		"\5\u0112\u008a\2\u08b5\u08c3\5\u00e6t\2\u08b6\u08c3\5\u00e8u\2\u08b7\u08c3"+
		"\5\u00eav\2\u08b8\u08c3\5\u00ecw\2\u08b9\u08c3\5\u00eex\2\u08ba\u08c3"+
		"\5\u00f4{\2\u08bb\u08c3\5\u00f8}\2\u08bc\u08c3\5\u0102\u0082\2\u08bd\u08c3"+
		"\5\u0104\u0083\2\u08be\u08c3\5\u0106\u0084\2\u08bf\u08c3\5\u0228\u0115"+
		"\2\u08c0\u08c3\5\u0114\u008b\2\u08c1\u08c3\5\u0108\u0085\2\u08c2\u08ab"+
		"\3\2\2\2\u08c2\u08ad\3\2\2\2\u08c2\u08af\3\2\2\2\u08c2\u08b1\3\2\2\2\u08c2"+
		"\u08b3\3\2\2\2\u08c2\u08b4\3\2\2\2\u08c2\u08b5\3\2\2\2\u08c2\u08b6\3\2"+
		"\2\2\u08c2\u08b7\3\2\2\2\u08c2\u08b8\3\2\2\2\u08c2\u08b9\3\2\2\2\u08c2"+
		"\u08ba\3\2\2\2\u08c2\u08bb\3\2\2\2\u08c2\u08bc\3\2\2\2\u08c2\u08bd\3\2"+
		"\2\2\u08c2\u08be\3\2\2\2\u08c2\u08bf\3\2\2\2\u08c2\u08c0\3\2\2\2\u08c2"+
		"\u08c1\3\2\2\2\u08c3\u00e5\3\2\2\2\u08c4\u08c7\5\u02dc\u016f\2\u08c5\u08c7"+
		"\5\u02da\u016e\2\u08c6\u08c4\3\2\2\2\u08c6\u08c5\3\2\2\2\u08c7\u08c8\3"+
		"\2\2\2\u08c8\u08c9\7\u01f4\2\2\u08c9\u08ca\5\u01f4\u00fb\2\u08ca\u00e7"+
		"\3\2\2\2\u08cb\u08cd\7I\2\2\u08cc\u08ce\5\u02a6\u0154\2\u08cd\u08cc\3"+
		"\2\2\2\u08cd\u08ce\3\2\2\2\u08ce\u08d1\3\2\2\2\u08cf\u08d0\7\u01a8\2\2"+
		"\u08d0\u08d2\5\u01f0\u00f9\2\u08d1\u08cf\3\2\2\2\u08d1\u08d2\3\2\2\2\u08d2"+
		"\u00e9\3\2\2\2\u08d3\u08d5\7\u0088\2\2\u08d4\u08d6\5\u02a6\u0154\2\u08d5"+
		"\u08d4\3\2\2\2\u08d5\u08d6\3\2\2\2\u08d6\u08d9\3\2\2\2\u08d7\u08d8\7\u01a8"+
		"\2\2\u08d8\u08da\5\u01f0\u00f9\2\u08d9\u08d7\3\2\2\2\u08d9\u08da\3\2\2"+
		"\2\u08da\u00eb\3\2\2\2\u08db\u08dc\7\u009b\2\2\u08dc\u08dd\5\u02a6\u0154"+
		"\2\u08dd\u00ed\3\2\2\2\u08de\u08df\7\u00a3\2\2\u08df\u08e0\5\u01f0\u00f9"+
		"\2\u08e0\u08e1\7\u017a\2\2\u08e1\u08e5\5\u00e0q\2\u08e2\u08e4\5\u00f0"+
		"y\2\u08e3\u08e2\3\2\2\2\u08e4\u08e7\3\2\2\2\u08e5\u08e3\3\2\2\2\u08e5"+
		"\u08e6\3\2\2\2\u08e6\u08e9\3\2\2\2\u08e7\u08e5\3\2\2\2\u08e8\u08ea\5\u00f2"+
		"z\2\u08e9\u08e8\3\2\2\2\u08e9\u08ea\3\2\2\2\u08ea\u08eb\3\2\2\2\u08eb"+
		"\u08ec\7{\2\2\u08ec\u08ed\7\u00a3\2\2\u08ed\u00ef\3\2\2\2\u08ee\u08ef"+
		"\7w\2\2\u08ef\u08f0\5\u01f0\u00f9\2\u08f0\u08f1\7\u017a\2\2\u08f1\u08f2"+
		"\5\u00e0q\2\u08f2\u00f1\3\2\2\2\u08f3\u08f4\7v\2\2\u08f4\u08f5\5\u00e0"+
		"q\2\u08f5\u00f3\3\2\2\2\u08f6\u08f8\5\u02a6\u0154\2\u08f7\u08f6\3\2\2"+
		"\2\u08f7\u08f8\3\2\2\2\u08f8\u08fd\3\2\2\2\u08f9\u08fa\7\u01ab\2\2\u08fa"+
		"\u08fe\5\u01f0\u00f9\2\u08fb\u08fc\7\u0095\2\2\u08fc\u08fe\5\u00f6|\2"+
		"\u08fd\u08f9\3\2\2\2\u08fd\u08fb\3\2\2\2\u08fd\u08fe\3\2\2\2\u08fe\u08ff"+
		"\3\2\2\2\u08ff\u0900\7\u00d5\2\2\u0900\u0901\5\u00e0q\2\u0901\u0902\7"+
		"{\2\2\u0902\u0904\7\u00d5\2\2\u0903\u0905\5\u02a6\u0154\2\u0904\u0903"+
		"\3\2\2\2\u0904\u0905\3\2\2\2\u0905\u00f5\3\2\2\2\u0906\u0907\5\u02b6\u015c"+
		"\2\u0907\u0909\7\u00a6\2\2\u0908\u090a\7\u013d\2\2\u0909\u0908\3\2\2\2"+
		"\u0909\u090a\3\2\2\2\u090a\u090b\3\2\2\2\u090b\u090c\5\u00fe\u0080\2\u090c"+
		"\u090d\7\3\2\2\u090d\u090e\5\u0100\u0081\2\u090e\u091c\3\2\2\2\u090f\u0910"+
		"\5\u02ba\u015e\2\u0910\u0919\7\u00a6\2\2\u0911\u0913\5\u02b8\u015d\2\u0912"+
		"\u0914\5\u01ee\u00f8\2\u0913\u0912\3\2\2\2\u0913\u0914\3\2\2\2\u0914\u091a"+
		"\3\2\2\2\u0915\u0916\7\u01eb\2\2\u0916\u0917\5\u0136\u009c\2\u0917\u0918"+
		"\7\u01ec\2\2\u0918\u091a\3\2\2\2\u0919\u0911\3\2\2\2\u0919\u0915\3\2\2"+
		"\2\u091a\u091c\3\2\2\2\u091b\u0906\3\2\2\2\u091b\u090f\3\2\2\2\u091c\u00f7"+
		"\3\2\2\2\u091d\u091e\7\u0096\2\2\u091e\u091f\5\u02b6\u015c\2\u091f\u0920"+
		"\7\u00a6\2\2\u0920\u0921\5\u00fa~\2\u0921\u0924\5\u0114\u008b\2\u0922"+
		"\u0923\7\u0147\2\2\u0923\u0925\7\u0083\2\2\u0924\u0922\3\2\2\2\u0924\u0925"+
		"\3\2\2\2\u0925\u00f9\3\2\2\2\u0926\u0927\5\u00fe\u0080\2\u0927\u0928\7"+
		"\3\2\2\u0928\u0929\5\u0100\u0081\2\u0929\u0934\3\2\2\2\u092a\u092b\7\u00ae"+
		"\2\2\u092b\u092c\7\u0103\2\2\u092c\u092e\5\u02bc\u015f\2\u092d\u092f\5"+
		"\u00fc\177\2\u092e\u092d\3\2\2\2\u092e\u092f\3\2\2\2\u092f\u0934\3\2\2"+
		"\2\u0930\u0931\7\u019d\2\2\u0931\u0932\7\u0103\2\2\u0932\u0934\5\u02b6"+
		"\u015c\2\u0933\u0926\3\2\2\2\u0933\u092a\3\2\2\2\u0933\u0930\3\2\2\2\u0934"+
		"\u00fb\3\2\2\2\u0935\u0936\7\34\2\2\u0936\u0937\5\u00fe\u0080\2\u0937"+
		"\u0938\7\f\2\2\u0938\u0939\5\u0100\u0081\2\u0939\u00fd\3\2\2\2\u093a\u093b"+
		"\5\u020e\u0108\2\u093b\u00ff\3\2\2\2\u093c\u093d\5\u020e\u0108\2\u093d"+
		"\u0101\3\2\2\2\u093e\u093f\7\u00fd\2\2\u093f\u0103\3\2\2\2\u0940\u0942"+
		"\7\u0129\2\2\u0941\u0943\5\u02ac\u0157\2\u0942\u0941\3\2\2\2\u0942\u0943"+
		"\3\2\2\2\u0943\u0105\3\2\2\2\u0944\u0946\7\u013a\2\2\u0945\u0947\5\u01f0"+
		"\u00f9\2\u0946\u0945\3\2\2\2\u0946\u0947\3\2\2\2\u0947\u0107\3\2\2\2\u0948"+
		"\u094a\7,\2\2\u0949\u0948\3\2\2\2\u0949\u094a\3\2\2\2\u094a\u094b\3\2"+
		"\2\2\u094b\u094d\5\u0294\u014b\2\u094c\u094e\5\u02c8\u0165\2\u094d\u094c"+
		"\3\2\2\2\u094d\u094e\3\2\2\2\u094e\u0109\3\2\2\2\u094f\u0953\7\33\2\2"+
		"\u0950\u0952\13\2\2\2\u0951\u0950\3\2\2\2\u0952\u0955\3\2\2\2\u0953\u0954"+
		"\3\2\2\2\u0953\u0951\3\2\2\2\u0954\u0956\3\2\2\2\u0955\u0953\3\2\2\2\u0956"+
		"\u0958\7{\2\2\u0957\u0959\5\u02a6\u0154\2\u0958\u0957\3\2\2\2\u0958\u0959"+
		"\3\2\2\2\u0959\u010b\3\2\2\2\u095a\u095c\7\u0081\2\2\u095b\u095d\5\u010e"+
		"\u0088\2\u095c\u095b\3\2\2\2\u095d\u095e\3\2\2\2\u095e\u095c\3\2\2\2\u095e"+
		"\u095f\3\2\2\2\u095f\u010d\3\2\2\2\u0960\u0961\7\u01a8\2\2\u0961\u0966"+
		"\5\u02ac\u0157\2\u0962\u0963\7\u010b\2\2\u0963\u0965\5\u02ac\u0157\2\u0964"+
		"\u0962\3\2\2\2\u0965\u0968\3\2\2\2\u0966\u0964\3\2\2\2\u0966\u0967\3\2"+
		"\2\2\u0967\u0969\3\2\2\2\u0968\u0966\3\2\2\2\u0969\u096a\7\u017a\2\2\u096a"+
		"\u096b\5\u00e0q\2\u096b\u010f\3\2\2\2\u096c\u096e\7a\2\2\u096d\u096c\3"+
		"\2\2\2\u096d\u096e\3\2\2\2\u096e\u0970\3\2\2\2\u096f\u0971\5\u00c0a\2"+
		"\u0970\u096f\3\2\2\2\u0971\u0972\3\2\2\2\u0972\u0970\3\2\2\2\u0972\u0973"+
		"\3\2\2\2\u0973\u0975\3\2\2\2\u0974\u096d\3\2\2\2\u0974\u0975\3\2\2\2\u0975"+
		"\u0976\3\2\2\2\u0976\u0977\5\u010a\u0086\2\u0977\u0111\3\2\2\2\u0978\u097a"+
		"\7a\2\2\u0979\u0978\3\2\2\2\u0979\u097a\3\2\2\2\u097a\u097c\3\2\2\2\u097b"+
		"\u097d\5\u00c0a\2\u097c\u097b\3\2\2\2\u097d\u097e\3\2\2\2\u097e\u097c"+
		"\3\2\2\2\u097e\u097f\3\2\2\2\u097f\u0980\3\2\2\2\u0980\u0981\5\u010a\u0086"+
		"\2\u0981\u0113\3\2\2\2\u0982\u0987\5\u0116\u008c\2\u0983\u0987\5\u011a"+
		"\u008e\2\u0984\u0987\5\u011c\u008f\2\u0985\u0987\5\u0126\u0094\2\u0986"+
		"\u0982\3\2\2\2\u0986\u0983\3\2\2\2\u0986\u0984\3\2\2\2\u0986\u0985\3\2"+
		"\2\2\u0987\u0115\3\2\2\2\u0988\u0989\7\u0086\2\2\u0989\u098a\7\u00a5\2"+
		"\2\u098a\u0994\5\u01f4\u00fb\2\u098b\u098d\5\u0284\u0143\2\u098c\u098e"+
		"\5\u024c\u0127\2\u098d\u098c\3\2\2\2\u098d\u098e\3\2\2\2\u098e\u0995\3"+
		"\2\2\2\u098f\u0991\5\u024c\u0127\2\u0990\u0992\5\u0118\u008d\2\u0991\u0990"+
		"\3\2\2\2\u0991\u0992\3\2\2\2\u0992\u0995\3\2\2\2\u0993\u0995\5\u0118\u008d"+
		"\2\u0994\u098b\3\2\2\2\u0994\u098f\3\2\2\2\u0994\u0993\3\2\2\2\u0994\u0995"+
		"\3\2\2\2\u0995\u0117\3\2\2\2\u0996\u0997\t\31\2\2\u0997\u0998\5\u0284"+
		"\u0143\2\u0998\u0119\3\2\2\2\u0999\u09a1\5\u01c4\u00e3\2\u099a\u09a1\5"+
		"\u01d0\u00e9\2\u099b\u09a1\5\u0136\u009c\2\u099c\u09a1\5\u01aa\u00d6\2"+
		"\u099d\u09a1\5\u01b0\u00d9\2\u099e\u09a1\5\u01b2\u00da\2\u099f\u09a1\5"+
		"\u0134\u009b\2\u09a0\u0999\3\2\2\2\u09a0\u099a\3\2\2\2\u09a0\u099b\3\2"+
		"\2\2\u09a0\u099c\3\2\2\2\u09a0\u099d\3\2\2\2\u09a0\u099e\3\2\2\2\u09a0"+
		"\u099f\3\2\2\2\u09a1\u011b\3\2\2\2\u09a2\u09a7\5\u011e\u0090\2\u09a3\u09a7"+
		"\5\u0120\u0091\2\u09a4\u09a7\5\u0122\u0092\2\u09a5\u09a7\5\u0124\u0093"+
		"\2\u09a6\u09a2\3\2\2\2\u09a6\u09a3\3\2\2\2\u09a6\u09a4\3\2\2\2\u09a6\u09a5"+
		"\3\2\2\2\u09a7\u011d\3\2\2\2\u09a8\u09a9\7\67\2\2\u09a9\u09aa\5\u02b8"+
		"\u015d\2\u09aa\u011f\3\2\2\2\u09ab\u09ac\7\u0109\2\2\u09ac\u09ae\5\u02b8"+
		"\u015d\2\u09ad\u09af\5\u01ee\u00f8\2\u09ae\u09ad\3\2\2\2\u09ae\u09af\3"+
		"\2\2\2\u09af\u0121\3\2\2\2\u09b0\u09b1\7\u008e\2\2\u09b1\u09c6\5\u02b8"+
		"\u015d\2\u09b2\u09b3\7\u00ba\2\2\u09b3\u09b8\5\u02b4\u015b\2\u09b4\u09b5"+
		"\7\u01f1\2\2\u09b5\u09b7\5\u02b4\u015b\2\u09b6\u09b4\3\2\2\2\u09b7\u09ba"+
		"\3\2\2\2\u09b8\u09b6\3\2\2\2\u09b8\u09b9\3\2\2\2\u09b9\u09c7\3\2\2\2\u09ba"+
		"\u09b8\3\2\2\2\u09bb\u09bc\7\'\2\2\u09bc\u09bd\79\2\2\u09bd\u09be\7\u00ba"+
		"\2\2\u09be\u09c3\5\u02b4\u015b\2\u09bf\u09c0\7\u01f1\2\2\u09c0\u09c2\5"+
		"\u02b4\u015b\2\u09c1\u09bf\3\2\2\2\u09c2\u09c5\3\2\2\2\u09c3\u09c1\3\2"+
		"\2\2\u09c3\u09c4\3\2\2\2\u09c4\u09c7\3\2\2\2\u09c5\u09c3\3\2\2\2\u09c6"+
		"\u09b2\3\2\2\2\u09c6\u09bb\3\2\2\2\u09c7\u0123\3\2\2\2\u09c8\u09c9\7\u0109"+
		"\2\2\u09c9\u09ca\5\u02b4\u015b\2\u09ca\u09cd\7\u0095\2\2\u09cb\u09ce\5"+
		"\u0136\u009c\2\u09cc\u09ce\5\u01f4\u00fb\2\u09cd\u09cb\3\2\2\2\u09cd\u09cc"+
		"\3\2\2\2\u09ce\u09d0\3\2\2\2\u09cf\u09d1\5\u024c\u0127\2\u09d0\u09cf\3"+
		"\2\2\2\u09d0\u09d1\3\2\2\2\u09d1\u0125\3\2\2\2\u09d2\u09d8\5\u0128\u0095"+
		"\2\u09d3\u09d8\5\u012a\u0096\2\u09d4\u09d8\5\u012c\u0097\2\u09d5\u09d8"+
		"\5\u0130\u0099\2\u09d6\u09d8\5\u0132\u009a\2\u09d7\u09d2\3\2\2\2\u09d7"+
		"\u09d3\3\2\2\2\u09d7\u09d4\3\2\2\2\u09d7\u09d5\3\2\2\2\u09d7\u09d6\3\2"+
		"\2\2\u09d8\u0127\3\2\2\2\u09d9\u09da\7\u0158\2\2\u09da\u09e8\7\u0186\2"+
		"\2\u09db\u09dc\7\u012c\2\2\u09dc\u09e9\t\32\2\2\u09dd\u09de\7\u00bd\2"+
		"\2\u09de\u09e2\7\u00c7\2\2\u09df\u09e3\7\u0154\2\2\u09e0\u09e1\7\u012c"+
		"\2\2\u09e1\u09e3\7=\2\2\u09e2\u09df\3\2\2\2\u09e2\u09e0\3\2\2\2\u09e3"+
		"\u09e9\3\2\2\2\u09e4\u09e5\7\u0199\2\2\u09e5\u09e6\7\u0140\2\2\u09e6\u09e7"+
		"\7\u014f\2\2\u09e7\u09e9\5\u028e\u0148\2\u09e8\u09db\3\2\2\2\u09e8\u09dd"+
		"\3\2\2\2\u09e8\u09e4\3\2\2\2\u09e8\u09e9\3\2\2\2\u09e9\u09ec\3\2\2\2\u09ea"+
		"\u09eb\7\u00e6\2\2\u09eb\u09ed\5\u02e8\u0175\2\u09ec\u09ea\3\2\2\2\u09ec"+
		"\u09ed\3\2\2\2\u09ed\u0129\3\2\2\2\u09ee\u09ef\7\u0158\2\2\u09ef\u09f9"+
		"\t\33\2\2\u09f0\u09fa\7\t\2\2\u09f1\u09f6\5\u02a4\u0153\2\u09f2\u09f3"+
		"\7\u01f1\2\2\u09f3\u09f5\5\u02a4\u0153\2\u09f4\u09f2\3\2\2\2\u09f5\u09f8"+
		"\3\2\2\2\u09f6\u09f4\3\2\2\2\u09f6\u09f7\3\2\2\2\u09f7\u09fa\3\2\2\2\u09f8"+
		"\u09f6\3\2\2\2\u09f9\u09f0\3\2\2\2\u09f9\u09f1\3\2\2\2\u09fa\u09fb\3\2"+
		"\2\2\u09fb\u09fc\t\34\2\2\u09fc\u012b\3\2\2\2\u09fd\u09ff\7<\2\2\u09fe"+
		"\u0a00\7\u01ae\2\2\u09ff\u09fe\3\2\2\2\u09ff\u0a00\3\2\2\2\u0a00\u0a0e"+
		"\3\2\2\2\u0a01\u0a02\7;\2\2\u0a02\u0a0f\5\u01f4\u00fb\2\u0a03\u0a0c\7"+
		"\u0097\2\2\u0a04\u0a05\7K\2\2\u0a05\u0a0d\5\u01f4\u00fb\2\u0a06\u0a0d"+
		"\7L\2\2\u0a07\u0a0a\5\u01f4\u00fb\2\u0a08\u0a09\7\u01f1\2\2\u0a09\u0a0b"+
		"\5\u01f4\u00fb\2\u0a0a\u0a08\3\2\2\2\u0a0a\u0a0b\3\2\2\2\u0a0b\u0a0d\3"+
		"\2\2\2\u0a0c\u0a04\3\2\2\2\u0a0c\u0a06\3\2\2\2\u0a0c\u0a07\3\2\2\2\u0a0d"+
		"\u0a0f\3\2\2\2\u0a0e\u0a01\3\2\2\2\u0a0e\u0a03\3\2\2\2\u0a0e\u0a0f\3\2"+
		"\2\2\u0a0f\u0a11\3\2\2\2\u0a10\u0a12\5\u012e\u0098\2\u0a11\u0a10\3\2\2"+
		"\2\u0a11\u0a12\3\2\2\2\u0a12\u012d\3\2\2\2\u0a13\u0a15\7\u01af\2\2\u0a14"+
		"\u0a16\t\35\2\2\u0a15\u0a14\3\2\2\2\u0a15\u0a16\3\2\2\2\u0a16\u0a18\3"+
		"\2\2\2\u0a17\u0a19\t\36\2\2\u0a18\u0a17\3\2\2\2\u0a18\u0a19\3\2\2\2\u0a19"+
		"\u012f\3\2\2\2\u0a1a\u0a1c\7\u0140\2\2\u0a1b\u0a1d\7\u01ae\2\2\u0a1c\u0a1b"+
		"\3\2\2\2\u0a1c\u0a1d\3\2\2\2\u0a1d\u0a25\3\2\2\2\u0a1e\u0a20\7\u0184\2"+
		"\2\u0a1f\u0a21\7\u0148\2\2\u0a20\u0a1f\3\2\2\2\u0a20\u0a21\3\2\2\2\u0a21"+
		"\u0a22\3\2\2\2\u0a22\u0a26\5\u028c\u0147\2\u0a23\u0a24\7\u0097\2\2\u0a24"+
		"\u0a26\5\u02e8\u0175\2\u0a25\u0a1e\3\2\2\2\u0a25\u0a23\3\2\2\2\u0a25\u0a26"+
		"\3\2\2\2\u0a26\u0131\3\2\2\2\u0a27\u0a28\7\u0148\2\2\u0a28\u0a29\5\u028c"+
		"\u0147\2\u0a29\u0133\3\2\2\2\u0a2a\u0a2b\7\u0089\2\2\u0a2b\u0a30\7\u011f"+
		"\2\2\u0a2c\u0a2d\7\u0158\2\2\u0a2d\u0a2e\7\u016e\2\2\u0a2e\u0a2f\7\u0202"+
		"\2\2\u0a2f\u0a31\5\u02e8\u0175\2\u0a30\u0a2c\3\2\2\2\u0a30\u0a31\3\2\2"+
		"\2\u0a31\u0a34\3\2\2\2\u0a32\u0a33\7\u00ba\2\2\u0a33\u0a35\5\u02c2\u0162"+
		"\2\u0a34\u0a32\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35\u0a36\3\2\2\2\u0a36\u0a3c"+
		"\7\u0095\2\2\u0a37\u0a3d\5\u0136\u009c\2\u0a38\u0a3d\5\u01aa\u00d6\2\u0a39"+
		"\u0a3d\5\u01b0\u00d9\2\u0a3a\u0a3d\5\u01b2\u00da\2\u0a3b\u0a3d\5\u01c4"+
		"\u00e3\2\u0a3c\u0a37\3\2\2\2\u0a3c\u0a38\3\2\2\2\u0a3c\u0a39\3\2\2\2\u0a3c"+
		"\u0a3a\3\2\2\2\u0a3c\u0a3b\3\2\2\2\u0a3d\u0135\3\2\2\2\u0a3e\u0a40\5\u0138"+
		"\u009d\2\u0a3f\u0a3e\3\2\2\2\u0a3f\u0a40\3\2\2\2\u0a40\u0a41\3\2\2\2\u0a41"+
		"\u0a46\5\u0140\u00a1\2\u0a42\u0a45\5\u01a4\u00d3\2\u0a43\u0a45\5\u01a0"+
		"\u00d1\2\u0a44\u0a42\3\2\2\2\u0a44\u0a43\3\2\2\2\u0a45\u0a48\3\2\2\2\u0a46"+
		"\u0a44\3\2\2\2\u0a46\u0a47\3\2\2\2\u0a47\u0137\3\2\2\2\u0a48\u0a46\3\2"+
		"\2\2\u0a49\u0a4a\7\u01ac\2\2\u0a4a\u0a4f\5\u013a\u009e\2\u0a4b\u0a4c\7"+
		"\u01f1\2\2\u0a4c\u0a4e\5\u013a\u009e\2\u0a4d\u0a4b\3\2\2\2\u0a4e\u0a51"+
		"\3\2\2\2\u0a4f\u0a4d\3\2\2\2\u0a4f\u0a50\3\2\2\2\u0a50\u0139\3\2\2\2\u0a51"+
		"\u0a4f\3\2\2\2\u0a52\u0a5e\5\u02a2\u0152\2\u0a53\u0a54\7\u01eb\2\2\u0a54"+
		"\u0a59\5\u02c0\u0161\2\u0a55\u0a56\7\u01f1\2\2\u0a56\u0a58\5\u02c0\u0161"+
		"\2\u0a57\u0a55\3\2\2\2\u0a58\u0a5b\3\2\2\2\u0a59\u0a57\3\2\2\2\u0a59\u0a5a"+
		"\3\2\2\2\u0a5a\u0a5c\3\2\2\2\u0a5b\u0a59\3\2\2\2\u0a5c\u0a5d\7\u01ec\2"+
		"\2\u0a5d\u0a5f\3\2\2\2\u0a5e\u0a53\3\2\2\2\u0a5e\u0a5f\3\2\2\2\u0a5f\u0a60"+
		"\3\2\2\2\u0a60\u0a61\7\17\2\2\u0a61\u0a62\7\u01eb\2\2\u0a62\u0a64\5\u0140"+
		"\u00a1\2\u0a63\u0a65\5\u01a0\u00d1\2\u0a64\u0a63\3\2\2\2\u0a64\u0a65\3"+
		"\2\2\2\u0a65\u0a66\3\2\2\2\u0a66\u0a68\7\u01ec\2\2\u0a67\u0a69\5\u013c"+
		"\u009f\2\u0a68\u0a67\3\2\2\2\u0a68\u0a69\3\2\2\2\u0a69\u0a6b\3\2\2\2\u0a6a"+
		"\u0a6c\5\u013e\u00a0\2\u0a6b\u0a6a\3\2\2\2\u0a6b\u0a6c\3\2\2\2\u0a6c\u013b"+
		"\3\2\2\2\u0a6d\u0a6e\7\u014c\2\2\u0a6e\u0a6f\t\37\2\2\u0a6f\u0a70\7\u0090"+
		"\2\2\u0a70\u0a71\7(\2\2\u0a71\u0a73\5\u02c0\u0161\2\u0a72\u0a74\7\20\2"+
		"\2\u0a73\u0a72\3\2\2\2\u0a73\u0a74\3\2\2\2\u0a74\u0a76\3\2\2\2\u0a75\u0a77"+
		"\7j\2\2\u0a76\u0a75\3\2\2\2\u0a76\u0a77\3\2\2\2\u0a77\u0a7a\3\2\2\2\u0a78"+
		"\u0a79\7\u00fe\2\2\u0a79\u0a7b\7\u0090\2\2\u0a7a\u0a78\3\2\2\2\u0a7a\u0a7b"+
		"\3\2\2\2\u0a7b\u0a7e\3\2\2\2\u0a7c\u0a7d\7\u00fe\2\2\u0a7d\u0a7f\7\u00c3"+
		"\2\2\u0a7e\u0a7c\3\2\2\2\u0a7e\u0a7f\3\2\2\2\u0a7f\u0a92\3\2\2\2\u0a80"+
		"\u0a81\7\u01f1\2\2\u0a81\u0a83\5\u02c0\u0161\2\u0a82\u0a84\7\20\2\2\u0a83"+
		"\u0a82\3\2\2\2\u0a83\u0a84\3\2\2\2\u0a84\u0a86\3\2\2\2\u0a85\u0a87\7j"+
		"\2\2\u0a86\u0a85\3\2\2\2\u0a86\u0a87\3\2\2\2\u0a87\u0a8a\3\2\2\2\u0a88"+
		"\u0a89\7\u00fe\2\2\u0a89\u0a8b\7\u0090\2\2\u0a8a\u0a88\3\2\2\2\u0a8a\u0a8b"+
		"\3\2\2\2\u0a8b\u0a8e\3\2\2\2\u0a8c\u0a8d\7\u00fe\2\2\u0a8d\u0a8f\7\u00c3"+
		"\2\2\u0a8e\u0a8c\3\2\2\2\u0a8e\u0a8f\3\2\2\2\u0a8f\u0a91\3\2\2\2\u0a90"+
		"\u0a80\3\2\2\2\u0a91\u0a94\3\2\2\2\u0a92\u0a90\3\2\2\2\u0a92\u0a93\3\2"+
		"\2\2\u0a93\u0a95\3\2\2\2\u0a94\u0a92\3\2\2\2\u0a95\u0a96\7\u0158\2\2\u0a96"+
		"\u0a97\5\u02c0\u0161\2\u0a97\u013d\3\2\2\2\u0a98\u0a99\7V\2\2\u0a99\u0a9e"+
		"\5\u02c0\u0161\2\u0a9a\u0a9b\7\u01f1\2\2\u0a9b\u0a9d\5\u02c0\u0161\2\u0a9c"+
		"\u0a9a\3\2\2\2\u0a9d\u0aa0\3\2\2\2\u0a9e\u0a9c\3\2\2\2\u0a9e\u0a9f\3\2"+
		"\2\2\u0a9f\u0aa1\3\2\2\2\u0aa0\u0a9e\3\2\2\2\u0aa1\u0aa2\7\u0158\2\2\u0aa2"+
		"\u0aa3\5\u02c0\u0161\2\u0aa3\u0aa4\7\u0184\2\2\u0aa4\u0aa5\5\u01f4\u00fb"+
		"\2\u0aa5\u0aa6\7d\2\2\u0aa6\u0aa7\5\u01f4\u00fb\2\u0aa7\u013f\3\2\2\2"+
		"\u0aa8\u0aac\5\u0144\u00a3\2\u0aa9\u0aab\5\u0142\u00a2\2\u0aaa\u0aa9\3"+
		"\2\2\2\u0aab\u0aae\3\2\2\2\u0aac\u0aaa\3\2\2\2\u0aac\u0aad\3\2\2\2\u0aad"+
		"\u0141\3\2\2\2\u0aae\u0aac\3\2\2\2\u0aaf\u0ab1\7\u0190\2\2\u0ab0\u0ab2"+
		"\7\t\2\2\u0ab1\u0ab0\3\2\2\2\u0ab1\u0ab2\3\2\2\2\u0ab2\u0ab6\3\2\2\2\u0ab3"+
		"\u0ab6\7\u00b8\2\2\u0ab4\u0ab6\7\u00dd\2\2\u0ab5\u0aaf\3\2\2\2\u0ab5\u0ab3"+
		"\3\2\2\2\u0ab5\u0ab4\3\2\2\2\u0ab6\u0ab7\3\2\2\2\u0ab7\u0ab8\5\u0144\u00a3"+
		"\2\u0ab8\u0143\3\2\2\2\u0ab9\u0abf\5\u0146\u00a4\2\u0aba\u0abb\7\u01eb"+
		"\2\2\u0abb\u0abc\5\u0140\u00a1\2\u0abc\u0abd\7\u01ec\2\2\u0abd\u0abf\3"+
		"\2\2\2\u0abe\u0ab9\3\2\2\2\u0abe\u0aba\3\2\2\2\u0abf\u0145\3\2\2\2\u0ac0"+
		"\u0ac2\7\u0150\2\2\u0ac1\u0ac3\t \2\2\u0ac2\u0ac1\3\2\2\2\u0ac2\u0ac3"+
		"\3\2\2\2\u0ac3\u0acd\3\2\2\2\u0ac4\u0ace\7\u01ee\2\2\u0ac5\u0aca\5\u0148"+
		"\u00a5\2\u0ac6\u0ac7\7\u01f1\2\2\u0ac7\u0ac9\5\u0148\u00a5\2\u0ac8\u0ac6"+
		"\3\2\2\2\u0ac9\u0acc\3\2\2\2\u0aca\u0ac8\3\2\2\2\u0aca\u0acb\3\2\2\2\u0acb"+
		"\u0ace\3\2\2\2\u0acc\u0aca\3\2\2\2\u0acd\u0ac4\3\2\2\2\u0acd\u0ac5\3\2"+
		"\2\2\u0ace\u0ad0\3\2\2\2\u0acf\u0ad1\5\u0284\u0143\2\u0ad0\u0acf\3\2\2"+
		"\2\u0ad0\u0ad1\3\2\2\2\u0ad1\u0ad2\3\2\2\2\u0ad2\u0ad4\5\u014a\u00a6\2"+
		"\u0ad3\u0ad5\5\u0280\u0141\2\u0ad4\u0ad3\3\2\2\2\u0ad4\u0ad5\3\2\2\2\u0ad5"+
		"\u0ad7\3\2\2\2\u0ad6\u0ad8\5\u0172\u00ba\2\u0ad7\u0ad6\3\2\2\2\u0ad7\u0ad8"+
		"\3\2\2\2\u0ad8\u0ada\3\2\2\2\u0ad9\u0adb\5\u0176\u00bc\2\u0ada\u0ad9\3"+
		"\2\2\2\u0ada\u0adb\3\2\2\2\u0adb\u0add\3\2\2\2\u0adc\u0ade\5\u0182\u00c2"+
		"\2\u0add\u0adc\3\2\2\2\u0add\u0ade\3\2\2\2\u0ade\u0147\3\2\2\2\u0adf\u0ae1"+
		"\5\u014c\u00a7\2\u0ae0\u0ae2\5\u027a\u013e\2\u0ae1\u0ae0\3\2\2\2\u0ae1"+
		"\u0ae2\3\2\2\2\u0ae2\u0149\3\2\2\2\u0ae3\u0ae4\7\u0098\2\2\u0ae4\u0ae5"+
		"\5\u014e\u00a8\2\u0ae5\u014b\3\2\2\2\u0ae6\u0ae7\5\u02c2\u0162\2\u0ae7"+
		"\u0ae8\7\u01e4\2\2\u0ae8\u0ae9\7\u01ee\2\2\u0ae9\u0aec\3\2\2\2\u0aea\u0aec"+
		"\5\u01f4\u00fb\2\u0aeb\u0ae6\3\2\2\2\u0aeb\u0aea\3\2\2\2\u0aec\u014d\3"+
		"\2\2\2\u0aed\u0af2\5\u0150\u00a9\2\u0aee\u0aef\7\u01f1\2\2\u0aef\u0af1"+
		"\5\u0150\u00a9\2\u0af0\u0aee\3\2\2\2\u0af1\u0af4\3\2\2\2\u0af2\u0af0\3"+
		"\2\2\2\u0af2\u0af3\3\2\2\2\u0af3\u014f\3\2\2\2\u0af4\u0af2\3\2\2\2\u0af5"+
		"\u0af9\5\u0152\u00aa\2\u0af6\u0af8\5\u0154\u00ab\2\u0af7\u0af6\3\2\2\2"+
		"\u0af8\u0afb\3\2\2\2\u0af9\u0af7\3\2\2\2\u0af9\u0afa\3\2\2\2\u0afa\u0afe"+
		"\3\2\2\2\u0afb\u0af9\3\2\2\2\u0afc\u0aff\5\u0160\u00b1\2\u0afd\u0aff\5"+
		"\u016c\u00b7\2\u0afe\u0afc\3\2\2\2\u0afe\u0afd\3\2\2\2\u0afe\u0aff\3\2"+
		"\2\2\u0aff\u0151\3\2\2\2\u0b00\u0b03\5\u01e2\u00f2\2\u0b01\u0b04\5\u0160"+
		"\u00b1\2\u0b02\u0b04\5\u016c\u00b7\2\u0b03\u0b01\3\2\2\2\u0b03\u0b02\3"+
		"\2\2\2\u0b03\u0b04\3\2\2\2\u0b04\u0b1d\3\2\2\2\u0b05\u0b06\7\u01eb\2\2"+
		"\u0b06\u0b0a\5\u0150\u00a9\2\u0b07\u0b09\5\u0142\u00a2\2\u0b08\u0b07\3"+
		"\2\2\2\u0b09\u0b0c\3\2\2\2\u0b0a\u0b08\3\2\2\2\u0b0a\u0b0b\3\2\2\2\u0b0b"+
		"\u0b0d\3\2\2\2\u0b0c\u0b0a\3\2\2\2\u0b0d\u0b10\7\u01ec\2\2\u0b0e\u0b11"+
		"\5\u0160\u00b1\2\u0b0f\u0b11\5\u016c\u00b7\2\u0b10\u0b0e\3\2\2\2\u0b10"+
		"\u0b0f\3\2\2\2\u0b10\u0b11\3\2\2\2\u0b11\u0b1d\3\2\2\2\u0b12\u0b13\7\u0108"+
		"\2\2\u0b13\u0b14\7\u01eb\2\2\u0b14\u0b15\5\u01e2\u00f2\2\u0b15\u0b16\7"+
		"\u01ec\2\2\u0b16\u0b1d\3\2\2\2\u0b17\u0b1a\5\u01e2\u00f2\2\u0b18\u0b1b"+
		"\5\u0160\u00b1\2\u0b19\u0b1b\5\u016c\u00b7\2\u0b1a\u0b18\3\2\2\2\u0b1a"+
		"\u0b19\3\2\2\2\u0b1a\u0b1b\3\2\2\2\u0b1b\u0b1d\3\2\2\2\u0b1c\u0b00\3\2"+
		"\2\2\u0b1c\u0b05\3\2\2\2\u0b1c\u0b12\3\2\2\2\u0b1c\u0b17\3\2\2\2\u0b1d"+
		"\u0b21\3\2\2\2\u0b1e\u0b20\5\u015e\u00b0\2\u0b1f\u0b1e\3\2\2\2\u0b20\u0b23"+
		"\3\2\2\2\u0b21\u0b1f\3\2\2\2\u0b21\u0b22\3\2\2\2\u0b22\u0b25\3\2\2\2\u0b23"+
		"\u0b21\3\2\2\2\u0b24\u0b26\5\u027c\u013f\2\u0b25\u0b24\3\2\2\2\u0b25\u0b26"+
		"\3\2\2\2\u0b26\u0153\3\2\2\2\u0b27\u0b29\5\u015c\u00af\2\u0b28\u0b27\3"+
		"\2\2\2\u0b28\u0b29\3\2\2\2\u0b29\u0b2b\3\2\2\2\u0b2a\u0b2c\t!\2\2\u0b2b"+
		"\u0b2a\3\2\2\2\u0b2b\u0b2c\3\2\2\2\u0b2c\u0b2f\3\2\2\2\u0b2d\u0b30\7\u00b1"+
		"\2\2\u0b2e\u0b30\5\u015a\u00ae\2\u0b2f\u0b2d\3\2\2\2\u0b2f\u0b2e\3\2\2"+
		"\2\u0b2f\u0b30\3\2\2\2\u0b30\u0b31\3\2\2\2\u0b31\u0b32\7\u00c0\2\2\u0b32"+
		"\u0b34\5\u0152\u00aa\2\u0b33\u0b35\5\u015c\u00af\2\u0b34\u0b33\3\2\2\2"+
		"\u0b34\u0b35\3\2\2\2\u0b35\u0b3a\3\2\2\2\u0b36\u0b39\5\u0156\u00ac\2\u0b37"+
		"\u0b39\5\u0158\u00ad\2\u0b38\u0b36\3\2\2\2\u0b38\u0b37\3\2\2\2\u0b39\u0b3c"+
		"\3\2\2\2\u0b3a\u0b38\3\2\2\2\u0b3a\u0b3b\3\2\2\2\u0b3b\u0155\3\2\2\2\u0b3c"+
		"\u0b3a\3\2\2\2\u0b3d\u0b3e\7\u0107\2\2\u0b3e\u0b3f\5\u01f0\u00f9\2\u0b3f"+
		"\u0157\3\2\2\2\u0b40\u0b41\7\u019a\2\2\u0b41\u0b42\7\u01eb\2\2\u0b42\u0b47"+
		"\5\u02c0\u0161\2\u0b43\u0b44\7\u01f1\2\2\u0b44\u0b46\5\u02c0\u0161\2\u0b45"+
		"\u0b43\3\2\2\2\u0b46\u0b49\3\2\2\2\u0b47\u0b45\3\2\2\2\u0b47\u0b48\3\2"+
		"\2\2\u0b48\u0b4a\3\2\2\2\u0b49\u0b47\3\2\2\2\u0b4a\u0b4b\7\u01ec\2\2\u0b4b"+
		"\u0159\3\2\2\2\u0b4c\u0b4e\t\"\2\2\u0b4d\u0b4f\7\u0111\2\2\u0b4e\u0b4d"+
		"\3\2\2\2\u0b4e\u0b4f\3\2\2\2\u0b4f\u015b\3\2\2\2\u0b50\u0b51\7\u0118\2"+
		"\2\u0b51\u0b5f\7(\2\2\u0b52\u0b53\7\u01eb\2\2\u0b53\u0b54\5\u0140\u00a1"+
		"\2\u0b54\u0b55\7\u01ec\2\2\u0b55\u0b60\3\2\2\2\u0b56\u0b60\5\u01ee\u00f8"+
		"\2\u0b57\u0b5c\5\u01f4\u00fb\2\u0b58\u0b59\7\u01f1\2\2\u0b59\u0b5b\5\u01f4"+
		"\u00fb\2\u0b5a\u0b58\3\2\2\2\u0b5b\u0b5e\3\2\2\2\u0b5c\u0b5a\3\2\2\2\u0b5c"+
		"\u0b5d\3\2\2\2\u0b5d\u0b60\3\2\2\2\u0b5e\u0b5c\3\2\2\2\u0b5f\u0b52\3\2"+
		"\2\2\u0b5f\u0b56\3\2\2\2\u0b5f\u0b57\3\2\2\2\u0b60\u015d\3\2\2\2\u0b61"+
		"\u0b62\7\u01a4\2\2\u0b62\u0b63\7\34\2\2\u0b63\u0b64\t#\2\2\u0b64\u0b6a"+
		"\5\u01f4\u00fb\2\u0b65\u0b66\7\17\2\2\u0b66\u0b67\7\u0103\2\2\u0b67\u0b68"+
		"\t$\2\2\u0b68\u0b6a\5\u01f4\u00fb\2\u0b69\u0b61\3\2\2\2\u0b69\u0b65\3"+
		"\2\2\2\u0b6a\u015f\3\2\2\2\u0b6b\u0b6d\7\u011e\2\2\u0b6c\u0b6e\7\u01b0"+
		"\2\2\u0b6d\u0b6c\3\2\2\2\u0b6d\u0b6e\3\2\2\2\u0b6e\u0b6f\3\2\2\2\u0b6f"+
		"\u0b70\7\u01eb\2\2\u0b70\u0b75\5\u0162\u00b2\2\u0b71\u0b72\7\u01f1\2\2"+
		"\u0b72\u0b74\5\u0162\u00b2\2\u0b73\u0b71\3\2\2\2\u0b74\u0b77\3\2\2\2\u0b75"+
		"\u0b73\3\2\2\2\u0b75\u0b76\3\2\2\2\u0b76\u0b78\3\2\2\2\u0b77\u0b75\3\2"+
		"\2\2\u0b78\u0b79\5\u0164\u00b3\2\u0b79\u0b7a\5\u0166\u00b4\2\u0b7a\u0b7b"+
		"\7\u01ec\2\2\u0b7b\u0161\3\2\2\2\u0b7c\u0b7d\5\u02a0\u0151\2\u0b7d\u0b7e"+
		"\7\u01eb\2\2\u0b7e\u0b7f\5\u01f4\u00fb\2\u0b7f\u0b81\7\u01ec\2\2\u0b80"+
		"\u0b82\5\u027a\u013e\2\u0b81\u0b80\3\2\2\2\u0b81\u0b82\3\2\2\2\u0b82\u0163"+
		"\3\2\2\2\u0b83\u0b90\7\u0095\2\2\u0b84\u0b91\5\u02c0\u0161\2\u0b85\u0b86"+
		"\7\u01eb\2\2\u0b86\u0b8b\5\u02c0\u0161\2\u0b87\u0b88\7\u01f1\2\2\u0b88"+
		"\u0b8a\5\u02c0\u0161\2\u0b89\u0b87\3\2\2\2\u0b8a\u0b8d\3\2\2\2\u0b8b\u0b89"+
		"\3\2\2\2\u0b8b\u0b8c\3\2\2\2\u0b8c\u0b8e\3\2\2\2\u0b8d\u0b8b\3\2\2\2\u0b8e"+
		"\u0b8f\7\u01ec\2\2\u0b8f\u0b91\3\2\2\2\u0b90\u0b84\3\2\2\2\u0b90\u0b85"+
		"\3\2\2\2\u0b91\u0165\3\2\2\2\u0b92\u0b93\7\u00a6\2\2\u0b93\u0ba5\7\u01eb"+
		"\2\2\u0b94\u0ba6\5\u0140\u00a1\2\u0b95\u0b9a\7\r\2\2\u0b96\u0b97\7\u01f1"+
		"\2\2\u0b97\u0b99\7\r\2\2\u0b98\u0b96\3\2\2\2\u0b99\u0b9c\3\2\2\2\u0b9a"+
		"\u0b98\3\2\2\2\u0b9a\u0b9b\3\2\2\2\u0b9b\u0ba6\3\2\2\2\u0b9c\u0b9a\3\2"+
		"\2\2\u0b9d\u0ba2\5\u0168\u00b5\2\u0b9e\u0b9f\7\u01f1\2\2\u0b9f\u0ba1\5"+
		"\u0168\u00b5\2\u0ba0\u0b9e\3\2\2\2\u0ba1\u0ba4\3\2\2\2\u0ba2\u0ba0\3\2"+
		"\2\2\u0ba2\u0ba3\3\2\2\2\u0ba3\u0ba6\3\2\2\2\u0ba4\u0ba2\3\2\2\2\u0ba5"+
		"\u0b94\3\2\2\2\u0ba5\u0b95\3\2\2\2\u0ba5\u0b9d\3\2\2\2\u0ba6\u0ba7\3\2"+
		"\2\2\u0ba7\u0ba8\7\u01ec\2\2\u0ba8\u0167\3\2\2\2\u0ba9\u0bab\5\u016a\u00b6"+
		"\2\u0baa\u0bac\5\u027a\u013e\2\u0bab\u0baa\3\2\2\2\u0bab\u0bac\3\2\2\2"+
		"\u0bac\u0169\3\2\2\2\u0bad\u0bb0\5\u01f4\u00fb\2\u0bae\u0bb0\5\u01ee\u00f8"+
		"\2\u0baf\u0bad\3\2\2\2\u0baf\u0bae\3\2\2\2\u0bb0\u016b\3\2\2\2\u0bb1\u0bb4"+
		"\7\u0193\2\2\u0bb2\u0bb3\t%\2\2\u0bb3\u0bb5\7\u00fe\2\2\u0bb4\u0bb2\3"+
		"\2\2\2\u0bb4\u0bb5\3\2\2\2\u0bb5\u0bb6\3\2\2\2\u0bb6\u0bc3\7\u01eb\2\2"+
		"\u0bb7\u0bc4\5\u02c0\u0161\2\u0bb8\u0bb9\7\u01eb\2\2\u0bb9\u0bbe\5\u02c0"+
		"\u0161\2\u0bba\u0bbb\7\u01f1\2\2\u0bbb\u0bbd\5\u02c0\u0161\2\u0bbc\u0bba"+
		"\3\2\2\2\u0bbd\u0bc0\3\2\2\2\u0bbe\u0bbc\3\2\2\2\u0bbe\u0bbf\3\2\2\2\u0bbf"+
		"\u0bc1\3\2\2\2\u0bc0\u0bbe\3\2\2\2\u0bc1\u0bc2\7\u01ec\2\2\u0bc2\u0bc4"+
		"\3\2\2\2\u0bc3\u0bb7\3\2\2\2\u0bc3\u0bb8\3\2\2\2\u0bc4\u0bc5\3\2\2\2\u0bc5"+
		"\u0bc6\5\u0164\u00b3\2\u0bc6\u0bc7\5\u016e\u00b8\2\u0bc7\u0bc8\7\u01ec"+
		"\2\2\u0bc8\u016d\3\2\2\2\u0bc9\u0bca\7\u00a6\2\2\u0bca\u0bcb\7\u01eb\2"+
		"\2\u0bcb\u0bd0\5\u0170\u00b9\2\u0bcc\u0bcd\7\u01f1\2\2\u0bcd\u0bcf\5\u0170"+
		"\u00b9\2\u0bce\u0bcc\3\2\2\2\u0bcf\u0bd2\3\2\2\2\u0bd0\u0bce\3\2\2\2\u0bd0"+
		"\u0bd1\3\2\2\2\u0bd1\u0bd3\3\2\2\2\u0bd2\u0bd0\3\2\2\2\u0bd3\u0bd4\7\u01ec"+
		"\2\2\u0bd4\u016f\3\2\2\2\u0bd5\u0be2\5\u02c0\u0161\2\u0bd6\u0bd7\7\u01eb"+
		"\2\2\u0bd7\u0bdc\5\u02c0\u0161\2\u0bd8\u0bd9\7\u01f1\2\2\u0bd9\u0bdb\5"+
		"\u02c0\u0161\2\u0bda\u0bd8\3\2\2\2\u0bdb\u0bde\3\2\2\2\u0bdc\u0bda\3\2"+
		"\2\2\u0bdc\u0bdd\3\2\2\2\u0bdd\u0bdf\3\2\2\2\u0bde\u0bdc\3\2\2\2\u0bdf"+
		"\u0be0\7\u01ec\2\2\u0be0\u0be2\3\2\2\2\u0be1\u0bd5\3\2\2\2\u0be1\u0bd6"+
		"\3\2\2\2\u0be2\u0bf2\3\2\2\2\u0be3\u0bf0\7\17\2\2\u0be4\u0bf1\5\u02e2"+
		"\u0172\2\u0be5\u0be6\7\u01eb\2\2\u0be6\u0beb\5\u02e2\u0172\2\u0be7\u0be8"+
		"\7\u01f1\2\2\u0be8\u0bea\5\u02e2\u0172\2\u0be9\u0be7\3\2\2\2\u0bea\u0bed"+
		"\3\2\2\2\u0beb\u0be9\3\2\2\2\u0beb\u0bec\3\2\2\2\u0bec\u0bee\3\2\2\2\u0bed"+
		"\u0beb\3\2\2\2\u0bee\u0bef\7\u01ec\2\2\u0bef\u0bf1\3\2\2\2\u0bf0\u0be4"+
		"\3\2\2\2\u0bf0\u0be5\3\2\2\2\u0bf1\u0bf3\3\2\2\2\u0bf2\u0be3\3\2\2\2\u0bf2"+
		"\u0bf3\3\2\2\2\u0bf3\u0171\3\2\2\2\u0bf4\u0bf5\7A\2\2\u0bf5\u0bf7\7(\2"+
		"\2\u0bf6\u0bf8\7\u00f4\2\2\u0bf7\u0bf6\3\2\2\2\u0bf7\u0bf8\3\2\2\2\u0bf8"+
		"\u0bf9\3\2\2\2\u0bf9\u0bfb\5\u01f0\u00f9\2\u0bfa\u0bfc\5\u0174\u00bb\2"+
		"\u0bfb\u0bfa\3\2\2\2\u0bfb\u0bfc\3\2\2\2\u0bfc\u0c06\3\2\2\2\u0bfd\u0bfe"+
		"\5\u0174\u00bb\2\u0bfe\u0bff\7A\2\2\u0bff\u0c01\7(\2\2\u0c00\u0c02\7\u00f4"+
		"\2\2\u0c01\u0c00\3\2\2\2\u0c01\u0c02\3\2\2\2\u0c02\u0c03\3\2\2\2\u0c03"+
		"\u0c04\5\u01f0\u00f9\2\u0c04\u0c06\3\2\2\2\u0c05\u0bf4\3\2\2\2\u0c05\u0bfd"+
		"\3\2\2\2\u0c06\u0173\3\2\2\2\u0c07\u0c08\7\u016b\2\2\u0c08\u0c09\7\u01ac"+
		"\2\2\u0c09\u0c0a\5\u01f0\u00f9\2\u0c0a\u0175\3\2\2\2\u0c0b\u0c0c\7\u009d"+
		"\2\2\u0c0c\u0c0d\7(\2\2\u0c0d\u0c12\5\u0178\u00bd\2\u0c0e\u0c0f\7\u01f1"+
		"\2\2\u0c0f\u0c11\5\u0178\u00bd\2\u0c10\u0c0e\3\2\2\2\u0c11\u0c14\3\2\2"+
		"\2\u0c12\u0c10\3\2\2\2\u0c12\u0c13\3\2\2\2\u0c13\u0c16\3\2\2\2\u0c14\u0c12"+
		"\3\2\2\2\u0c15\u0c17\5\u0180\u00c1\2\u0c16\u0c15\3\2\2\2\u0c16\u0c17\3"+
		"\2\2\2\u0c17\u0c26\3\2\2\2\u0c18\u0c23\5\u0180\u00c1\2\u0c19\u0c1a\7\u009d"+
		"\2\2\u0c1a\u0c1b\7(\2\2\u0c1b\u0c20\5\u0178\u00bd\2\u0c1c\u0c1d\7\u01f1"+
		"\2\2\u0c1d\u0c1f\5\u0178\u00bd\2\u0c1e\u0c1c\3\2\2\2\u0c1f\u0c22\3\2\2"+
		"\2\u0c20\u0c1e\3\2\2\2\u0c20\u0c21\3\2\2\2\u0c21\u0c24\3\2\2\2\u0c22\u0c20"+
		"\3\2\2\2\u0c23\u0c19\3\2\2\2\u0c23\u0c24\3\2\2\2\u0c24\u0c26\3\2\2\2\u0c25"+
		"\u0c0b\3\2\2\2\u0c25\u0c18\3\2\2\2\u0c26\u0177\3\2\2\2\u0c27\u0c2b\5\u017c"+
		"\u00bf\2\u0c28\u0c2b\5\u017a\u00be\2\u0c29\u0c2b\5\u01f4\u00fb\2\u0c2a"+
		"\u0c27\3\2\2\2\u0c2a\u0c28\3\2\2\2\u0c2a\u0c29\3\2\2\2\u0c2b\u0179\3\2"+
		"\2\2\u0c2c\u0c2d\t&\2\2\u0c2d\u0c2e\7\u01eb\2\2\u0c2e\u0c33\5\u017e\u00c0"+
		"\2\u0c2f\u0c30\7\u01f1\2\2\u0c30\u0c32\5\u017e\u00c0\2\u0c31\u0c2f\3\2"+
		"\2\2\u0c32\u0c35\3\2\2\2\u0c33\u0c31\3\2\2\2\u0c33\u0c34\3\2\2\2\u0c34"+
		"\u0c36\3\2\2\2\u0c35\u0c33\3\2\2\2\u0c36\u0c37\7\u01ec\2\2\u0c37\u017b"+
		"\3\2\2\2\u0c38\u0c39\7\u009e\2\2\u0c39\u0c3a\7\u0159\2\2\u0c3a\u0c3b\7"+
		"\u01eb\2\2\u0c3b\u0c40\5\u017e\u00c0\2\u0c3c\u0c3d\7\u01f1\2\2\u0c3d\u0c3f"+
		"\5\u017e\u00c0\2\u0c3e\u0c3c\3\2\2\2\u0c3f\u0c42\3\2\2\2\u0c40\u0c3e\3"+
		"\2\2\2\u0c40\u0c41\3\2\2\2\u0c41\u0c43\3\2\2\2\u0c42\u0c40\3\2\2\2\u0c43"+
		"\u0c44\7\u01ec\2\2\u0c44\u017d\3\2\2\2\u0c45\u0c49\5\u017a\u00be\2\u0c46"+
		"\u0c49\5\u01ee\u00f8\2\u0c47\u0c49\5\u01f4\u00fb\2\u0c48\u0c45\3\2\2\2"+
		"\u0c48\u0c46\3\2\2\2\u0c48\u0c47\3\2\2\2\u0c49\u017f\3\2\2\2\u0c4a\u0c4b"+
		"\7\u00a0\2\2\u0c4b\u0c4c\5\u01f0\u00f9\2\u0c4c\u0181\3\2\2\2\u0c4d\u0c51"+
		"\7\u00e2\2\2\u0c4e\u0c50\5\u0184\u00c3\2\u0c4f\u0c4e\3\2\2\2\u0c50\u0c53"+
		"\3\2\2\2\u0c51\u0c4f\3\2\2\2\u0c51\u0c52\3\2\2\2\u0c52\u0c55\3\2\2\2\u0c53"+
		"\u0c51\3\2\2\2\u0c54\u0c56\5\u0186\u00c4\2\u0c55\u0c54\3\2\2\2\u0c55\u0c56"+
		"\3\2\2\2\u0c56\u0c5a\3\2\2\2\u0c57\u0c59\5\u0188\u00c5\2\u0c58\u0c57\3"+
		"\2\2\2\u0c59\u0c5c\3\2\2\2\u0c5a\u0c58\3\2\2\2\u0c5a\u0c5b\3\2\2\2\u0c5b"+
		"\u0c5d\3\2\2\2\u0c5c\u0c5a\3\2\2\2\u0c5d\u0c5e\5\u018a\u00c6\2\u0c5e\u0183"+
		"\3\2\2\2\u0c5f\u0c60\t\'\2\2\u0c60\u0c68\7\u00ea\2\2\u0c61\u0c65\7\u0191"+
		"\2\2\u0c62\u0c66\7l\2\2\u0c63\u0c64\7\u0161\2\2\u0c64\u0c66\7\u0130\2"+
		"\2\u0c65\u0c62\3\2\2\2\u0c65\u0c63\3\2\2\2\u0c66\u0c68\3\2\2\2\u0c67\u0c5f"+
		"\3\2\2\2\u0c67\u0c61\3\2\2\2\u0c68\u0185\3\2\2\2\u0c69\u0c6a\7\u013a\2"+
		"\2\u0c6a\u0c6b\t(\2\2\u0c6b\u0c6c\7\u0144\2\2\u0c6c\u0187\3\2\2\2\u0c6d"+
		"\u0c6e\7\u0130\2\2\u0c6e\u0c6f\5\u029c\u014f\2\u0c6f\u0c70\7\u0107\2\2"+
		"\u0c70\u0c71\7\u01eb\2\2\u0c71\u0c72\5\u0140\u00a1\2\u0c72\u0c73\7\u01ec"+
		"\2\2\u0c73\u0c77\5\u018c\u00c7\2\u0c74\u0c76\5\u0184\u00c3\2\u0c75\u0c74"+
		"\3\2\2\2\u0c76\u0c79\3\2\2\2\u0c77\u0c75\3\2\2\2\u0c77\u0c78\3\2\2\2\u0c78"+
		"\u0189\3\2\2\2\u0c79\u0c77\3\2\2\2\u0c7a\u0c7b\7\u00d6\2\2\u0c7b\u0c7d"+
		"\5\u029e\u0150\2\u0c7c\u0c7a\3\2\2\2\u0c7c\u0c7d\3\2\2\2\u0c7d\u0c7e\3"+
		"\2\2\2\u0c7e\u0c82\5\u018c\u00c7\2\u0c7f\u0c81\5\u0184\u00c3\2\u0c80\u0c7f"+
		"\3\2\2\2\u0c81\u0c84\3\2\2\2\u0c82\u0c80\3\2\2\2\u0c82\u0c83\3\2\2\2\u0c83"+
		"\u0c85\3\2\2\2\u0c84\u0c82\3\2\2\2\u0c85\u0c86\5\u0194\u00cb\2\u0c86\u018b"+
		"\3\2\2\2\u0c87\u0c89\5\u018e\u00c8\2\u0c88\u0c87\3\2\2\2\u0c88\u0c89\3"+
		"\2\2\2\u0c89\u0c8a\3\2\2\2\u0c8a\u0c8b\7l\2\2\u0c8b\u0c8c\7(\2\2\u0c8c"+
		"\u0c8d\5\u0190\u00c9\2\u0c8d\u0c8e\7\u00da\2\2\u0c8e\u0c8f\5\u0190\u00c9"+
		"\2\u0c8f\u018d\3\2\2\2\u0c90\u0c91\7\u0118\2\2\u0c91\u0c92\7(\2\2\u0c92"+
		"\u0c93\5\u0190\u00c9\2\u0c93\u018f\3\2\2\2\u0c94\u0c95\7\u01eb\2\2\u0c95"+
		"\u0c9a\5\u0192\u00ca\2\u0c96\u0c97\7\u01f1\2\2\u0c97\u0c99\5\u0192\u00ca"+
		"\2\u0c98\u0c96\3\2\2\2\u0c99\u0c9c\3\2\2\2\u0c9a\u0c98\3\2\2\2\u0c9a\u0c9b"+
		"\3\2\2\2\u0c9b\u0c9d\3\2\2\2\u0c9c\u0c9a\3\2\2\2\u0c9d\u0c9e\7\u01ec\2"+
		"\2\u0c9e\u0191\3\2\2\2\u0c9f\u0ca1\5\u01f4\u00fb\2\u0ca0\u0ca2\5\u027c"+
		"\u013f\2\u0ca1\u0ca0\3\2\2\2\u0ca1\u0ca2\3\2\2\2\u0ca2\u0193\3\2\2\2\u0ca3"+
		"\u0ca5\5\u0196\u00cc\2\u0ca4\u0ca3\3\2\2\2\u0ca4\u0ca5\3\2\2\2\u0ca5\u0ca6"+
		"\3\2\2\2\u0ca6\u0ca7\7\u01eb\2\2\u0ca7\u0cac\5\u0198\u00cd\2\u0ca8\u0ca9"+
		"\7\u01f1\2\2\u0ca9\u0cab\5\u0198\u00cd\2\u0caa\u0ca8\3\2\2\2\u0cab\u0cae"+
		"\3\2\2\2\u0cac\u0caa\3\2\2\2\u0cac\u0cad\3\2\2\2\u0cad\u0caf\3\2\2\2\u0cae"+
		"\u0cac\3\2\2\2\u0caf\u0cb0\7\u01ec\2\2\u0cb0\u0195\3\2\2\2\u0cb1\u0cb7"+
		"\7\u0145\2\2\u0cb2\u0cb8\7\u0195\2\2\u0cb3\u0cb5\7\u0197\2\2\u0cb4\u0cb6"+
		"\7\t\2\2\u0cb5\u0cb4\3\2\2\2\u0cb5\u0cb6\3\2\2\2\u0cb6\u0cb8\3\2\2\2\u0cb7"+
		"\u0cb2\3\2\2\2\u0cb7\u0cb3\3\2\2\2\u0cb7\u0cb8\3\2\2\2\u0cb8\u0cbb\3\2"+
		"\2\2\u0cb9\u0cba\t)\2\2\u0cba\u0cbc\7\u010d\2\2\u0cbb\u0cb9\3\2\2\2\u0cbb"+
		"\u0cbc\3\2\2\2\u0cbc\u0cbe\3\2\2\2\u0cbd\u0cbf\5\u019c\u00cf\2\u0cbe\u0cbd"+
		"\3\2\2\2\u0cbe\u0cbf\3\2\2\2\u0cbf\u0197\3\2\2\2\u0cc0\u0cc6\7\u0195\2"+
		"\2\u0cc1\u0cc3\7\u0197\2\2\u0cc2\u0cc4\7\t\2\2\u0cc3\u0cc2\3\2\2\2\u0cc3"+
		"\u0cc4\3\2\2\2\u0cc4\u0cc6\3\2\2\2\u0cc5\u0cc0\3\2\2\2\u0cc5\u0cc1\3\2"+
		"\2\2\u0cc5\u0cc6\3\2\2\2\u0cc6\u0cc7\3\2\2\2\u0cc7\u0cc9\5\u019a\u00ce"+
		"\2\u0cc8\u0cca\5\u01a0\u00d1\2\u0cc9\u0cc8\3\2\2\2\u0cc9\u0cca\3\2\2\2"+
		"\u0cca\u0ccb\3\2\2\2\u0ccb\u0ccc\7\u0202\2\2\u0ccc\u0ccd\5\u01f4\u00fb"+
		"\2\u0ccd\u0199\3\2\2\2\u0cce\u0ccf\5\u021a\u010e\2\u0ccf\u019b\3\2\2\2"+
		"\u0cd0\u0cd1\7\u00be\2\2\u0cd1\u0cd2\7\u01eb\2\2\u0cd2\u0cd3\5\u01f4\u00fb"+
		"\2\u0cd3\u0cd5\7\u01ec\2\2\u0cd4\u0cd6\5\u019e\u00d0\2\u0cd5\u0cd4\3\2"+
		"\2\2\u0cd5\u0cd6\3\2\2\2\u0cd6\u019d\3\2\2\2\u0cd7\u0cd8\7\u0194\2\2\u0cd8"+
		"\u0cd9\7\u01eb\2\2\u0cd9\u0cda\5\u01f0\u00f9\2\u0cda\u0cdb\7\u01ec\2\2"+
		"\u0cdb\u019f\3\2\2\2\u0cdc\u0cde\7\u010d\2\2\u0cdd\u0cdf\7\u015e\2\2\u0cde"+
		"\u0cdd\3\2\2\2\u0cde\u0cdf\3\2\2\2\u0cdf\u0ce0\3\2\2\2\u0ce0\u0ce1\7("+
		"\2\2\u0ce1\u0ce6\5\u01a2\u00d2\2\u0ce2\u0ce3\7\u01f1\2\2\u0ce3\u0ce5\5"+
		"\u01a2\u00d2\2\u0ce4\u0ce2\3\2\2\2\u0ce5\u0ce8\3\2\2\2\u0ce6\u0ce4\3\2"+
		"\2\2\u0ce6\u0ce7\3\2\2\2\u0ce7\u01a1\3\2\2\2\u0ce8\u0ce6\3\2\2\2\u0ce9"+
		"\u0ceb\5\u01f4\u00fb\2\u0cea\u0cec\t*\2\2\u0ceb\u0cea\3\2\2\2\u0ceb\u0cec"+
		"\3\2\2\2\u0cec\u0cef\3\2\2\2\u0ced\u0cee\7\u00fe\2\2\u0cee\u0cf0\t+\2"+
		"\2\u0cef\u0ced\3\2\2\2\u0cef\u0cf0\3\2\2\2\u0cf0\u01a3\3\2\2\2\u0cf1\u0cf2"+
		"\7\u0095\2\2\u0cf2\u0cf4\7\u0195\2\2\u0cf3\u0cf5\5\u01a6\u00d4\2\u0cf4"+
		"\u0cf3\3\2\2\2\u0cf4\u0cf5\3\2\2\2\u0cf5\u0cf7\3\2\2\2\u0cf6\u0cf8\5\u01a8"+
		"\u00d5\2\u0cf7\u0cf6\3\2\2\2\u0cf7\u0cf8\3\2\2\2\u0cf8\u01a5\3\2\2\2\u0cf9"+
		"\u0cfa\7\u0103\2\2\u0cfa\u0cff\5\u02c0\u0161\2\u0cfb\u0cfc\7\u01f1\2\2"+
		"\u0cfc\u0cfe\5\u02c0\u0161\2\u0cfd\u0cfb\3\2\2\2\u0cfe\u0d01\3\2\2\2\u0cff"+
		"\u0cfd\3\2\2\2\u0cff\u0d00\3\2\2\2\u0d00\u01a7\3\2\2\2\u0d01\u0cff\3\2"+
		"\2\2\u0d02\u0d03\7\u0163\2\2\u0d03\u0d08\7\u00d0\2\2\u0d04\u0d08\7\u00fc"+
		"\2\2\u0d05\u0d06\7\u01a5\2\2\u0d06\u0d08\5\u01f4\u00fb\2\u0d07\u0d02\3"+
		"\2\2\2\u0d07\u0d04\3\2\2\2\u0d07\u0d05\3\2\2\2\u0d08\u01a9\3\2\2\2\u0d09"+
		"\u0d0a\7\u0195\2\2\u0d0a\u0d0b\5\u01d8\u00ed\2\u0d0b\u0d0d\5\u01ac\u00d7"+
		"\2\u0d0c\u0d0e\5\u0280\u0141\2\u0d0d\u0d0c\3\2\2\2\u0d0d\u0d0e\3\2\2\2"+
		"\u0d0e\u0d10\3\2\2\2\u0d0f\u0d11\5\u01da\u00ee\2\u0d10\u0d0f\3\2\2\2\u0d10"+
		"\u0d11\3\2\2\2\u0d11\u0d13\3\2\2\2\u0d12\u0d14\5\u01dc\u00ef\2\u0d13\u0d12"+
		"\3\2\2\2\u0d13\u0d14\3\2\2\2\u0d14\u01ab\3\2\2\2\u0d15\u0d25\7\u0158\2"+
		"\2\u0d16\u0d1b\5\u01ae\u00d8\2\u0d17\u0d18\7\u01f1\2\2\u0d18\u0d1a\5\u01ae"+
		"\u00d8\2\u0d19\u0d17\3\2\2\2\u0d1a\u0d1d\3\2\2\2\u0d1b\u0d19\3\2\2\2\u0d1b"+
		"\u0d1c\3\2\2\2\u0d1c\u0d26\3\2\2\2\u0d1d\u0d1b\3\2\2\2\u0d1e\u0d1f\7\u019c"+
		"\2\2\u0d1f\u0d20\7\u01eb\2\2\u0d20\u0d21\5\u02ea\u0176\2\u0d21\u0d22\7"+
		"\u01ec\2\2\u0d22\u0d23\7\u0202\2\2\u0d23\u0d24\5\u01f4\u00fb\2\u0d24\u0d26"+
		"\3\2\2\2\u0d25\u0d16\3\2\2\2\u0d25\u0d1e\3\2\2\2\u0d26\u01ad\3\2\2\2\u0d27"+
		"\u0d28\5\u02c0\u0161\2\u0d28\u0d29\7\u0202\2\2\u0d29\u0d2a\5\u01f4\u00fb"+
		"\2\u0d2a\u0d39\3\2\2\2\u0d2b\u0d2c\7\u01eb\2\2\u0d2c\u0d31\5\u02c0\u0161"+
		"\2\u0d2d\u0d2e\7\u01f1\2\2\u0d2e\u0d30\5\u02c0\u0161\2\u0d2f\u0d2d\3\2"+
		"\2\2\u0d30\u0d33\3\2\2\2\u0d31\u0d2f\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32"+
		"\u0d34\3\2\2\2\u0d33\u0d31\3\2\2\2\u0d34\u0d35\7\u01ec\2\2\u0d35\u0d36"+
		"\7\u0202\2\2\u0d36\u0d37\5\u0140\u00a1\2\u0d37\u0d39\3\2\2\2\u0d38\u0d27"+
		"\3\2\2\2\u0d38\u0d2b\3\2\2\2\u0d39\u01af\3\2\2\2\u0d3a\u0d3c\7h\2\2\u0d3b"+
		"\u0d3d\7\u0098\2\2\u0d3c\u0d3b\3\2\2\2\u0d3c\u0d3d\3\2\2\2\u0d3d\u0d3e"+
		"\3\2\2\2\u0d3e\u0d40\5\u01d8\u00ed\2\u0d3f\u0d41\5\u0280\u0141\2\u0d40"+
		"\u0d3f\3\2\2\2\u0d40\u0d41\3\2\2\2\u0d41\u0d43\3\2\2\2\u0d42\u0d44\5\u01da"+
		"\u00ee\2\u0d43\u0d42\3\2\2\2\u0d43\u0d44\3\2\2\2\u0d44\u0d46\3\2\2\2\u0d45"+
		"\u0d47\5\u01dc\u00ef\2\u0d46\u0d45\3\2\2\2\u0d46\u0d47\3\2\2\2\u0d47\u01b1"+
		"\3\2\2\2\u0d48\u0d4b\7\u00b3\2\2\u0d49\u0d4c\5\u01b4\u00db\2\u0d4a\u0d4c"+
		"\5\u01b6\u00dc\2\u0d4b\u0d49\3\2\2\2\u0d4b\u0d4a\3\2\2\2\u0d4c\u01b3\3"+
		"\2\2\2\u0d4d\u0d53\5\u01c0\u00e1\2\u0d4e\u0d50\5\u01c2\u00e2\2\u0d4f\u0d51"+
		"\5\u01da\u00ee\2\u0d50\u0d4f\3\2\2\2\u0d50\u0d51\3\2\2\2\u0d51\u0d54\3"+
		"\2\2\2\u0d52\u0d54\5\u0136\u009c\2\u0d53\u0d4e\3\2\2\2\u0d53\u0d52\3\2"+
		"\2\2\u0d54\u0d56\3\2\2\2\u0d55\u0d57\5\u01dc\u00ef\2\u0d56\u0d55\3\2\2"+
		"\2\u0d56\u0d57\3\2\2\2\u0d57\u01b5\3\2\2\2\u0d58\u0d5a\7\t\2\2\u0d59\u0d5b"+
		"\5\u01b8\u00dd\2\u0d5a\u0d59\3\2\2\2\u0d5b\u0d5c\3\2\2\2\u0d5c\u0d5a\3"+
		"\2\2\2\u0d5c\u0d5d\3\2\2\2\u0d5d\u0d60\3\2\2\2\u0d5e\u0d60\5\u01ba\u00de"+
		"\2\u0d5f\u0d58\3\2\2\2\u0d5f\u0d5e\3\2\2\2\u0d60\u0d61\3\2\2\2\u0d61\u0d62"+
		"\5\u0136\u009c\2\u0d62\u01b7\3\2\2\2\u0d63\u0d65\5\u01c0\u00e1\2\u0d64"+
		"\u0d66\5\u01c2\u00e2\2\u0d65\u0d64\3\2\2\2\u0d65\u0d66\3\2\2\2\u0d66\u0d68"+
		"\3\2\2\2\u0d67\u0d69\5\u01dc\u00ef\2\u0d68\u0d67\3\2\2\2\u0d68\u0d69\3"+
		"\2\2\2\u0d69\u01b9\3\2\2\2\u0d6a\u0d6c\t,\2\2\u0d6b\u0d6a\3\2\2\2\u0d6b"+
		"\u0d6c\3\2\2\2\u0d6c\u0d6e\3\2\2\2\u0d6d\u0d6f\5\u01bc\u00df\2\u0d6e\u0d6d"+
		"\3\2\2\2\u0d6f\u0d70\3\2\2\2\u0d70\u0d6e\3\2\2\2\u0d70\u0d71\3\2\2\2\u0d71"+
		"\u0d73\3\2\2\2\u0d72\u0d74\5\u01be\u00e0\2\u0d73\u0d72\3\2\2\2\u0d73\u0d74"+
		"\3\2\2\2\u0d74\u01bb\3\2\2\2\u0d75\u0d76\7\u01a8\2\2\u0d76\u0d77\5\u01f0"+
		"\u00f9\2\u0d77\u0d79\7\u017a\2\2\u0d78\u0d7a\5\u01b8\u00dd\2\u0d79\u0d78"+
		"\3\2\2\2\u0d7a\u0d7b\3\2\2\2\u0d7b\u0d79\3\2\2\2\u0d7b\u0d7c\3\2\2\2\u0d7c"+
		"\u01bd\3\2\2\2\u0d7d\u0d7f\7v\2\2\u0d7e\u0d80\5\u01b8\u00dd\2\u0d7f\u0d7e"+
		"\3\2\2\2\u0d80\u0d81\3\2\2\2\u0d81\u0d7f\3\2\2\2\u0d81\u0d82\3\2\2\2\u0d82"+
		"\u01bf\3\2\2\2\u0d83\u0d84\7\u00ba\2\2\u0d84\u0d90\5\u01d8\u00ed\2\u0d85"+
		"\u0d86\7\u01eb\2\2\u0d86\u0d8b\5\u02c0\u0161\2\u0d87\u0d88\7\u01f1\2\2"+
		"\u0d88\u0d8a\5\u02c0\u0161\2\u0d89\u0d87\3\2\2\2\u0d8a\u0d8d\3\2\2\2\u0d8b"+
		"\u0d89\3\2\2\2\u0d8b\u0d8c\3\2\2\2\u0d8c\u0d8e\3\2\2\2\u0d8d\u0d8b\3\2"+
		"\2\2\u0d8e\u0d8f\7\u01ec\2\2\u0d8f\u0d91\3\2\2\2\u0d90\u0d85\3\2\2\2\u0d90"+
		"\u0d91\3\2\2\2\u0d91\u01c1\3\2\2\2\u0d92\u0d93\7\u019d\2\2\u0d93\u0d94"+
		"\5\u01ee\u00f8\2\u0d94\u01c3\3\2\2\2\u0d95\u0d96\7\u00dc\2\2\u0d96\u0d97"+
		"\7\u00ba\2\2\u0d97\u0d99\5\u02c2\u0162\2\u0d98\u0d9a\5\u027c\u013f\2\u0d99"+
		"\u0d98\3\2\2\2\u0d99\u0d9a\3\2\2\2\u0d9a\u0d9b\3\2\2\2\u0d9b\u0d9c\7\u019a"+
		"\2\2\u0d9c\u0d9d\5\u01ce\u00e8\2\u0d9d\u0d9e\7\u0107\2\2\u0d9e\u0d9f\7"+
		"\u01eb\2\2\u0d9f\u0da0\5\u01f0\u00f9\2\u0da0\u0da9\7\u01ec\2\2\u0da1\u0da3"+
		"\5\u01c6\u00e4\2\u0da2\u0da4\5\u01cc\u00e7\2\u0da3\u0da2\3\2\2\2\u0da3"+
		"\u0da4\3\2\2\2\u0da4\u0daa\3\2\2\2\u0da5\u0da7\5\u01cc\u00e7\2\u0da6\u0da8"+
		"\5\u01c6\u00e4\2\u0da7\u0da6\3\2\2\2\u0da7\u0da8\3\2\2\2\u0da8\u0daa\3"+
		"\2\2\2\u0da9\u0da1\3\2\2\2\u0da9\u0da5\3\2\2\2\u0da9\u0daa\3\2\2\2\u0daa"+
		"\u0dac\3\2\2\2\u0dab\u0dad\5\u01dc\u00ef\2\u0dac\u0dab\3\2\2\2\u0dac\u0dad"+
		"\3\2\2\2\u0dad\u01c5\3\2\2\2\u0dae\u0daf\7\u01a8\2\2\u0daf\u0db0\7\u00d8"+
		"\2\2\u0db0\u0db1\7\u017a\2\2\u0db1\u0db2\7\u0195\2\2\u0db2\u0db3\7\u0158"+
		"\2\2\u0db3\u0db8\5\u01c8\u00e5\2\u0db4\u0db5\7\u01f1\2\2\u0db5\u0db7\5"+
		"\u01c8\u00e5\2\u0db6\u0db4\3\2\2\2\u0db7\u0dba\3\2\2\2\u0db8\u0db6\3\2"+
		"\2\2\u0db8\u0db9\3\2\2\2\u0db9\u0dbc\3\2\2\2\u0dba\u0db8\3\2\2\2\u0dbb"+
		"\u0dbd\5\u0280\u0141\2\u0dbc\u0dbb\3\2\2\2\u0dbc\u0dbd\3\2\2\2\u0dbd\u0dbf"+
		"\3\2\2\2\u0dbe\u0dc0\5\u01ca\u00e6\2\u0dbf\u0dbe\3\2\2\2\u0dbf\u0dc0\3"+
		"\2\2\2\u0dc0\u01c7\3\2\2\2\u0dc1\u0dc2\5\u02c0\u0161\2\u0dc2\u0dc3\7\u0202"+
		"\2\2\u0dc3\u0dc4\5\u01f4\u00fb\2\u0dc4\u01c9\3\2\2\2\u0dc5\u0dc6\7h\2"+
		"\2\u0dc6\u0dc7\5\u0280\u0141\2\u0dc7\u01cb\3\2\2\2\u0dc8\u0dc9\7\u01a8"+
		"\2\2\u0dc9\u0dca\7\u00fb\2\2\u0dca\u0dcb\7\u00d8\2\2\u0dcb\u0dcc\7\u017a"+
		"\2\2\u0dcc\u0dd8\7\u00b3\2\2\u0dcd\u0dce\7\u01eb\2\2\u0dce\u0dd3\5\u02c0"+
		"\u0161\2\u0dcf\u0dd0\7\u01f1\2\2\u0dd0\u0dd2\5\u02c0\u0161\2\u0dd1\u0dcf"+
		"\3\2\2\2\u0dd2\u0dd5\3\2\2\2\u0dd3\u0dd1\3\2\2\2\u0dd3\u0dd4\3\2\2\2\u0dd4"+
		"\u0dd6\3\2\2\2\u0dd5\u0dd3\3\2\2\2\u0dd6\u0dd7\7\u01ec\2\2\u0dd7\u0dd9"+
		"\3\2\2\2\u0dd8\u0dcd\3\2\2\2\u0dd8\u0dd9\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda"+
		"\u0ddb\7\u019d\2\2\u0ddb\u0ddd\5\u01ee\u00f8\2\u0ddc\u0dde\5\u0280\u0141"+
		"\2\u0ddd\u0ddc\3\2\2\2\u0ddd\u0dde\3\2\2\2\u0dde\u01cd\3\2\2\2\u0ddf\u0de5"+
		"\5\u02c2\u0162\2\u0de0\u0de1\7\u01eb\2\2\u0de1\u0de2\5\u0136\u009c\2\u0de2"+
		"\u0de3\7\u01ec\2\2\u0de3\u0de5\3\2\2\2\u0de4\u0ddf\3\2\2\2\u0de4\u0de0"+
		"\3\2\2\2\u0de5\u0de7\3\2\2\2\u0de6\u0de8\5\u027c\u013f\2\u0de7\u0de6\3"+
		"\2\2\2\u0de7\u0de8\3\2\2\2\u0de8\u01cf\3\2\2\2\u0de9\u0dea\7\u00cf\2\2"+
		"\u0dea\u0deb\7\u0178\2\2\u0deb\u0df0\5\u01d4\u00eb\2\u0dec\u0ded\7\u01f1"+
		"\2\2\u0ded\u0def\5\u01d4\u00eb\2\u0dee\u0dec\3\2\2\2\u0def\u0df2\3\2\2"+
		"\2\u0df0\u0dee\3\2\2\2\u0df0\u0df1\3\2\2\2\u0df1\u0df3\3\2\2\2\u0df2\u0df0"+
		"\3\2\2\2\u0df3\u0df4\7\u00a6\2\2\u0df4\u0df5\5\u01d6\u00ec\2\u0df5\u0df7"+
		"\7\u00e1\2\2\u0df6\u0df8\5\u01d2\u00ea\2\u0df7\u0df6\3\2\2\2\u0df7\u0df8"+
		"\3\2\2\2\u0df8\u01d1\3\2\2\2\u0df9\u0dfa\7\u01a5\2\2\u0dfa\u0dfd\5\u01f4"+
		"\u00fb\2\u0dfb\u0dfd\7\u00fc\2\2\u0dfc\u0df9\3\2\2\2\u0dfc\u0dfb\3\2\2"+
		"\2\u0dfd\u01d3\3\2\2\2\u0dfe\u0e00\5\u02c2\u0162\2\u0dff\u0e01\5\u0278"+
		"\u013d\2\u0e00\u0dff\3\2\2\2\u0e00\u0e01\3\2\2\2\u0e01\u01d5\3\2\2\2\u0e02"+
		"\u0e03\7\u0142\2\2\u0e03\u0e0f\7\u015b\2\2\u0e04\u0e05\7\u0142\2\2\u0e05"+
		"\u0e0f\7\u0085\2\2\u0e06\u0e08\7\u015b\2\2\u0e07\u0e09\7\u0195\2\2\u0e08"+
		"\u0e07\3\2\2\2\u0e08\u0e09\3\2\2\2\u0e09\u0e0f\3\2\2\2\u0e0a\u0e0b\7\u015b"+
		"\2\2\u0e0b\u0e0c\7\u0142\2\2\u0e0c\u0e0f\7\u0085\2\2\u0e0d\u0e0f\7\u0085"+
		"\2\2\u0e0e\u0e02\3\2\2\2\u0e0e\u0e04\3\2\2\2\u0e0e\u0e06\3\2\2\2\u0e0e"+
		"\u0e0a\3\2\2\2\u0e0e\u0e0d\3\2\2\2\u0e0f\u01d7\3\2\2\2\u0e10\u0e17\5\u01e2"+
		"\u00f2\2\u0e11\u0e12\7\u0108\2\2\u0e12\u0e13\7\u01eb\2\2\u0e13\u0e14\5"+
		"\u01e2\u00f2\2\u0e14\u0e15\7\u01ec\2\2\u0e15\u0e17\3\2\2\2\u0e16\u0e10"+
		"\3\2\2\2\u0e16\u0e11\3\2\2\2\u0e17\u0e19\3\2\2\2\u0e18\u0e1a\5\u027c\u013f"+
		"\2\u0e19\u0e18\3\2\2\2\u0e19\u0e1a\3\2\2\2\u0e1a\u01d9\3\2\2\2\u0e1b\u0e1c"+
		"\t\31\2\2\u0e1c\u0e21\5\u01f4\u00fb\2\u0e1d\u0e1e\7\u01f1\2\2\u0e1e\u0e20"+
		"\5\u01f4\u00fb\2\u0e1f\u0e1d\3\2\2\2\u0e20\u0e23\3\2\2\2\u0e21\u0e1f\3"+
		"\2\2\2\u0e21\u0e22\3\2\2\2\u0e22\u0e24\3\2\2\2\u0e23\u0e21\3\2\2\2\u0e24"+
		"\u0e25\5\u0284\u0143\2\u0e25\u01db\3\2\2\2\u0e26\u0e27\7\u00d1\2\2\u0e27"+
		"\u0e29\7~\2\2\u0e28\u0e2a\5\u01de\u00f0\2\u0e29\u0e28\3\2\2\2\u0e29\u0e2a"+
		"\3\2\2\2\u0e2a\u0e2c\3\2\2\2\u0e2b\u0e2d\5\u01f6\u00fc\2\u0e2c\u0e2b\3"+
		"\2\2\2\u0e2c\u0e2d\3\2\2\2\u0e2d\u0e2f\3\2\2\2\u0e2e\u0e30\5\u01e0\u00f1"+
		"\2\u0e2f\u0e2e\3\2\2\2\u0e2f\u0e30\3\2\2\2\u0e30\u01dd\3\2\2\2\u0e31\u0e32"+
		"\7\u00ba\2\2\u0e32\u0e33\5\u02c2\u0162\2\u0e33\u01df\3\2\2\2\u0e34\u0e35"+
		"\7\u0132\2\2\u0e35\u0e38\7\u00cd\2\2\u0e36\u0e39\7\u0192\2\2\u0e37\u0e39"+
		"\5\u01f6\u00fc\2\u0e38\u0e36\3\2\2\2\u0e38\u0e37\3\2\2\2\u0e39\u01e1\3"+
		"\2\2\2\u0e3a\u0e47\5\u01e4\u00f3\2\u0e3b\u0e3c\7\u01eb\2\2\u0e3c\u0e3e"+
		"\5\u0136\u009c\2\u0e3d\u0e3f\5\u01e6\u00f4\2\u0e3e\u0e3d\3\2\2\2\u0e3e"+
		"\u0e3f\3\2\2\2\u0e3f\u0e40\3\2\2\2\u0e40\u0e41\7\u01ec\2\2\u0e41\u0e47"+
		"\3\2\2\2\u0e42\u0e44\5\u02c2\u0162\2\u0e43\u0e45\5\u01e8\u00f5\2\u0e44"+
		"\u0e43\3\2\2\2\u0e44\u0e45\3\2\2\2\u0e45\u0e47\3\2\2\2\u0e46\u0e3a\3\2"+
		"\2\2\u0e46\u0e3b\3\2\2\2\u0e46\u0e42\3\2\2\2\u0e47\u01e3\3\2\2\2\u0e48"+
		"\u0e55\t-\2\2\u0e49\u0e4a\7\u01eb\2\2\u0e4a\u0e4b\5\u0140\u00a1\2\u0e4b"+
		"\u0e4c\7\u01ec\2\2\u0e4c\u0e56\3\2\2\2\u0e4d\u0e4e\7\u01eb\2\2\u0e4e\u0e4f"+
		"\5\u01f4\u00fb\2\u0e4f\u0e53\7\u01ec\2\2\u0e50\u0e51\7\u01eb\2\2\u0e51"+
		"\u0e52\7\u01ef\2\2\u0e52\u0e54\7\u01ec\2\2\u0e53\u0e50\3\2\2\2\u0e53\u0e54"+
		"\3\2\2\2\u0e54\u0e56\3\2\2\2\u0e55\u0e49\3\2\2\2\u0e55\u0e4d\3\2\2\2\u0e56"+
		"\u01e5\3\2\2\2\u0e57\u0e60\7\u01ac\2\2\u0e58\u0e59\7\u012c\2\2\u0e59\u0e61"+
		"\7\u0108\2\2\u0e5a\u0e5b\7\64\2\2\u0e5b\u0e5e\7\u010a\2\2\u0e5c\u0e5d"+
		"\7D\2\2\u0e5d\u0e5f\5\u02a4\u0153\2\u0e5e\u0e5c\3\2\2\2\u0e5e\u0e5f\3"+
		"\2\2\2\u0e5f\u0e61\3\2\2\2\u0e60\u0e58\3\2\2\2\u0e60\u0e5a\3\2\2\2\u0e61"+
		"\u01e7\3\2\2\2\u0e62\u0e64\7\u0146\2\2\u0e63\u0e65\7\"\2\2\u0e64\u0e63"+
		"\3\2\2\2\u0e64\u0e65\3\2\2\2\u0e65\u0e66\3\2\2\2\u0e66\u0e67\7\u01eb\2"+
		"\2\u0e67\u0e6a\5\u01f4\u00fb\2\u0e68\u0e69\7\u01f1\2\2\u0e69\u0e6b\5\u01f4"+
		"\u00fb\2\u0e6a\u0e68\3\2\2\2\u0e6a\u0e6b\3\2\2\2\u0e6b\u0e6c\3\2\2\2\u0e6c"+
		"\u0e6e\7\u01ec\2\2\u0e6d\u0e6f\5\u01ea\u00f6\2\u0e6e\u0e6d\3\2\2\2\u0e6e"+
		"\u0e6f\3\2\2\2\u0e6f\u01e9\3\2\2\2\u0e70\u0e71\7\u014e\2\2\u0e71\u0e72"+
		"\7\u01eb\2\2\u0e72\u0e73\5\u01f4\u00fb\2\u0e73\u0e74\7\u01ec\2\2\u0e74"+
		"\u01eb\3\2\2\2\u0e75\u0e76\7T\2\2\u0e76\u0e77\7\u01eb\2\2\u0e77\u0e78"+
		"\5\u0140\u00a1\2\u0e78\u0e79\7\u01ec\2\2\u0e79\u01ed\3\2\2\2\u0e7a\u0e7c"+
		"\7\u01eb\2\2\u0e7b\u0e7d\5\u01f4\u00fb\2\u0e7c\u0e7b\3\2\2\2\u0e7c\u0e7d"+
		"\3\2\2\2\u0e7d\u0e82\3\2\2\2\u0e7e\u0e7f\7\u01f1\2\2\u0e7f\u0e81\5\u01f4"+
		"\u00fb\2\u0e80\u0e7e\3\2\2\2\u0e81\u0e84\3\2\2\2\u0e82\u0e80\3\2\2\2\u0e82"+
		"\u0e83\3\2\2\2\u0e83\u0e85\3\2\2\2\u0e84\u0e82\3\2\2\2\u0e85\u0e86\7\u01ec"+
		"\2\2\u0e86\u01ef\3\2\2\2\u0e87\u0e88\5\u01f4\u00fb\2\u0e88\u01f1\3\2\2"+
		"\2\u0e89\u0e8a\5\u01f4\u00fb\2\u0e8a\u01f3\3\2\2\2\u0e8b\u0e95\5\u01ec"+
		"\u00f7\2\u0e8c\u0e91\5\u01f8\u00fd\2\u0e8d\u0e8e\7\u010b\2\2\u0e8e\u0e90"+
		"\5\u01f8\u00fd\2\u0e8f\u0e8d\3\2\2\2\u0e90\u0e93\3\2\2\2\u0e91\u0e8f\3"+
		"\2\2\2\u0e91\u0e92\3\2\2\2\u0e92\u0e95\3\2\2\2\u0e93\u0e91\3\2\2\2\u0e94"+
		"\u0e8b\3\2\2\2\u0e94\u0e8c\3\2\2\2\u0e95\u01f5\3\2\2\2\u0e96\u0e97\5\u01f4"+
		"\u00fb\2\u0e97\u01f7\3\2\2\2\u0e98\u0e9d\5\u01fa\u00fe\2\u0e99\u0e9a\7"+
		"\f\2\2\u0e9a\u0e9c\5\u01fa\u00fe\2\u0e9b\u0e99\3\2\2\2\u0e9c\u0e9f\3\2"+
		"\2\2\u0e9d\u0e9b\3\2\2\2\u0e9d\u0e9e\3\2\2\2\u0e9e\u01f9\3\2\2\2\u0e9f"+
		"\u0e9d\3\2\2\2\u0ea0\u0ea1\7\u00fb\2\2\u0ea1\u0ea4\5\u01fa\u00fe\2\u0ea2"+
		"\u0ea4\5\u01fc\u00ff\2\u0ea3\u0ea0\3\2\2\2\u0ea3\u0ea2\3\2\2\2\u0ea4\u01fb"+
		"\3\2\2\2\u0ea5\u0ec7\5\u01fe\u0100\2\u0ea6\u0ea8\7\u00bc\2\2\u0ea7\u0ea9"+
		"\7\u00fb\2\2\u0ea8\u0ea7\3\2\2\2\u0ea8\u0ea9\3\2\2\2\u0ea9\u0ec3\3\2\2"+
		"\2\u0eaa\u0ec4\7\u00fd\2\2\u0eab\u0ec4\7\u00e7\2\2\u0eac\u0ec4\7\u0126"+
		"\2\2\u0ead\u0ec4\7\u00af\2\2\u0eae\u0eaf\7\4\2\2\u0eaf\u0ec4\7\u0158\2"+
		"\2\u0eb0\u0ec4\7x\2\2\u0eb1\u0eb3\7\u0103\2\2\u0eb2\u0eb4\7\u018d\2\2"+
		"\u0eb3\u0eb2\3\2\2\2\u0eb3\u0eb4\3\2\2\2\u0eb4\u0eb5\3\2\2\2\u0eb5\u0eb7"+
		"\7\u01eb\2\2\u0eb6\u0eb8\7\u0108\2\2\u0eb7\u0eb6\3\2\2\2\u0eb7\u0eb8\3"+
		"\2\2\2\u0eb8\u0eb9\3\2\2\2\u0eb9\u0ebe\5\u02d2\u016a\2\u0eba\u0ebb\7\u01f1"+
		"\2\2\u0ebb\u0ebd\5\u02d2\u016a\2\u0ebc\u0eba\3\2\2\2\u0ebd\u0ec0\3\2\2"+
		"\2\u0ebe\u0ebc\3\2\2\2\u0ebe\u0ebf\3\2\2\2\u0ebf\u0ec1\3\2\2\2\u0ec0\u0ebe"+
		"\3\2\2\2\u0ec1\u0ec2\7\u01ec\2\2\u0ec2\u0ec4\3\2\2\2\u0ec3\u0eaa\3\2\2"+
		"\2\u0ec3\u0eab\3\2\2\2\u0ec3\u0eac\3\2\2\2\u0ec3\u0ead\3\2\2\2\u0ec3\u0eae"+
		"\3\2\2\2\u0ec3\u0eb0\3\2\2\2\u0ec3\u0eb1\3\2\2\2\u0ec4\u0ec6\3\2\2\2\u0ec5"+
		"\u0ea6\3\2\2\2\u0ec6\u0ec9\3\2\2\2\u0ec7\u0ec5\3\2\2\2\u0ec7\u0ec8\3\2"+
		"\2\2\u0ec8\u01fd\3\2\2\2\u0ec9\u0ec7\3\2\2\2\u0eca\u0ed1\5\u0202\u0102"+
		"\2\u0ecb\u0ecd\5\u0200\u0101\2\u0ecc\u0ece\7\u0103\2\2\u0ecd\u0ecc\3\2"+
		"\2\2\u0ecd\u0ece\3\2\2\2\u0ece\u0ecf\3\2\2\2\u0ecf\u0ed0\5\u020e\u0108"+
		"\2\u0ed0\u0ed2\3\2\2\2\u0ed1\u0ecb\3\2\2\2\u0ed1\u0ed2\3\2\2\2\u0ed2\u01ff"+
		"\3\2\2\2\u0ed3\u0ed4\t.\2\2\u0ed4\u0201\3\2\2\2\u0ed5\u0ee1\5\u0204\u0103"+
		"\2\u0ed6\u0edd\7\u0202\2\2\u0ed7\u0edd\5\u02ee\u0178\2\u0ed8\u0edd\7\u01f9"+
		"\2\2\u0ed9\u0edd\7\u01ff\2\2\u0eda\u0edd\5\u02f2\u017a\2\u0edb\u0edd\5"+
		"\u02f0\u0179\2\u0edc\u0ed6\3\2\2\2\u0edc\u0ed7\3\2\2\2\u0edc\u0ed8\3\2"+
		"\2\2\u0edc\u0ed9\3\2\2\2\u0edc\u0eda\3\2\2\2\u0edc\u0edb\3\2\2\2\u0edd"+
		"\u0ede\3\2\2\2\u0ede\u0ee0\5\u0204\u0103\2\u0edf\u0edc\3\2\2\2\u0ee0\u0ee3"+
		"\3\2\2\2\u0ee1\u0edf\3\2\2\2\u0ee1\u0ee2\3\2\2\2\u0ee2\u0203\3\2\2\2\u0ee3"+
		"\u0ee1\3\2\2\2\u0ee4\u0ef3\5\u020e\u0108\2\u0ee5\u0ee7\7\u00fb\2\2\u0ee6"+
		"\u0ee5\3\2\2\2\u0ee6\u0ee7\3\2\2\2\u0ee7\u0ef1\3\2\2\2\u0ee8\u0ee9\7\u00a6"+
		"\2\2\u0ee9\u0ef2\5\u020a\u0106\2\u0eea\u0eeb\7\34\2\2\u0eeb\u0ef2\5\u020c"+
		"\u0107\2\u0eec\u0eed\5\u0206\u0104\2\u0eed\u0eef\5\u020e\u0108\2\u0eee"+
		"\u0ef0\5\u0208\u0105\2\u0eef\u0eee\3\2\2\2\u0eef\u0ef0\3\2\2\2\u0ef0\u0ef2"+
		"\3\2\2\2\u0ef1\u0ee8\3\2\2\2\u0ef1\u0eea\3\2\2\2\u0ef1\u0eec\3\2\2\2\u0ef2"+
		"\u0ef4\3\2\2\2\u0ef3\u0ee6\3\2\2\2\u0ef3\u0ef4\3\2\2\2\u0ef4\u0205\3\2"+
		"\2\2\u0ef5\u0ef6\t/\2\2\u0ef6\u0207\3\2\2\2\u0ef7\u0ef8\7\177\2\2\u0ef8"+
		"\u0ef9\5\u020e\u0108\2\u0ef9\u0209\3\2\2\2\u0efa\u0efb\7\u01eb\2\2\u0efb"+
		"\u0efc\5\u0140\u00a1\2\u0efc\u0efd\7\u01ec\2\2\u0efd\u0f0d\3\2\2\2\u0efe"+
		"\u0eff\7\u01eb\2\2\u0eff\u0f04\5\u0210\u0109\2\u0f00\u0f01\7\u01f1\2\2"+
		"\u0f01\u0f03\5\u0210\u0109\2\u0f02\u0f00\3\2\2\2\u0f03\u0f06\3\2\2\2\u0f04"+
		"\u0f02\3\2\2\2\u0f04\u0f05\3\2\2\2\u0f05\u0f07\3\2\2\2\u0f06\u0f04\3\2"+
		"\2\2\u0f07\u0f08\7\u01ec\2\2\u0f08\u0f0d\3\2\2\2\u0f09\u0f0d\5\u02e2\u0172"+
		"\2\u0f0a\u0f0d\5\u02da\u016e\2\u0f0b\u0f0d\5\u02dc\u016f\2\u0f0c\u0efa"+
		"\3\2\2\2\u0f0c\u0efe\3\2\2\2\u0f0c\u0f09\3\2\2\2\u0f0c\u0f0a\3\2\2\2\u0f0c"+
		"\u0f0b\3\2\2\2\u0f0d\u020b\3\2\2\2\u0f0e\u0f0f\5\u020e\u0108\2\u0f0f\u0f10"+
		"\7\f\2\2\u0f10\u0f11\5\u020e\u0108\2\u0f11\u020d\3\2\2\2\u0f12\u0f18\5"+
		"\u0212\u010a\2\u0f13\u0f14\5\u02f4\u017b\2\u0f14\u0f15\5\u0212\u010a\2"+
		"\u0f15\u0f17\3\2\2\2\u0f16\u0f13\3\2\2\2\u0f17\u0f1a\3\2\2\2\u0f18\u0f16"+
		"\3\2\2\2\u0f18\u0f19\3\2\2\2\u0f19\u020f\3\2\2\2\u0f1a\u0f18\3\2\2\2\u0f1b"+
		"\u0f1c\5\u020e\u0108\2\u0f1c\u0211\3\2\2\2\u0f1d\u0f22\5\u0214\u010b\2"+
		"\u0f1e\u0f1f\t\60\2\2\u0f1f\u0f21\5\u0214\u010b\2\u0f20\u0f1e\3\2\2\2"+
		"\u0f21\u0f24\3\2\2\2\u0f22\u0f20\3\2\2\2\u0f22\u0f23\3\2\2\2\u0f23\u0213"+
		"\3\2\2\2\u0f24\u0f22\3\2\2\2\u0f25\u0f2a\5\u0216\u010c\2\u0f26\u0f27\t"+
		"\61\2\2\u0f27\u0f29\5\u0216\u010c\2\u0f28\u0f26\3\2\2\2\u0f29\u0f2c\3"+
		"\2\2\2\u0f2a\u0f28\3\2\2\2\u0f2a\u0f2b\3\2\2\2\u0f2b\u0215\3\2\2\2\u0f2c"+
		"\u0f2a\3\2\2\2\u0f2d\u0f36\5\u021a\u010e\2\u0f2e\u0f33\7\22\2\2\u0f2f"+
		"\u0f34\7\u00ce\2\2\u0f30\u0f31\7\u017b\2\2\u0f31\u0f32\7\u01c2\2\2\u0f32"+
		"\u0f34\5\u0210\u0109\2\u0f33\u0f2f\3\2\2\2\u0f33\u0f30\3\2\2\2\u0f34\u0f37"+
		"\3\2\2\2\u0f35\u0f37\5\u0218\u010d\2\u0f36\u0f2e\3\2\2\2\u0f36\u0f35\3"+
		"\2\2\2\u0f36\u0f37\3\2\2\2\u0f37\u0217\3\2\2\2\u0f38\u0f3d\7Z\2\2\u0f39"+
		"\u0f3a\7\u01eb\2\2\u0f3a\u0f3b\5\u0210\u0109\2\u0f3b\u0f3c\7\u01ec\2\2"+
		"\u0f3c\u0f3e\3\2\2\2\u0f3d\u0f39\3\2\2\2\u0f3d\u0f3e\3\2\2\2\u0f3e\u0f3f"+
		"\3\2\2\2\u0f3f\u0f40\7\u0184\2\2\u0f40\u0f45\7\u014d\2\2\u0f41\u0f42\7"+
		"\u01eb\2\2\u0f42\u0f43\5\u0210\u0109\2\u0f43\u0f44\7\u01ec\2\2\u0f44\u0f46"+
		"\3\2\2\2\u0f45\u0f41\3\2\2\2\u0f45\u0f46\3\2\2\2\u0f46\u0f51\3\2\2\2\u0f47"+
		"\u0f4c\7\u01bf\2\2\u0f48\u0f49\7\u01eb\2\2\u0f49\u0f4a\5\u0210\u0109\2"+
		"\u0f4a\u0f4b\7\u01ec\2\2\u0f4b\u0f4d\3\2\2\2\u0f4c\u0f48\3\2\2\2\u0f4c"+
		"\u0f4d\3\2\2\2\u0f4d\u0f4e\3\2\2\2\u0f4e\u0f4f\7\u0184\2\2\u0f4f\u0f51"+
		"\7\u00e4\2\2\u0f50\u0f38\3\2\2\2\u0f50\u0f47\3\2\2\2\u0f51\u0219\3\2\2"+
		"\2\u0f52\u0f57\5\u0226\u0114\2\u0f53\u0f54\7\u0203\2\2\u0f54\u0f55\5\u021c"+
		"\u010f\2\u0f55\u0f56\7\u0204\2\2\u0f56\u0f58\3\2\2\2\u0f57\u0f53\3\2\2"+
		"\2\u0f57\u0f58\3\2\2\2\u0f58\u021b\3\2\2\2\u0f59\u0f5c\7\r\2\2\u0f5a\u0f5c"+
		"\5\u01f2\u00fa\2\u0f5b\u0f59\3\2\2\2\u0f5b\u0f5a\3\2\2\2\u0f5c\u0f64\3"+
		"\2\2\2\u0f5d\u0f60\7\u01f1\2\2\u0f5e\u0f61\7\r\2\2\u0f5f\u0f61\5\u01f2"+
		"\u00fa\2\u0f60\u0f5e\3\2\2\2\u0f60\u0f5f\3\2\2\2\u0f61\u0f63\3\2\2\2\u0f62"+
		"\u0f5d\3\2\2\2\u0f63\u0f66\3\2\2\2\u0f64\u0f62\3\2\2\2\u0f64\u0f65\3\2"+
		"\2\2\u0f65\u0f71\3\2\2\2\u0f66\u0f64\3\2\2\2\u0f67\u0f6c\5\u021e\u0110"+
		"\2\u0f68\u0f69\7\u01f1\2\2\u0f69\u0f6b\5\u021e\u0110\2\u0f6a\u0f68\3\2"+
		"\2\2\u0f6b\u0f6e\3\2\2\2\u0f6c\u0f6a\3\2\2\2\u0f6c\u0f6d\3\2\2\2\u0f6d"+
		"\u0f71\3\2\2\2\u0f6e\u0f6c\3\2\2\2\u0f6f\u0f71\5\u0224\u0113\2\u0f70\u0f5b"+
		"\3\2\2\2\u0f70\u0f67\3\2\2\2\u0f70\u0f6f\3\2\2\2\u0f71\u021d\3\2\2\2\u0f72"+
		"\u0f73\7\u0095\2\2\u0f73\u0f80\5\u02c0\u0161\2\u0f74\u0f75\7\u00a6\2\2"+
		"\u0f75\u0f81\5\u01ee\u00f8\2\u0f76\u0f78\5\u0220\u0111\2\u0f77\u0f76\3"+
		"\2\2\2\u0f77\u0f78\3\2\2\2\u0f78\u0f79\3\2\2\2\u0f79\u0f7a\7\u0098\2\2"+
		"\u0f7a\u0f7b\5\u01f4\u00fb\2\u0f7b\u0f7c\7\u0184\2\2\u0f7c\u0f7d\5\u01f4"+
		"\u00fb\2\u0f7d\u0f7e\5\u0222\u0112\2\u0f7e\u0f7f\5\u01f4\u00fb\2\u0f7f"+
		"\u0f81\3\2\2\2\u0f80\u0f74\3\2\2\2\u0f80\u0f77\3\2\2\2\u0f81\u021f\3\2"+
		"\2\2\u0f82\u0f83\7\u00c9\2\2\u0f83\u0f84\5\u01f4\u00fb\2\u0f84\u0221\3"+
		"\2\2\2\u0f85\u0f86\t\62\2\2\u0f86\u0223\3\2\2\2\u0f87\u0f88\7\u0095\2"+
		"\2\u0f88\u0f89\7\u01eb\2\2\u0f89\u0f8e\5\u02c0\u0161\2\u0f8a\u0f8b\7\u01f1"+
		"\2\2\u0f8b\u0f8d\5\u02c0\u0161\2\u0f8c\u0f8a\3\2\2\2\u0f8d\u0f90\3\2\2"+
		"\2\u0f8e\u0f8c\3\2\2\2\u0f8e\u0f8f\3\2\2\2\u0f8f\u0f91\3\2\2\2\u0f90\u0f8e"+
		"\3\2\2\2\u0f91\u0f92\7\u01ec\2\2\u0f92\u0f93\7\u00a6\2\2\u0f93\u0fa0\7"+
		"\u01eb\2\2\u0f94\u0fa1\5\u0140\u00a1\2\u0f95\u0f96\7\u01eb\2\2\u0f96\u0f9b"+
		"\5\u01ee\u00f8\2\u0f97\u0f98\7\u01f1\2\2\u0f98\u0f9a\5\u01ee\u00f8\2\u0f99"+
		"\u0f97\3\2\2\2\u0f9a\u0f9d\3\2\2\2\u0f9b\u0f99\3\2\2\2\u0f9b\u0f9c\3\2"+
		"\2\2\u0f9c\u0f9e\3\2\2\2\u0f9d\u0f9b\3\2\2\2\u0f9e\u0f9f\7\u01ec\2\2\u0f9f"+
		"\u0fa1\3\2\2\2\u0fa0\u0f94\3\2\2\2\u0fa0\u0f95\3\2\2\2\u0fa1\u0fa2\3\2"+
		"\2\2\u0fa2\u0fa3\7\u01ec\2\2\u0fa3\u0225\3\2\2\2\u0fa4\u0fa5\7\u01f0\2"+
		"\2\u0fa5\u0fb7\5\u0226\u0114\2\u0fa6\u0fa7\7\u01ef\2\2\u0fa7\u0fb7\5\u0226"+
		"\u0114\2\u0fa8\u0fa9\7\u0127\2\2\u0fa9\u0fb7\5\u0226\u0114\2\u0faa\u0fab"+
		"\7B\2\2\u0fab\u0fb7\5\u0226\u0114\2\u0fac\u0fad\7\u00ef\2\2\u0fad\u0fb7"+
		"\5\u0226\u0114\2\u0fae\u0faf\7o\2\2\u0faf\u0fb7\5\u0226\u0114\2\u0fb0"+
		"\u0fb1\7\t\2\2\u0fb1\u0fb7\5\u0226\u0114\2\u0fb2\u0fb7\5\u0228\u0115\2"+
		"\u0fb3\u0fb7\5\u023a\u011e\2\u0fb4\u0fb7\5\u023c\u011f\2\u0fb5\u0fb7\5"+
		"\u0234\u011b\2\u0fb6\u0fa4\3\2\2\2\u0fb6\u0fa6\3\2\2\2\u0fb6\u0fa8\3\2"+
		"\2\2\u0fb6\u0faa\3\2\2\2\u0fb6\u0fac\3\2\2\2\u0fb6\u0fae\3\2\2\2\u0fb6"+
		"\u0fb0\3\2\2\2\u0fb6\u0fb2\3\2\2\2\u0fb6\u0fb3\3\2\2\2\u0fb6\u0fb4\3\2"+
		"\2\2\u0fb6\u0fb5\3\2\2\2\u0fb7\u0227\3\2\2\2\u0fb8\u0fbb\5\u022e\u0118"+
		"\2\u0fb9\u0fbb\5\u022a\u0116\2\u0fba\u0fb8\3\2\2\2\u0fba\u0fb9\3\2\2\2"+
		"\u0fbb\u0229\3\2\2\2\u0fbc\u0fbe\5\u02a6\u0154\2\u0fbd\u0fbc\3\2\2\2\u0fbd"+
		"\u0fbe\3\2\2\2\u0fbe\u0fbf\3\2\2\2\u0fbf\u0fc0\7/\2\2\u0fc0\u0fc2\5\u0234"+
		"\u011b\2\u0fc1\u0fc3\5\u022c\u0117\2\u0fc2\u0fc1\3\2\2\2\u0fc3\u0fc4\3"+
		"\2\2\2\u0fc4\u0fc2\3\2\2\2\u0fc4\u0fc5\3\2\2\2\u0fc5\u0fc7\3\2\2\2\u0fc6"+
		"\u0fc8\5\u0232\u011a\2\u0fc7\u0fc6\3\2\2\2\u0fc7\u0fc8\3\2\2\2\u0fc8\u0fc9"+
		"\3\2\2\2\u0fc9\u0fcb\7{\2\2\u0fca\u0fcc\7/\2\2\u0fcb\u0fca\3\2\2\2\u0fcb"+
		"\u0fcc\3\2\2\2\u0fcc\u0fce\3\2\2\2\u0fcd\u0fcf\5\u02a6\u0154\2\u0fce\u0fcd"+
		"\3\2\2\2\u0fce\u0fcf\3\2\2\2\u0fcf\u022b\3\2\2\2\u0fd0\u0fd1\7\u01a8\2"+
		"\2\u0fd1\u0fd2\5\u01f6\u00fc\2\u0fd2\u0fd5\7\u017a\2\2\u0fd3\u0fd6\5\u00e0"+
		"q\2\u0fd4\u0fd6\5\u01f6\u00fc\2\u0fd5\u0fd3\3\2\2\2\u0fd5\u0fd4\3\2\2"+
		"\2\u0fd6\u022d\3\2\2\2\u0fd7\u0fd9\5\u02a6\u0154\2\u0fd8\u0fd7\3\2\2\2"+
		"\u0fd8\u0fd9\3\2\2\2\u0fd9\u0fda\3\2\2\2\u0fda\u0fdc\7/\2\2\u0fdb\u0fdd"+
		"\5\u0230\u0119\2\u0fdc\u0fdb\3\2\2\2\u0fdd\u0fde\3\2\2\2\u0fde\u0fdc\3"+
		"\2\2\2\u0fde\u0fdf\3\2\2\2\u0fdf\u0fe1\3\2\2\2\u0fe0\u0fe2\5\u0232\u011a"+
		"\2\u0fe1\u0fe0\3\2\2\2\u0fe1\u0fe2\3\2\2\2\u0fe2\u0fe3\3\2\2\2\u0fe3\u0fe5"+
		"\7{\2\2\u0fe4\u0fe6\7/\2\2\u0fe5\u0fe4\3\2\2\2\u0fe5\u0fe6\3\2\2\2\u0fe6"+
		"\u0fe8\3\2\2\2\u0fe7\u0fe9\5\u02a6\u0154\2\u0fe8\u0fe7\3\2\2\2\u0fe8\u0fe9"+
		"\3\2\2\2\u0fe9\u022f\3\2\2\2\u0fea\u0feb\7\u01a8\2\2\u0feb\u0fec\5\u01f2"+
		"\u00fa\2\u0fec\u0fef\7\u017a\2\2\u0fed\u0ff0\5\u00e0q\2\u0fee\u0ff0\5"+
		"\u01f6\u00fc\2\u0fef\u0fed\3\2\2\2\u0fef\u0fee\3\2\2\2\u0ff0\u0231\3\2"+
		"\2\2\u0ff1\u0ff4\7v\2\2\u0ff2\u0ff5\5\u00e0q\2\u0ff3\u0ff5\5\u01f6\u00fc"+
		"\2\u0ff4\u0ff2\3\2\2\2\u0ff4\u0ff3\3\2\2\2\u0ff5\u0233\3\2\2\2\u0ff6\u0ff7"+
		"\5\u02e0\u0171\2\u0ff7\u0ff8\5\u02f6\u017c\2\u0ff8\u100b\3\2\2\2\u0ff9"+
		"\u100b\5\u02da\u016e\2\u0ffa\u100b\5\u02e2\u0172\2\u0ffb\u100b\5\u02dc"+
		"\u016f\2\u0ffc\u1008\7\u01eb\2\2\u0ffd\u0ffe\5\u0140\u00a1\2\u0ffe\u1002"+
		"\7\u01ec\2\2\u0fff\u1001\5\u0142\u00a2\2\u1000\u0fff\3\2\2\2\u1001\u1004"+
		"\3\2\2\2\u1002\u1000\3\2\2\2\u1002\u1003\3\2\2\2\u1003\u1009\3\2\2\2\u1004"+
		"\u1002\3\2\2\2\u1005\u1006\5\u0236\u011c\2\u1006\u1007\7\u01ec\2\2\u1007"+
		"\u1009\3\2\2\2\u1008\u0ffd\3\2\2\2\u1008\u1005\3\2\2\2\u1009\u100b\3\2"+
		"\2\2\u100a\u0ff6\3\2\2\2\u100a\u0ff9\3\2\2\2\u100a\u0ffa\3\2\2\2\u100a"+
		"\u0ffb\3\2\2\2\u100a\u0ffc\3\2\2\2\u100b\u0235\3\2\2\2\u100c\u100e\5\u01f4"+
		"\u00fb\2\u100d\u100f\5\u0238\u011d\2\u100e\u100d\3\2\2\2\u100e\u100f\3"+
		"\2\2\2\u100f\u0237\3\2\2\2\u1010\u1011\7\u01f1\2\2\u1011\u1016\5\u01f4"+
		"\u00fb\2\u1012\u1013\7\u01f1\2\2\u1013\u1015\5\u01f4\u00fb\2\u1014\u1012"+
		"\3\2\2\2\u1015\u1018\3\2\2\2\u1016\u1014\3\2\2\2\u1016\u1017\3\2\2\2\u1017"+
		"\u0239\3\2\2\2\u1018\u1016\3\2\2\2\u1019\u1022\t\63\2\2\u101a\u101b\7"+
		"\u01eb\2\2\u101b\u101c\5\u0140\u00a1\2\u101c\u101d\7\u01ec\2\2\u101d\u1023"+
		"\3\2\2\2\u101e\u101f\7\u01eb\2\2\u101f\u1020\5\u01f6\u00fc\2\u1020\u1021"+
		"\7\u01ec\2\2\u1021\u1023\3\2\2\2\u1022\u101a\3\2\2\2\u1022\u101e\3\2\2"+
		"\2\u1023\u023b\3\2\2\2\u1024\u1025\5\u023e\u0120\2\u1025\u1027\5\u02ca"+
		"\u0166\2\u1026\u1028\5\u0244\u0123\2\u1027\u1026\3\2\2\2\u1027\u1028\3"+
		"\2\2\2\u1028\u115f\3\2\2\2\u1029\u102a\5\u02f8\u017d\2\u102a\u102c\5\u02cc"+
		"\u0167\2\u102b\u102d\5\u024c\u0127\2\u102c\u102b\3\2\2\2\u102c\u102d\3"+
		"\2\2\2\u102d\u115f\3\2\2\2\u102e\u102f\7N\2\2\u102f\u1035\7\u01eb\2\2"+
		"\u1030\u1036\7\u01ee\2\2\u1031\u1033\t \2\2\u1032\u1031\3\2\2\2\u1032"+
		"\u1033\3\2\2\2\u1033\u1034\3\2\2\2\u1034\u1036\5\u0210\u0109\2\u1035\u1030"+
		"\3\2\2\2\u1035\u1032\3\2\2\2\u1036\u1037\3\2\2\2\u1037\u1039\7\u01ec\2"+
		"\2\u1038\u103a\5\u0244\u0123\2\u1039\u1038\3\2\2\2\u1039\u103a\3\2\2\2"+
		"\u103a\u115f\3\2\2\2\u103b\u103c\t\64\2\2\u103c\u1043\7\u01eb\2\2\u103d"+
		"\u103e\7\u00e5\2\2\u103e\u103f\7\u01eb\2\2\u103f\u1040\5\u0140\u00a1\2"+
		"\u1040\u1041\7\u01ec\2\2\u1041\u1044\3\2\2\2\u1042\u1044\5\u0210\u0109"+
		"\2\u1043\u103d\3\2\2\2\u1043\u1042\3\2\2\2\u1044\u1045\3\2\2\2\u1045\u1046"+
		"\7\17\2\2\u1046\u1047\5\u02d2\u016a\2\u1047\u1048\7\u01ec\2\2\u1048\u115f"+
		"\3\2\2\2\u1049\u104a\7\65\2\2\u104a\u104b\7\u01eb\2\2\u104b\u104c\5\u0210"+
		"\u0109\2\u104c\u104d\7\u019a\2\2\u104d\u104e\7\u00ec\2\2\u104e\u104f\7"+
		"\u01ec\2\2\u104f\u115f\3\2\2\2\u1050\u1051\79\2\2\u1051\u1053\7\u01eb"+
		"\2\2\u1052\u1054\t\65\2\2\u1053\u1052\3\2\2\2\u1053\u1054\3\2\2\2\u1054"+
		"\u1055\3\2\2\2\u1055\u1057\5\u0210\u0109\2\u1056\u1058\5\u0250\u0129\2"+
		"\u1057\u1056\3\2\2\2\u1057\u1058\3\2\2\2\u1058\u1059\3\2\2\2\u1059\u105a"+
		"\7\u01ec\2\2\u105a\u115f\3\2\2\2\u105b\u105c\5\u0240\u0121\2\u105c\u105e"+
		"\5\u02c8\u0165\2\u105d\u105f\5\u0252\u012a\2\u105e\u105d\3\2\2\2\u105f"+
		"\u1060\3\2\2\2\u1060\u105e\3\2\2\2\u1060\u1061\3\2\2\2\u1061\u115f\3\2"+
		"\2\2\u1062\u1063\7b\2\2\u1063\u1064\7\u01eb\2\2\u1064\u1066\5\u0210\u0109"+
		"\2\u1065\u1067\t\66\2\2\u1066\u1065\3\2\2\2\u1066\u1067\3\2\2\2\u1067"+
		"\u1068\3\2\2\2\u1068\u1069\7\u01ec\2\2\u1069\u115f\3\2\2\2\u106a\u106b"+
		"\7\u008b\2\2\u106b\u106c\7\u01eb\2\2\u106c\u106d\5\u02f8\u017d\2\u106d"+
		"\u106e\7\u0098\2\2\u106e\u106f\5\u0210\u0109\2\u106f\u1070\7\u01ec\2\2"+
		"\u1070\u115f\3\2\2\2\u1071\u1072\t\67\2\2\u1072\u1074\5\u02ca\u0166\2"+
		"\u1073\u1075\5\u02ce\u0168\2\u1074\u1073\3\2\2\2\u1074\u1075\3\2\2\2\u1075"+
		"\u1076\3\2\2\2\u1076\u1077\5\u0244\u0123\2\u1077\u115f\3\2\2\2\u1078\u1079"+
		"\5\u0242\u0122\2\u1079\u107a\7\u01eb\2\2\u107a\u107f\5\u01f6\u00fc\2\u107b"+
		"\u107c\7\u01f1\2\2\u107c\u107e\5\u01f6\u00fc\2\u107d\u107b\3\2\2\2\u107e"+
		"\u1081\3\2\2\2\u107f\u107d\3\2\2\2\u107f\u1080\3\2\2\2\u1080\u1083\3\2"+
		"\2\2\u1081\u107f\3\2\2\2\u1082\u1084\5\u0254\u012b\2\u1083\u1082\3\2\2"+
		"\2\u1083\u1084\3\2\2\2\u1084\u1086\3\2\2\2\u1085\u1087\5\u024c\u0127\2"+
		"\u1086\u1085\3\2\2\2\u1086\u1087\3\2\2\2\u1087\u1088\3\2\2\2\u1088\u1089"+
		"\7\u01ec\2\2\u1089\u115f\3\2\2\2\u108a\u108b\7\u0187\2\2\u108b\u108c\7"+
		"\u01eb\2\2\u108c\u108f\5\u01f6\u00fc\2\u108d\u108e\7\u019a\2\2\u108e\u1090"+
		"\t8\2\2\u108f\u108d\3\2\2\2\u108f\u1090\3\2\2\2\u1090\u1095\3\2\2\2\u1091"+
		"\u1092\7\u01f1\2\2\u1092\u1094\5\u01f6\u00fc\2\u1093\u1091\3\2\2\2\u1094"+
		"\u1097\3\2\2\2\u1095\u1093\3\2\2\2\u1095\u1096\3\2\2\2\u1096\u1098\3\2"+
		"\2\2\u1097\u1095\3\2\2\2\u1098\u1099\7\u01ec\2\2\u1099\u115f\3\2\2\2\u109a"+
		"\u109b\7\u0188\2\2\u109b\u109c\7\u01eb\2\2\u109c\u109d\5\u01f6\u00fc\2"+
		"\u109d\u109f\7\17\2\2\u109e\u10a0\7\u012f\2\2\u109f\u109e\3\2\2\2\u109f"+
		"\u10a0\3\2\2\2\u10a0\u10a1\3\2\2\2\u10a1\u10a2\5\u02d2\u016a\2\u10a2\u10a3"+
		"\7\u01ec\2\2\u10a3\u115f\3\2\2\2\u10a4\u10a5\7\u018a\2\2\u10a5\u10ad\7"+
		"\u01eb\2\2\u10a6\u10a8\t9\2\2\u10a7\u10a6\3\2\2\2\u10a7\u10a8\3\2\2\2"+
		"\u10a8\u10aa\3\2\2\2\u10a9\u10ab\5\u02e8\u0175\2\u10aa\u10a9\3\2\2\2\u10aa"+
		"\u10ab\3\2\2\2\u10ab\u10ac\3\2\2\2\u10ac\u10ae\7\u0098\2\2\u10ad\u10a7"+
		"\3\2\2\2\u10ad\u10ae\3\2\2\2\u10ae\u10af\3\2\2\2\u10af\u10b0\5\u0210\u0109"+
		"\2\u10b0\u10b1\7\u01ec\2\2\u10b1\u115f\3\2\2\2\u10b2\u10b3\7\u01b1\2\2"+
		"\u10b3\u10b4\7\u01eb\2\2\u10b4\u10b6\5\u01f6\u00fc\2\u10b5\u10b7\5\u01a0"+
		"\u00d1\2\u10b6\u10b5\3\2\2\2\u10b6\u10b7\3\2\2\2\u10b7\u10b8\3\2\2\2\u10b8"+
		"\u10bb\7\u01ec\2\2\u10b9\u10ba\7\u01e4\2\2\u10ba\u10bc\5\u02de\u0170\2"+
		"\u10bb\u10b9\3\2\2\2\u10bb\u10bc\3\2\2\2\u10bc\u115f\3\2\2\2\u10bd\u10be"+
		"\t:\2\2\u10be\u10bf\7\u01eb\2\2\u10bf\u10c4\5\u0260\u0131\2\u10c0\u10c1"+
		"\7\u01f1\2\2\u10c1\u10c3\5\u0260\u0131\2\u10c2\u10c0\3\2\2\2\u10c3\u10c6"+
		"\3\2\2\2\u10c4\u10c2\3\2\2\2\u10c4\u10c5\3\2\2\2\u10c5\u10c7\3\2\2\2\u10c6"+
		"\u10c4\3\2\2\2\u10c7\u10ca\7\u01ec\2\2\u10c8\u10c9\7\u01e4\2\2\u10c9\u10cb"+
		"\5\u02de\u0170\2\u10ca\u10c8\3\2\2\2\u10ca\u10cb\3\2\2\2\u10cb\u115f\3"+
		"\2\2\2\u10cc\u10cd\7\u01b5\2\2\u10cd\u10cf\7\u01eb\2\2\u10ce\u10d0\t;"+
		"\2\2\u10cf\u10ce\3\2\2\2\u10cf\u10d0\3\2\2\2\u10d0\u10d2\3\2\2\2\u10d1"+
		"\u10d3\t<\2\2\u10d2\u10d1\3\2\2\2\u10d2\u10d3\3\2\2\2\u10d3\u10d4\3\2"+
		"\2\2\u10d4\u10d7\5\u01f6\u00fc\2\u10d5\u10d6\7\u01f1\2\2\u10d6\u10d8\5"+
		"\u0258\u012d\2\u10d7\u10d5\3\2\2\2\u10d7\u10d8\3\2\2\2\u10d8\u10e0\3\2"+
		"\2\2\u10d9\u10da\7\u01f1\2\2\u10da\u10dc\5\u01f6\u00fc\2\u10db\u10dd\5"+
		"\u027a\u013e\2\u10dc\u10db\3\2\2\2\u10dc\u10dd\3\2\2\2\u10dd\u10df\3\2"+
		"\2\2\u10de\u10d9\3\2\2\2\u10df\u10e2\3\2\2\2\u10e0\u10de\3\2\2\2\u10e0"+
		"\u10e1\3\2\2\2\u10e1\u10e3\3\2\2\2\u10e2\u10e0\3\2\2\2\u10e3\u10e6\7\u01ec"+
		"\2\2\u10e4\u10e5\7\u01e4\2\2\u10e5\u10e7\5\u02de\u0170\2\u10e6\u10e4\3"+
		"\2\2\2\u10e6\u10e7\3\2\2\2\u10e7\u115f\3\2\2\2\u10e8\u10e9\7\u01b6\2\2"+
		"\u10e9\u10ea\7\u01eb\2\2\u10ea\u10ec\5\u01f6\u00fc\2\u10eb\u10ed\5\u0256"+
		"\u012c\2\u10ec\u10eb\3\2\2\2\u10ec\u10ed\3\2\2\2\u10ed\u10ee\3\2\2\2\u10ee"+
		"\u10ef\7\u01ec\2\2\u10ef\u115f\3\2\2\2\u10f0\u10f1\7\u01b9\2\2\u10f1\u10f2"+
		"\7\u01eb\2\2\u10f2\u10f3\t=\2\2\u10f3\u10f5\5\u0210\u0109\2\u10f4\u10f6"+
		"\7\u01a7\2\2\u10f5\u10f4\3\2\2\2\u10f5\u10f6\3\2\2\2\u10f6\u10f7\3\2\2"+
		"\2\u10f7\u10fa\7\u01ec\2\2\u10f8\u10f9\7\u01e4\2\2\u10f9\u10fb\5\u02de"+
		"\u0170\2\u10fa\u10f8\3\2\2\2\u10fa\u10fb\3\2\2\2\u10fb\u115f\3\2\2\2\u10fc"+
		"\u10fd\7\u01ba\2\2\u10fd\u1102\7\u01eb\2\2\u10fe\u10ff\7\u00e6\2\2\u10ff"+
		"\u1103\5\u02ea\u0176\2\u1100\u1101\7\u0080\2\2\u1101\u1103\5\u0210\u0109"+
		"\2\u1102\u10fe\3\2\2\2\u1102\u1100\3\2\2\2\u1103\u1106\3\2\2\2\u1104\u1105"+
		"\7\u01f1\2\2\u1105\u1107\5\u0210\u0109\2\u1106\u1104\3\2\2\2\u1106\u1107"+
		"\3\2\2\2\u1107\u1108\3\2\2\2\u1108\u110b\7\u01ec\2\2\u1109\u110a\7\u01e4"+
		"\2\2\u110a\u110c\5\u02de\u0170\2\u110b\u1109\3\2\2\2\u110b\u110c\3\2\2"+
		"\2\u110c\u115f\3\2\2\2\u110d\u110e\7\u01bb\2\2\u110e\u110f\7\u01eb\2\2"+
		"\u110f\u1111\5\u0210\u0109\2\u1110\u1112\5\u0256\u012c\2\u1111\u1110\3"+
		"\2\2\2\u1111\u1112\3\2\2\2\u1112\u1113\3\2\2\2\u1113\u1114\7\u013b\2\2"+
		"\u1114\u1118\7G\2\2\u1115\u1116\7\u00fd\2\2\u1116\u1117\7\u0107\2\2\u1117"+
		"\u1119\7x\2\2\u1118\u1115\3\2\2\2\u1118\u1119\3\2\2\2\u1119\u111a\3\2"+
		"\2\2\u111a\u111d\7\u01ec\2\2\u111b\u111c\7\u01e4\2\2\u111c\u111e\5\u02de"+
		"\u0170\2\u111d\u111b\3\2\2\2\u111d\u111e\3\2\2\2\u111e\u115f\3\2\2\2\u111f"+
		"\u1120\7\u01bc\2\2\u1120\u1121\7\u01eb\2\2\u1121\u1124\5\u0210\u0109\2"+
		"\u1122\u1123\7\u01f1\2\2\u1123\u1125\5\u0262\u0132\2\u1124\u1122\3\2\2"+
		"\2\u1124\u1125\3\2\2\2\u1125\u1128\3\2\2\2\u1126\u1127\7\u01f1\2\2\u1127"+
		"\u1129\5\u0264\u0133\2\u1128\u1126\3\2\2\2\u1128\u1129\3\2\2\2\u1129\u112a"+
		"\3\2\2\2\u112a\u112d\7\u01ec\2\2\u112b\u112c\7\u01e4\2\2\u112c\u112e\5"+
		"\u02de\u0170\2\u112d\u112b\3\2\2\2\u112d\u112e\3\2\2\2\u112e\u115f\3\2"+
		"\2\2\u112f\u1130\7\u01bd\2\2\u1130\u1131\7\u01eb\2\2\u1131\u1132\t=\2"+
		"\2\u1132\u1135\5\u0210\u0109\2\u1133\u1134\7\17\2\2\u1134\u1136\5\u02d2"+
		"\u016a\2\u1135\u1133\3\2\2\2\u1135\u1136\3\2\2\2\u1136\u1138\3\2\2\2\u1137"+
		"\u1139\5\u0266\u0134\2\u1138\u1137\3\2\2\2\u1138\u1139\3\2\2\2\u1139\u113b"+
		"\3\2\2\2\u113a\u113c\5\u0268\u0135\2\u113b\u113a\3\2\2\2\u113b\u113c\3"+
		"\2\2\2\u113c\u113e\3\2\2\2\u113d\u113f\5\u026a\u0136\2\u113e\u113d\3\2"+
		"\2\2\u113e\u113f\3\2\2\2\u113f\u1142\3\2\2\2\u1140\u1141\t>\2\2\u1141"+
		"\u1143\7e\2\2\u1142\u1140\3\2\2\2\u1142\u1143\3\2\2\2\u1143\u1144\3\2"+
		"\2\2\u1144\u1147\7\u01ec\2\2\u1145\u1146\7\u01e4\2\2\u1146\u1148\5\u02de"+
		"\u0170\2\u1147\u1145\3\2\2\2\u1147\u1148\3\2\2\2\u1148\u115f\3\2\2\2\u1149"+
		"\u114a\7\u01be\2\2\u114a\u114c\7\u01eb\2\2\u114b\u114d\5\u025a\u012e\2"+
		"\u114c\u114b\3\2\2\2\u114c\u114d\3\2\2\2\u114d\u114e\3\2\2\2\u114e\u1150"+
		"\5\u0210\u0109\2\u114f\u1151\5\u0256\u012c\2\u1150\u114f\3\2\2\2\u1150"+
		"\u1151\3\2\2\2\u1151\u1157\3\2\2\2\u1152\u1153\7:\2\2\u1153\u1154\5\u025c"+
		"\u012f\2\u1154\u1155\7\u01f1\2\2\u1155\u1156\5\u025c\u012f\2\u1156\u1158"+
		"\3\2\2\2\u1157\u1152\3\2\2\2\u1157\u1158\3\2\2\2\u1158\u1159\3\2\2\2\u1159"+
		"\u115c\7\u01ec\2\2\u115a\u115b\7\u01e4\2\2\u115b\u115d\5\u02de\u0170\2"+
		"\u115c\u115a\3\2\2\2\u115c\u115d\3\2\2\2\u115d\u115f\3\2\2\2\u115e\u1024"+
		"\3\2\2\2\u115e\u1029\3\2\2\2\u115e\u102e\3\2\2\2\u115e\u103b\3\2\2\2\u115e"+
		"\u1049\3\2\2\2\u115e\u1050\3\2\2\2\u115e\u105b\3\2\2\2\u115e\u1062\3\2"+
		"\2\2\u115e\u106a\3\2\2\2\u115e\u1071\3\2\2\2\u115e\u1078\3\2\2\2\u115e"+
		"\u108a\3\2\2\2\u115e\u109a\3\2\2\2\u115e\u10a4\3\2\2\2\u115e\u10b2\3\2"+
		"\2\2\u115e\u10bd\3\2\2\2\u115e\u10cc\3\2\2\2\u115e\u10e8\3\2\2\2\u115e"+
		"\u10f0\3\2\2\2\u115e\u10fc\3\2\2\2\u115e\u110d\3\2\2\2\u115e\u111f\3\2"+
		"\2\2\u115e\u112f\3\2\2\2\u115e\u1149\3\2\2\2\u115f\u023d\3\2\2\2\u1160"+
		"\u1161\t?\2\2\u1161\u023f\3\2\2\2\u1162\u1163\t@\2\2\u1163\u0241\3\2\2"+
		"\2\u1164\u1165\tA\2\2\u1165\u0243\3\2\2\2\u1166\u1167\7\u0112\2\2\u1167"+
		"\u1169\7\u01eb\2\2\u1168\u116a\5\u015c\u00af\2\u1169\u1168\3\2\2\2\u1169"+
		"\u116a\3\2\2\2\u116a\u116f\3\2\2\2\u116b\u116d\5\u01a0\u00d1\2\u116c\u116e"+
		"\5\u0246\u0124\2\u116d\u116c\3\2\2\2\u116d\u116e\3\2\2\2\u116e\u1170\3"+
		"\2\2\2\u116f\u116b\3\2\2\2\u116f\u1170\3\2\2\2\u1170\u1171\3\2\2\2\u1171"+
		"\u1172\7\u01ec\2\2\u1172\u0245\3\2\2\2\u1173\u117a\5\u0248\u0125\2\u1174"+
		"\u1175\7\34\2\2\u1175\u1176\5\u024a\u0126\2\u1176\u1177\7\f\2\2\u1177"+
		"\u1178\5\u024a\u0126\2\u1178\u117b\3\2\2\2\u1179\u117b\5\u024a\u0126\2"+
		"\u117a\u1174\3\2\2\2\u117a\u1179\3\2\2\2\u117b\u0247\3\2\2\2\u117c\u117d"+
		"\tB\2\2\u117d\u0249\3\2\2\2\u117e\u117f\7\u018e\2\2\u117f\u1186\7\u0124"+
		"\2\2\u1180\u1181\7R\2\2\u1181\u1186\7\u0142\2\2\u1182\u1183\5\u0210\u0109"+
		"\2\u1183\u1184\tC\2\2\u1184\u1186\3\2\2\2\u1185\u117e\3\2\2\2\u1185\u1180"+
		"\3\2\2\2\u1185\u1182\3\2\2\2\u1186\u024b\3\2\2\2\u1187\u1191\7\u019a\2"+
		"\2\u1188\u1192\7\u01ee\2\2\u1189\u118e\5\u024e\u0128\2\u118a\u118b\7\u01f1"+
		"\2\2\u118b\u118d\5\u024e\u0128\2\u118c\u118a\3\2\2\2\u118d\u1190\3\2\2"+
		"\2\u118e\u118c\3\2\2\2\u118e\u118f\3\2\2\2\u118f\u1192\3\2\2\2\u1190\u118e"+
		"\3\2\2\2\u1191\u1188\3\2\2\2\u1191\u1189\3\2\2\2\u1192\u024d\3\2\2\2\u1193"+
		"\u1195\7\u00a6\2\2\u1194\u1196\7\u0110\2\2\u1195\u1194\3\2\2\2\u1195\u1196"+
		"\3\2\2\2\u1196\u1199\3\2\2\2\u1197\u1199\7\u0110\2\2\u1198\u1193\3\2\2"+
		"\2\u1198\u1197\3\2\2\2\u1198\u1199\3\2\2\2\u1199\u119a\3\2\2\2\u119a\u119c"+
		"\5\u014c\u00a7\2\u119b\u119d\5\u027a\u013e\2\u119c\u119b\3\2\2\2\u119c"+
		"\u119d\3\2\2\2\u119d\u024f\3\2\2\2\u119e\u119f\7\u010d\2\2\u119f\u11a0"+
		"\7(\2\2\u11a0\u11a1\5\u0210\u0109\2\u11a1\u0251\3\2\2\2\u11a2\u11a3\7"+
		"\u01ad\2\2\u11a3\u11a4\7\u009d\2\2\u11a4\u11a5\7\u01eb\2\2\u11a5\u11a6"+
		"\5\u01a0\u00d1\2\u11a6\u11a7\7\u01ec\2\2\u11a7\u11aa\3\2\2\2\u11a8\u11aa"+
		"\5\u0244\u0123\2\u11a9\u11a2\3\2\2\2\u11a9\u11a8\3\2\2\2\u11aa\u0253\3"+
		"\2\2\2\u11ab\u11bd\7M\2\2\u11ac\u11ae\7\u00e2\2\2\u11ad\u11af\7\26\2\2"+
		"\u11ae\u11ad\3\2\2\2\u11ae\u11af\3\2\2\2\u11af\u11be\3\2\2\2\u11b0\u11b1"+
		"\7\u01eb\2\2\u11b1\u11b6\5\u0288\u0145\2\u11b2\u11b3\7\u01f1\2\2\u11b3"+
		"\u11b5\5\u0288\u0145\2\u11b4\u11b2\3\2\2\2\u11b5\u11b8\3\2\2\2\u11b6\u11b4"+
		"\3\2\2\2\u11b6\u11b7\3\2\2\2\u11b7\u11b9\3\2\2\2\u11b8\u11b6\3\2\2\2\u11b9"+
		"\u11ba\7\u01ec\2\2\u11ba\u11bb\7\u019d\2\2\u11bb\u11bc\5\u01ee\u00f8\2"+
		"\u11bc\u11be\3\2\2\2\u11bd\u11ac\3\2\2\2\u11bd\u11b0\3\2\2\2\u11be\u0255"+
		"\3\2\2\2\u11bf\u11c2\7\u0119\2\2\u11c0\u11c1\7(\2\2\u11c1\u11c3\7\u019c"+
		"\2\2\u11c2\u11c0\3\2\2\2\u11c2\u11c3\3\2\2\2\u11c3\u11c4\3\2\2\2\u11c4"+
		"\u11c6\5\u01f6\u00fc\2\u11c5\u11c7\5\u027a\u013e\2\u11c6\u11c5\3\2\2\2"+
		"\u11c6\u11c7\3\2\2\2\u11c7\u11c8\3\2\2\2\u11c8\u11c9\7\u01f1\2\2\u11c9"+
		"\u11cb\5\u01f6\u00fc\2\u11ca\u11cc\5\u027a\u013e\2\u11cb\u11ca\3\2\2\2"+
		"\u11cb\u11cc\3\2\2\2\u11cc\u0257\3\2\2\2\u11cd\u11ce\7\u01b2\2\2\u11ce"+
		"\u11d0\7\u01eb\2\2\u11cf\u11d1\t;\2\2\u11d0\u11cf\3\2\2\2\u11d0\u11d1"+
		"\3\2\2\2\u11d1\u11d3\3\2\2\2\u11d2\u11d4\tD\2\2\u11d3\u11d2\3\2\2\2\u11d3"+
		"\u11d4\3\2\2\2\u11d4\u11d5\3\2\2\2\u11d5\u11da\5\u0260\u0131\2\u11d6\u11d7"+
		"\7\u01f1\2\2\u11d7\u11d9\5\u0260\u0131\2\u11d8\u11d6\3\2\2\2\u11d9\u11dc"+
		"\3\2\2\2\u11da\u11d8\3\2\2\2\u11da\u11db\3\2\2\2\u11db\u11dd\3\2\2\2\u11dc"+
		"\u11da\3\2\2\2\u11dd\u11de\7\u01ec\2\2\u11de\u0259\3\2\2\2\u11df\u11e0"+
		"\7\u01b8\2\2\u11e0\u11e4\7\u01eb\2\2\u11e1\u11e2\5\u0210\u0109\2\u11e2"+
		"\u11e3\5\u027a\u013e\2\u11e3\u11e5\3\2\2\2\u11e4\u11e1\3\2\2\2\u11e4\u11e5"+
		"\3\2\2\2\u11e5\u11ec\3\2\2\2\u11e6\u11e7\7\u01f1\2\2\u11e7\u11e8\5\u0210"+
		"\u0109\2\u11e8\u11e9\5\u027a\u013e\2\u11e9\u11eb\3\2\2\2\u11ea\u11e6\3"+
		"\2\2\2\u11eb\u11ee\3\2\2\2\u11ec\u11ea\3\2\2\2\u11ec\u11ed\3\2\2\2\u11ed"+
		"\u11f0\3\2\2\2\u11ee\u11ec\3\2\2\2\u11ef\u11f1\5\u025e\u0130\2\u11f0\u11ef"+
		"\3\2\2\2\u11f0\u11f1\3\2\2\2\u11f1\u11f2\3\2\2\2\u11f2\u11f3\7\u01ec\2"+
		"\2\u11f3\u025b\3\2\2\2\u11f4\u11ff\5\u0286\u0144\2\u11f5\u11f6\7\u0095"+
		"\2\2\u11f6\u1200\7\u010e\2\2\u11f7\u11fa\5\u02d2\u016a\2\u11f8\u11f9\7"+
		"\u011a\2\2\u11f9\u11fb\5\u0210\u0109\2\u11fa\u11f8\3\2\2\2\u11fa\u11fb"+
		"\3\2\2\2\u11fb\u11fd\3\2\2\2\u11fc\u11fe\5\u025e\u0130\2\u11fd\u11fc\3"+
		"\2\2\2\u11fd\u11fe\3\2\2\2\u11fe\u1200\3\2\2\2\u11ff\u11f5\3\2\2\2\u11ff"+
		"\u11f7\3\2\2\2\u1200\u025d\3\2\2\2\u1201\u1202\7d\2\2\u1202\u1203\5\u0210"+
		"\u0109\2\u1203\u025f\3\2\2\2\u1204\u120b\5\u01f4\u00fb\2\u1205\u1209\7"+
		"\17\2\2\u1206\u120a\5\u02ec\u0177\2\u1207\u1208\7\u0080\2\2\u1208\u120a"+
		"\5\u020e\u0108\2\u1209\u1206\3\2\2\2\u1209\u1207\3\2\2\2\u120a\u120c\3"+
		"\2\2\2\u120b\u1205\3\2\2\2\u120b\u120c\3\2\2\2\u120c\u0261\3\2\2\2\u120d"+
		"\u1211\7\u01a3\2\2\u120e\u120f\7\u00f0\2\2\u120f\u1212\7\u019c\2\2\u1210"+
		"\u1212\5\u01f6\u00fc\2\u1211\u120e\3\2\2\2\u1211\u1210\3\2\2\2\u1212\u0263"+
		"\3\2\2\2\u1213\u1219\7\u016a\2\2\u1214\u121a\7\u01c0\2\2\u1215\u1217\7"+
		"\u00f0\2\2\u1216\u1218\7\u019c\2\2\u1217\u1216\3\2\2\2\u1217\u1218\3\2"+
		"\2\2\u1218\u121a\3\2\2\2\u1219\u1214\3\2\2\2\u1219\u1215\3\2\2\2\u121a"+
		"\u0265\3\2\2\2\u121b\u121c\7z\2\2\u121c\u121d\5\u0210\u0109\2\u121d\u0267"+
		"\3\2\2\2\u121e\u121f\7\u01a3\2\2\u121f\u1220\5\u0210\u0109\2\u1220\u0269"+
		"\3\2\2\2\u1221\u1222\7\u00f0\2\2\u1222\u122a\7\u00aa\2\2\u1223\u1227\7"+
		"\u00aa\2\2\u1224\u1225\7\u0162\2\2\u1225\u1226\7\u0202\2\2\u1226\u1228"+
		"\5\u0210\u0109\2\u1227\u1224\3\2\2\2\u1227\u1228\3\2\2\2\u1228\u122a\3"+
		"\2\2\2\u1229\u1221\3\2\2\2\u1229\u1223\3\2\2\2\u122a\u026b\3\2\2\2\u122b"+
		"\u1232\7\u01f2\2\2\u122c\u1232\5\u026e\u0138\2\u122d\u1232\5\u0272\u013a"+
		"\2\u122e\u1232\5\u0274\u013b\2\u122f\u1232\5\u0270\u0139\2\u1230\u1232"+
		"\5\u0276\u013c\2\u1231\u122b\3\2\2\2\u1231\u122c\3\2\2\2\u1231\u122d\3"+
		"\2\2\2\u1231\u122e\3\2\2\2\u1231\u122f\3\2\2\2\u1231\u1230\3\2\2\2\u1232"+
		"\u1234\3\2\2\2\u1233\u1235\7\u01f7\2\2\u1234\u1233\3\2\2\2\u1234\u1235"+
		"\3\2\2\2\u1235\u026d\3\2\2\2\u1236\u1237\7\u01a9\2\2\u1237\u123d\tE\2"+
		"\2\u1238\u1239\7\u0088\2\2\u1239\u123a\tF\2\2\u123a\u123e\tG\2\2\u123b"+
		"\u123c\7I\2\2\u123c\u123e\tH\2\2\u123d\u1238\3\2\2\2\u123d\u123b\3\2\2"+
		"\2\u123e\u026f\3\2\2\2\u123f\u1240\7\u0158\2\2\u1240\u1246\5\u02f8\u017d"+
		"\2\u1241\u1247\7\u01e7\2\2\u1242\u1247\7\u0107\2\2\u1243\u1247\7\u0104"+
		"\2\2\u1244\u1247\5\u02e4\u0173\2\u1245\u1247\5\u02f8\u017d\2\u1246\u1241"+
		"\3\2\2\2\u1246\u1242\3\2\2\2\u1246\u1243\3\2\2\2\u1246\u1244\3\2\2\2\u1246"+
		"\u1245\3\2\2\2\u1247\u0271\3\2\2\2\u1248\u1249\7\u0088\2\2\u1249\u0273"+
		"\3\2\2\2\u124a\u124b\7\u0209\2\2\u124b\u0275\3\2\2\2\u124c\u124d\7\u015c"+
		"\2\2\u124d\u1251\7}\2\2\u124e\u124f\7\u015c\2\2\u124f\u1251\7~\2\2\u1250"+
		"\u124c\3\2\2\2\u1250\u124e\3\2\2\2\u1251\u0277\3\2\2\2\u1252\u1254\tI"+
		"\2\2\u1253\u1255\7\u0095\2\2\u1254\u1253\3\2\2\2\u1254\u1255\3\2\2\2\u1255"+
		"\u1256\3\2\2\2\u1256\u1257\5\u01ee\u00f8\2\u1257\u0279\3\2\2\2\u1258\u125a"+
		"\7\17\2\2\u1259\u1258\3\2\2\2\u1259\u125a\3\2\2\2\u125a\u125d\3\2\2\2"+
		"\u125b\u125e\5\u02ea\u0176\2\u125c\u125e\5\u027e\u0140\2\u125d\u125b\3"+
		"\2\2\2\u125d\u125c\3\2\2\2\u125e\u1261\3\2\2\2\u125f\u1261\7\17\2\2\u1260"+
		"\u1259\3\2\2\2\u1260\u125f\3\2\2\2\u1261\u027b\3\2\2\2\u1262\u1265\5\u02ea"+
		"\u0176\2\u1263\u1265\5\u027e\u0140\2\u1264\u1262\3\2\2\2\u1264\u1263\3"+
		"\2\2\2\u1265\u027d\3\2\2\2\u1266\u1267\5\u02e8\u0175\2\u1267\u027f\3\2"+
		"\2\2\u1268\u126b\7\u01aa\2\2\u1269\u126c\5\u0282\u0142\2\u126a\u126c\5"+
		"\u01f2\u00fa\2\u126b\u1269\3\2\2\2\u126b\u126a\3\2\2\2\u126c\u0281\3\2"+
		"\2\2\u126d\u126e\7R\2\2\u126e\u126f\7\u0103\2\2\u126f\u1270\5\u02b8\u015d"+
		"\2\u1270\u0283\3\2\2\2\u1271\u1272\7\u00ba\2\2\u1272\u1277\5\u02b4\u015b"+
		"\2\u1273\u1274\7\u01f1\2\2\u1274\u1276\5\u02b4\u015b\2\u1275\u1273\3\2"+
		"\2\2\u1276\u1279\3\2\2\2\u1277\u1275\3\2\2\2\u1277\u1278\3\2\2\2\u1278"+
		"\u1286\3\2\2\2\u1279\u1277\3\2\2\2\u127a\u127b\7\'\2\2\u127b\u127c\79"+
		"\2\2\u127c\u127d\7\u00ba\2\2\u127d\u1282\5\u02b4\u015b\2\u127e\u127f\7"+
		"\u01f1\2\2\u127f\u1281\5\u02b4\u015b\2\u1280\u127e\3\2\2\2\u1281\u1284"+
		"\3\2\2\2\u1282\u1280\3\2\2\2\u1282\u1283\3\2\2\2\u1283\u1286\3\2\2\2\u1284"+
		"\u1282\3\2\2\2\u1285\u1271\3\2\2\2\u1285\u127a\3\2\2\2\u1286\u0285\3\2"+
		"\2\2\u1287\u128a\5\u02ea\u0176\2\u1288\u128a\5\u02e8\u0175\2\u1289\u1287"+
		"\3\2\2\2\u1289\u1288\3\2\2\2\u128a\u0287\3\2\2\2\u128b\u128c\5\u02ea\u0176"+
		"\2\u128c\u0289\3\2\2\2\u128d\u128e\5\u02ea\u0176\2\u128e\u028b\3\2\2\2"+
		"\u128f\u1290\5\u02ea\u0176\2\u1290\u028d\3\2\2\2\u1291\u1292\5\u02ea\u0176"+
		"\2\u1292\u028f\3\2\2\2\u1293\u1294\5\u02ea\u0176\2\u1294\u0291\3\2\2\2"+
		"\u1295\u1296\5\u02ea\u0176\2\u1296\u0293\3\2\2\2\u1297\u129c\5\u02ea\u0176"+
		"\2\u1298\u1299\7\u01e4\2\2\u1299\u129b\5\u02ec\u0177\2\u129a\u1298\3\2"+
		"\2\2\u129b\u129e\3\2\2\2\u129c\u129a\3\2\2\2\u129c\u129d\3\2\2\2\u129d"+
		"\u12a1\3\2\2\2\u129e\u129c\3\2\2\2\u129f\u12a0\7\u01f3\2\2\u12a0\u12a2"+
		"\5\u02be\u0160\2\u12a1\u129f\3\2\2\2\u12a1\u12a2\3\2\2\2\u12a2\u0295\3"+
		"\2";
	private static final String _serializedATNSegment2 =
		"\2\2\u12a3\u12a4\5\u02ea\u0176\2\u12a4\u0297\3\2\2\2\u12a5\u12a8\5\u02ea"+
		"\u0176\2\u12a6\u12a7\7\u01e4\2\2\u12a7\u12a9\5\u02ec\u0177\2\u12a8\u12a6"+
		"\3\2\2\2\u12a8\u12a9\3\2\2\2\u12a9\u0299\3\2\2\2\u12aa\u12ab\5\u02ea\u0176"+
		"\2\u12ab\u029b\3\2\2\2\u12ac\u12ad\5\u02ea\u0176\2\u12ad\u029d\3\2\2\2"+
		"\u12ae\u12af\5\u02ea\u0176\2\u12af\u029f\3\2\2\2\u12b0\u12b5\5\u02ea\u0176"+
		"\2\u12b1\u12b2\7\u01e4\2\2\u12b2\u12b4\5\u02ec\u0177\2\u12b3\u12b1\3\2"+
		"\2\2\u12b4\u12b7\3\2\2\2\u12b5\u12b3\3\2\2\2\u12b5\u12b6\3\2\2\2\u12b6"+
		"\u02a1\3\2\2\2\u12b7\u12b5\3\2\2\2\u12b8\u12b9\5\u02ea\u0176\2\u12b9\u02a3"+
		"\3\2\2\2\u12ba\u12bf\5\u02ea\u0176\2\u12bb\u12bc\7\u01e4\2\2\u12bc\u12be"+
		"\5\u02ec\u0177\2\u12bd\u12bb\3\2\2\2\u12be\u12c1\3\2\2\2\u12bf\u12bd\3"+
		"\2\2\2\u12bf\u12c0\3\2\2\2\u12c0\u12c4\3\2\2\2\u12c1\u12bf\3\2\2\2\u12c2"+
		"\u12c3\7\u01f3\2\2\u12c3\u12c5\5\u02be\u0160\2\u12c4\u12c2\3\2\2\2\u12c4"+
		"\u12c5\3\2\2\2\u12c5\u02a5\3\2\2\2\u12c6\u12c7\5\u02ec\u0177\2\u12c7\u02a7"+
		"\3\2\2\2\u12c8\u12cd\5\u02ec\u0177\2\u12c9\u12ca\7\u01e4\2\2\u12ca\u12cc"+
		"\5\u02ec\u0177\2\u12cb\u12c9\3\2\2\2\u12cc\u12cf\3\2\2\2\u12cd\u12cb\3"+
		"\2\2\2\u12cd\u12ce\3\2\2\2\u12ce\u02a9\3\2\2\2\u12cf\u12cd\3\2\2\2\u12d0"+
		"\u12d5\5\u02ec\u0177\2\u12d1\u12d2\7\u01e4\2\2\u12d2\u12d4\5\u02ec\u0177"+
		"\2\u12d3\u12d1\3\2\2\2\u12d4\u12d7\3\2\2\2\u12d5\u12d3\3\2\2\2\u12d5\u12d6"+
		"\3\2\2\2\u12d6\u02ab\3\2\2\2\u12d7\u12d5\3\2\2\2\u12d8\u12dd\5\u02ea\u0176"+
		"\2\u12d9\u12da\7\u01e4\2\2\u12da\u12dc\5\u02ec\u0177\2\u12db\u12d9\3\2"+
		"\2\2\u12dc\u12df\3\2\2\2\u12dd\u12db\3\2\2\2\u12dd\u12de\3\2\2\2\u12de"+
		"\u02ad\3\2\2\2\u12df\u12dd\3\2\2\2\u12e0\u12e3\5\u02ea\u0176\2\u12e1\u12e2"+
		"\7\u01e4\2\2\u12e2\u12e4\5\u02ec\u0177\2\u12e3\u12e1\3\2\2\2\u12e3\u12e4"+
		"\3\2\2\2\u12e4\u02af\3\2\2\2\u12e5\u12e8\5\u02ea\u0176\2\u12e6\u12e7\7"+
		"\u01e4\2\2\u12e7\u12e9\5\u02ec\u0177\2\u12e8\u12e6\3\2\2\2\u12e8\u12e9"+
		"\3\2\2\2\u12e9\u02b1\3\2\2\2\u12ea\u12ed\5\u02ea\u0176\2\u12eb\u12ec\7"+
		"\u01e4\2\2\u12ec\u12ee\5\u02ec\u0177\2\u12ed\u12eb\3\2\2\2\u12ed\u12ee"+
		"\3\2\2\2\u12ee\u02b3\3\2\2\2\u12ef\u12f0\7\u0205\2\2\u12f0\u12f2\5\u02c4"+
		"\u0163\2\u12f1\u12ef\3\2\2\2\u12f1\u12f2\3\2\2\2\u12f2\u12f3\3\2\2\2\u12f3"+
		"\u12f6\5\u02ec\u0177\2\u12f4\u12f5\7\u01e4\2\2\u12f5\u12f7\5\u02ec\u0177"+
		"\2\u12f6\u12f4\3\2\2\2\u12f6\u12f7\3\2\2\2\u12f7\u12fa\3\2\2\2\u12f8\u12fa"+
		"\5\u02da\u016e\2\u12f9\u12f1\3\2\2\2\u12f9\u12f8\3\2\2\2\u12fa\u02b5\3"+
		"\2\2\2\u12fb\u12fc\5\u02ea\u0176\2\u12fc\u02b7\3\2\2\2\u12fd\u1300\5\u02ea"+
		"\u0176\2\u12fe\u1300\5\u02da\u016e\2\u12ff\u12fd\3\2\2\2\u12ff\u12fe\3"+
		"\2\2\2\u1300\u02b9\3\2\2\2\u1301\u1304\5\u02ea\u0176\2\u1302\u1304\5\u02da"+
		"\u016e\2\u1303\u1301\3\2\2\2\u1303\u1302\3\2\2\2\u1304\u02bb\3\2\2\2\u1305"+
		"\u1308\5\u02ea\u0176\2\u1306\u1307\7\u01e4\2\2\u1307\u1309\5\u02ec\u0177"+
		"\2\u1308\u1306\3\2\2\2\u1308\u1309\3\2\2\2\u1309\u02bd\3\2\2\2\u130a\u130b"+
		"\5\u02ea\u0176\2\u130b\u02bf\3\2\2\2\u130c\u1311\5\u02ea\u0176\2\u130d"+
		"\u130e\7\u01e4\2\2\u130e\u1310\5\u02ec\u0177\2\u130f\u130d\3\2\2\2\u1310"+
		"\u1313\3\2\2\2\u1311\u130f\3\2\2\2\u1311\u1312\3\2\2\2\u1312\u02c1\3\2"+
		"\2\2\u1313\u1311\3\2\2\2\u1314\u1317\5\u02ea\u0176\2\u1315\u1316\7\u01e4"+
		"\2\2\u1316\u1318\5\u02ec\u0177\2\u1317\u1315\3\2\2\2\u1317\u1318\3\2\2"+
		"\2\u1318\u131c\3\2\2\2\u1319\u131a\7\u01f3\2\2\u131a\u131d\5\u02be\u0160"+
		"\2\u131b\u131d\5\u0278\u013d\2\u131c\u1319\3\2\2\2\u131c\u131b\3\2\2\2"+
		"\u131c\u131d\3\2\2\2\u131d\u02c3\3\2\2\2\u131e\u1323\5\u02ec\u0177\2\u131f"+
		"\u1320\7\u01e4\2\2\u1320\u1322\5\u02ec\u0177\2\u1321\u131f\3\2\2\2\u1322"+
		"\u1325\3\2\2\2\u1323\u1321\3\2\2\2\u1323\u1324\3\2\2\2\u1324\u02c5\3\2"+
		"\2\2\u1325\u1323\3\2\2\2\u1326\u1327\7\u00c1\2\2\u1327\u1328\7\u01eb\2"+
		"\2\u1328\u1329\7\u01ca\2\2\u1329\u132a\t+\2\2\u132a\u132b\5\u01a0\u00d1"+
		"\2\u132b\u132d\7\u01ec\2\2\u132c\u132e\5\u0244\u0123\2\u132d\u132c\3\2"+
		"\2\2\u132d\u132e\3\2\2\2\u132e\u02c7\3\2\2\2\u132f\u1331\7\u01eb\2\2\u1330"+
		"\u1332\5\u02d0\u0169\2\u1331\u1330\3\2\2\2\u1331\u1332\3\2\2\2\u1332\u1337"+
		"\3\2\2\2\u1333\u1334\7\u01f1\2\2\u1334\u1336\5\u02d0\u0169\2\u1335\u1333"+
		"\3\2\2\2\u1336\u1339\3\2\2\2\u1337\u1335\3\2\2\2\u1337\u1338\3\2\2\2\u1338"+
		"\u133a\3\2\2\2\u1339\u1337\3\2\2\2\u133a\u133c\7\u01ec\2\2\u133b\u133d"+
		"\5\u02c6\u0164\2\u133c\u133b\3\2\2\2\u133c\u133d\3\2\2\2\u133d\u02c9\3"+
		"\2\2\2\u133e\u1343\7\u01eb\2\2\u133f\u1341\5\u02d0\u0169\2\u1340\u1342"+
		"\5\u02ce\u0168\2\u1341\u1340\3\2\2\2\u1341\u1342\3\2\2\2\u1342\u1344\3"+
		"\2\2\2\u1343\u133f\3\2\2\2\u1343\u1344\3\2\2\2\u1344\u134c\3\2\2\2\u1345"+
		"\u1346\7\u01f1\2\2\u1346\u1348\5\u02d0\u0169\2\u1347\u1349\5\u02ce\u0168"+
		"\2\u1348\u1347\3\2\2\2\u1348\u1349\3\2\2\2\u1349\u134b\3\2\2\2\u134a\u1345"+
		"\3\2\2\2\u134b\u134e\3\2\2\2\u134c\u134a\3\2\2\2\u134c\u134d\3\2\2\2\u134d"+
		"\u134f\3\2\2\2\u134e\u134c\3\2\2\2\u134f\u1351\7\u01ec\2\2\u1350\u1352"+
		"\5\u02c6\u0164\2\u1351\u1350\3\2\2\2\u1351\u1352\3\2\2\2\u1352\u02cb\3"+
		"\2\2\2\u1353\u1354\7\u01eb\2\2\u1354\u1361\5\u02c0\u0161\2\u1355\u1358"+
		"\7\u01f1\2\2\u1356\u1359\5\u02e4\u0173\2\u1357\u1359\7\u00fd\2\2\u1358"+
		"\u1356\3\2\2\2\u1358\u1357\3\2\2\2\u1359\u135f\3\2\2\2\u135a\u135d\7\u01f1"+
		"\2\2\u135b\u135e\5\u02e4\u0173\2\u135c\u135e\7\u00fd\2\2\u135d\u135b\3"+
		"\2\2\2\u135d\u135c\3\2\2\2\u135e\u1360\3\2\2\2\u135f\u135a\3\2\2\2\u135f"+
		"\u1360\3\2\2\2\u1360\u1362\3\2\2\2\u1361\u1355\3\2\2\2\u1361\u1362\3\2"+
		"\2\2\u1362\u1363\3\2\2\2\u1363\u1377\7\u019a\2\2\u1364\u1365\5\u02c2\u0162"+
		"\2\u1365\u1366\7\u01e4\2\2\u1366\u1367\7\u01ee\2\2\u1367\u1378\3\2\2\2"+
		"\u1368\u1378\7\u01ee\2\2\u1369\u136b\5\u01f4\u00fb\2\u136a\u136c\5\u027a"+
		"\u013e\2\u136b\u136a\3\2\2\2\u136b\u136c\3\2\2\2\u136c\u1374\3\2\2\2\u136d"+
		"\u136e\7\u01f1\2\2\u136e\u1370\5\u01f4\u00fb\2\u136f\u1371\5\u027a\u013e"+
		"\2\u1370\u136f\3\2\2\2\u1370\u1371\3\2\2\2\u1371\u1373\3\2\2\2\u1372\u136d"+
		"\3\2\2\2\u1373\u1376\3\2\2\2\u1374\u1372\3\2\2\2\u1374\u1375\3\2\2\2\u1375"+
		"\u1378\3\2\2\2\u1376\u1374\3\2\2\2\u1377\u1364\3\2\2\2\u1377\u1368\3\2"+
		"\2\2\u1377\u1369\3\2\2\2\u1378\u1379\3\2\2\2\u1379\u137b\7\u01ec\2\2\u137a"+
		"\u137c\5\u02c6\u0164\2\u137b\u137a\3\2\2\2\u137b\u137c\3\2\2\2\u137c\u02cd"+
		"\3\2\2\2\u137d\u137e\tJ\2\2\u137e\u137f\7\u00fe\2\2\u137f\u02cf\3\2\2"+
		"\2\u1380\u1381\5\u02ea\u0176\2\u1381\u1382\7\u0202\2\2\u1382\u1383\7\u01ff"+
		"\2\2\u1383\u1385\3\2\2\2\u1384\u1380\3\2\2\2\u1384\u1385\3\2\2\2\u1385"+
		"\u1386\3\2\2\2\u1386\u1387\5\u01f6\u00fc\2\u1387\u02d1\3\2\2\2\u1388\u1391"+
		"\5\u02d4\u016b\2\u1389\u138b\7\u012f\2\2\u138a\u1389\3\2\2\2\u138a\u138b"+
		"\3\2\2\2\u138b\u138c\3\2\2\2\u138c\u138e\5\u02a8\u0155\2\u138d\u138f\t"+
		"\27\2\2\u138e\u138d\3\2\2\2\u138e\u138f\3\2\2\2\u138f\u1391\3\2\2\2\u1390"+
		"\u1388\3\2\2\2\u1390\u138a\3\2\2\2\u1391\u02d3\3\2\2\2\u1392\u1394\5\u02d8"+
		"\u016d\2\u1393\u1395\5\u02d6\u016c\2\u1394\u1393\3\2\2\2\u1394\u1395\3"+
		"\2\2\2\u1395\u139c\3\2\2\2\u1396\u1398\7\u01ac\2\2\u1397\u1399\7\u00ce"+
		"\2\2\u1398\u1397\3\2\2\2\u1398\u1399\3\2\2\2\u1399\u139a\3\2\2\2\u139a"+
		"\u139b\7\u017b\2\2\u139b\u139d\7\u01c2\2\2\u139c\u1396\3\2\2\2\u139c\u139d"+
		"\3\2\2\2\u139d\u13af\3\2\2\2\u139e\u139f\7\u00b9\2\2\u139f\u13a4\tK\2"+
		"\2\u13a0\u13a1\7\u01eb\2\2\u13a1\u13a2\5\u01f6\u00fc\2\u13a2\u13a3\7\u01ec"+
		"\2\2\u13a3\u13a5\3\2\2\2\u13a4\u13a0\3\2\2\2\u13a4\u13a5\3\2\2\2\u13a5"+
		"\u13a6\3\2\2\2\u13a6\u13a7\7\u0184\2\2\u13a7\u13ac\tL\2\2\u13a8\u13a9"+
		"\7\u01eb\2\2\u13a9\u13aa\5\u01f6\u00fc\2\u13aa\u13ab\7\u01ec\2\2\u13ab"+
		"\u13ad\3\2\2\2\u13ac\u13a8\3\2\2\2\u13ac\u13ad\3\2\2\2\u13ad\u13af\3\2"+
		"\2\2\u13ae\u1392\3\2\2\2\u13ae\u139e\3\2\2\2\u13af\u02d5\3\2\2\2\u13b0"+
		"\u13b1\7\u01eb\2\2\u13b1\u13b4\5\u02e4\u0173\2\u13b2\u13b3\7\u01f1\2\2"+
		"\u13b3\u13b5\5\u02e4\u0173\2\u13b4\u13b2\3\2\2\2\u13b4\u13b5\3\2\2\2\u13b5"+
		"\u13b7\3\2\2\2\u13b6\u13b8\tM\2\2\u13b7\u13b6\3\2\2\2\u13b7\u13b8\3\2"+
		"\2\2\u13b8\u13b9\3\2\2\2\u13b9\u13ba\7\u01ec\2\2\u13ba\u02d7\3\2\2\2\u13bb"+
		"\u13f8\7 \2\2\u13bc\u13f8\7\u0120\2\2\u13bd\u13f8\7\u00e8\2\2\u13be\u13f8"+
		"\7\37\2\2\u13bf\u13f8\7\36\2\2\u13c0\u13f8\7\u00e9\2\2\u13c1\u13f8\7\u0121"+
		"\2\2\u13c2\u13f8\7\u0122\2\2\u13c3\u13f8\7\u015f\2\2\u13c4\u13f8\7\u0160"+
		"\2\2\u13c5\u13f8\7\u0101\2\2\u13c6\u13f8\7_\2\2\u13c7\u13f8\7\u00b7\2"+
		"\2\u13c8\u13f8\7\u00b6\2\2\u13c9\u13f8\7\u0100\2\2\u13ca\u13f8\7\u0164"+
		"\2\2\u13cb\u13f8\7\u00ff\2\2\u13cc\u13f8\7`\2\2\u13cd\u13cf\7q\2\2\u13ce"+
		"\u13d0\7\u0125\2\2\u13cf\u13ce\3\2\2\2\u13cf\u13d0\3\2\2\2\u13d0\u13f8"+
		"\3\2\2\2\u13d1\u13f8\7\u0092\2\2\u13d2\u13f8\7\u012d\2\2\u13d3\u13f8\7"+
		"\u00eb\2\2\u13d4\u13d6\7\u00d4\2\2\u13d5\u13d7\7\u012b\2\2\u13d6\u13d5"+
		"\3\2\2\2\u13d6\u13d7\3\2\2\2\u13d7\u13f8\3\2\2\2\u13d8\u13f8\7\61\2\2"+
		"\u13d9\u13f8\7\63\2\2\u13da\u13f8\7\u019f\2\2\u13db\u13f8\7\u019e\2\2"+
		"\u13dc\u13f8\7\u0171\2\2\u13dd\u13f8\7\u012b\2\2\u13de\u13f8\7$\2\2\u13df"+
		"\u13f8\7Y\2\2\u13e0\u13f8\7\u0143\2\2\u13e1\u13f8\7\u0198\2\2\u13e2\u13f8"+
		"\7\u01bf\2\2\u13e3\u13f8\7\u00e4\2\2\u13e4\u13f8\7Z\2\2\u13e5\u13f8\7"+
		"\u00a2\2\2\u13e6\u13f8\7\u00de\2\2\u13e7\u13f8\7\u014d\2\2\u13e8\u13f8"+
		"\7\u0181\2\2\u13e9\u13f8\7\u0182\2\2\u13ea\u13f8\7\u0183\2\2\u13eb\u13f8"+
		"\7\u0180\2\2\u13ec\u13f8\7\u017c\2\2\u13ed\u13f8\7\u017f\2\2\u13ee\u13f8"+
		"\7\u017e\2\2\u13ef\u13f8\7\u017d\2\2\u13f0\u13f8\7\u01c1\2\2\u13f1\u13f8"+
		"\7s\2\2\u13f2\u13f8\7\35\2\2\u13f3\u13f8\7!\2\2\u13f4\u13f8\7\66\2\2\u13f5"+
		"\u13f8\7\u00ed\2\2\u13f6\u13f8\7\u00e0\2\2\u13f7\u13bb\3\2\2\2\u13f7\u13bc"+
		"\3\2\2\2\u13f7\u13bd\3\2\2\2\u13f7\u13be\3\2\2\2\u13f7\u13bf\3\2\2\2\u13f7"+
		"\u13c0\3\2\2\2\u13f7\u13c1\3\2\2\2\u13f7\u13c2\3\2\2\2\u13f7\u13c3\3\2"+
		"\2\2\u13f7\u13c4\3\2\2\2\u13f7\u13c5\3\2\2\2\u13f7\u13c6\3\2\2\2\u13f7"+
		"\u13c7\3\2\2\2\u13f7\u13c8\3\2\2\2\u13f7\u13c9\3\2\2\2\u13f7\u13ca\3\2"+
		"\2\2\u13f7\u13cb\3\2\2\2\u13f7\u13cc\3\2\2\2\u13f7\u13cd\3\2\2\2\u13f7"+
		"\u13d1\3\2\2\2\u13f7\u13d2\3\2\2\2\u13f7\u13d3\3\2\2\2\u13f7\u13d4\3\2"+
		"\2\2\u13f7\u13d8\3\2\2\2\u13f7\u13d9\3\2\2\2\u13f7\u13da\3\2\2\2\u13f7"+
		"\u13db\3\2\2\2\u13f7\u13dc\3\2\2\2\u13f7\u13dd\3\2\2\2\u13f7\u13de\3\2"+
		"\2\2\u13f7\u13df\3\2\2\2\u13f7\u13e0\3\2\2\2\u13f7\u13e1\3\2\2\2\u13f7"+
		"\u13e2\3\2\2\2\u13f7\u13e3\3\2\2\2\u13f7\u13e4\3\2\2\2\u13f7\u13e5\3\2"+
		"\2\2\u13f7\u13e6\3\2\2\2\u13f7\u13e7\3\2\2\2\u13f7\u13e8\3\2\2\2\u13f7"+
		"\u13e9\3\2\2\2\u13f7\u13ea\3\2\2\2\u13f7\u13eb\3\2\2\2\u13f7\u13ec\3\2"+
		"\2\2\u13f7\u13ed\3\2\2\2\u13f7\u13ee\3\2\2\2\u13f7\u13ef\3\2\2\2\u13f7"+
		"\u13f0\3\2\2\2\u13f7\u13f1\3\2\2\2\u13f7\u13f2\3\2\2\2\u13f7\u13f3\3\2"+
		"\2\2\u13f7\u13f4\3\2\2\2\u13f7\u13f5\3\2\2\2\u13f7\u13f6\3\2\2\2\u13f8"+
		"\u02d9\3\2\2\2\u13f9\u13fd\7\u01f5\2\2\u13fa\u13fb\7\u01f6\2\2\u13fb\u13fd"+
		"\7\u01e5\2\2\u13fc\u13f9\3\2\2\2\u13fc\u13fa\3\2\2\2\u13fd\u1406\3\2\2"+
		"\2\u13fe\u1400\7\u00ad\2\2\u13ff\u13fe\3\2\2\2\u13ff\u1400\3\2\2\2\u1400"+
		"\u1404\3\2\2\2\u1401\u1405\7\u01f5\2\2\u1402\u1403\7\u01f6\2\2\u1403\u1405"+
		"\7\u01e5\2\2\u1404\u1401\3\2\2\2\u1404\u1402\3\2\2\2\u1405\u1407\3\2\2"+
		"\2\u1406\u13ff\3\2\2\2\u1406\u1407\3\2\2\2\u1407\u140c\3\2\2\2\u1408\u1409"+
		"\7\u01e4\2\2\u1409\u140b\5\u02de\u0170\2\u140a\u1408\3\2\2\2\u140b\u140e"+
		"\3\2\2\2\u140c\u140a\3\2\2\2\u140c\u140d\3\2\2\2\u140d\u02db\3\2\2\2\u140e"+
		"\u140c\3\2\2\2\u140f\u1414\5\u02de\u0170\2\u1410\u1411\7\u01e4\2\2\u1411"+
		"\u1413\5\u02de\u0170\2\u1412\u1410\3\2\2\2\u1413\u1416\3\2\2\2\u1414\u1412"+
		"\3\2\2\2\u1414\u1415\3\2\2\2\u1415\u02dd\3\2\2\2\u1416\u1414\3\2\2\2\u1417"+
		"\u1418\7\u0205\2\2\u1418\u141a\5\u02c4\u0163\2\u1419\u1417\3\2\2\2\u1419"+
		"\u141a\3\2\2\2\u141a\u141b\3\2\2\2\u141b\u1420\5\u02ec\u0177\2\u141c\u141d"+
		"\7\u01e4\2\2\u141d\u141f\5\u02ec\u0177\2\u141e\u141c\3\2\2\2\u141f\u1422"+
		"\3\2\2\2\u1420\u141e\3\2\2\2\u1420\u1421\3\2\2\2\u1421\u1424\3\2\2\2\u1422"+
		"\u1420\3\2\2\2\u1423\u1425\5\u02c8\u0165\2\u1424\u1423\3\2\2\2\u1424\u1425"+
		"\3\2\2\2\u1425\u02df\3\2\2\2\u1426\u1427\7\u0205\2\2\u1427\u1429\5\u02c4"+
		"\u0163\2\u1428\u1426\3\2\2\2\u1428\u1429\3\2\2\2\u1429\u142a\3\2\2\2\u142a"+
		"\u142f\5\u02ec\u0177\2\u142b\u142c\7\u01e4\2\2\u142c\u142e\5\u02ec\u0177"+
		"\2\u142d\u142b\3\2\2\2\u142e\u1431\3\2\2\2\u142f\u142d\3\2\2\2\u142f\u1430"+
		"\3\2\2\2\u1430\u02e1\3\2\2\2\u1431\u142f\3\2\2\2\u1432\u1435\7\u017c\2"+
		"\2\u1433\u1436\5\u02e8\u0175\2\u1434\u1436\5\u02da\u016e\2\u1435\u1433"+
		"\3\2\2\2\u1435\u1434\3\2\2\2\u1436\u143b\3\2\2\2\u1437\u1438\7\22\2\2"+
		"\u1438\u1439\7\u017b\2\2\u1439\u143a\7\u01c2\2\2\u143a\u143c\5\u02e8\u0175"+
		"\2\u143b\u1437\3\2\2\2\u143b\u143c\3\2\2\2\u143c\u1471\3\2\2\2\u143d\u1441"+
		"\7\u00b9\2\2\u143e\u1442\5\u02e8\u0175\2\u143f\u1442\5\u02da\u016e\2\u1440"+
		"\u1442\5\u02de\u0170\2\u1441\u143e\3\2\2\2\u1441\u143f\3\2\2\2\u1441\u1440"+
		"\3\2\2\2\u1442\u1443\3\2\2\2\u1443\u1451\tN\2\2\u1444\u1447\7\u01eb\2"+
		"\2\u1445\u1448\7\u01e5\2\2\u1446\u1448\5\u02da\u016e\2\u1447\u1445\3\2"+
		"\2\2\u1447\u1446\3\2\2\2\u1448\u144e\3\2\2\2\u1449\u144c\7\u01f1\2\2\u144a"+
		"\u144d\7\u01e5\2\2\u144b\u144d\5\u02da\u016e\2\u144c\u144a\3\2\2\2\u144c"+
		"\u144b\3\2\2\2\u144d\u144f\3\2\2\2\u144e\u1449\3\2\2\2\u144e\u144f\3\2"+
		"\2\2\u144f\u1450\3\2\2\2\u1450\u1452\7\u01ec\2\2\u1451\u1444\3\2\2\2\u1451"+
		"\u1452\3\2\2\2\u1452\u1462\3\2\2\2\u1453\u1460\7\u0184\2\2\u1454\u1461"+
		"\7Z\2\2\u1455\u1461\7\u00a2\2\2\u1456\u1461\7\u00de\2\2\u1457\u145e\7"+
		"\u014d\2\2\u1458\u145b\7\u01eb\2\2\u1459\u145c\7\u01e5\2\2\u145a\u145c"+
		"\5\u02da\u016e\2\u145b\u1459\3\2\2\2\u145b\u145a\3\2\2\2\u145c\u145d\3"+
		"\2\2\2\u145d\u145f\7\u01ec\2\2\u145e\u1458\3\2\2\2\u145e\u145f\3\2\2\2"+
		"\u145f\u1461\3\2\2\2\u1460\u1454\3\2\2\2\u1460\u1455\3\2\2\2\u1460\u1456"+
		"\3\2\2\2\u1460\u1457\3\2\2\2\u1461\u1463\3\2\2\2\u1462\u1453\3\2\2\2\u1462"+
		"\u1463\3\2\2\2\u1463\u1471\3\2\2\2\u1464\u1471\5\u02e4\u0173\2\u1465\u1466"+
		"\7Y\2\2\u1466\u1471\5\u02e8\u0175\2\u1467\u1471\5\u02e8\u0175\2\u1468"+
		"\u1471\7\u00fd\2\2\u1469\u1471\7\u018b\2\2\u146a\u1471\7\u008d\2\2\u146b"+
		"\u1471\7\\\2\2\u146c\u1471\7\u0157\2\2\u146d\u1471\7\u00df\2\2\u146e\u1471"+
		"\7\u00d9\2\2\u146f\u1471\7d\2\2\u1470\u1432\3\2\2\2\u1470\u143d\3\2\2"+
		"\2\u1470\u1464\3\2\2\2\u1470\u1465\3\2\2\2\u1470\u1467\3\2\2\2\u1470\u1468"+
		"\3\2\2\2\u1470\u1469\3\2\2\2\u1470\u146a\3\2\2\2\u1470\u146b\3\2\2\2\u1470"+
		"\u146c\3\2\2\2\u1470\u146d\3\2\2\2\u1470\u146e\3\2\2\2\u1470\u146f\3\2"+
		"\2\2\u1471\u02e3\3\2\2\2\u1472\u1473\tO\2\2\u1473\u02e5\3\2\2\2\u1474"+
		"\u1475\7\u01f0\2\2\u1475\u1476\5\u02e4\u0173\2\u1476\u02e7\3\2\2\2\u1477"+
		"\u1478\tP\2\2\u1478\u02e9\3\2\2\2\u1479\u147a\7\u0205\2\2\u147a\u147c"+
		"\5\u02c4\u0163\2\u147b\u1479\3\2\2\2\u147b\u147c\3\2\2\2\u147c\u147d\3"+
		"\2\2\2\u147d\u147e\5\u02ec\u0177\2\u147e\u02eb\3\2\2\2\u147f\u1482\5\u02f8"+
		"\u017d\2\u1480\u1482\7\u01e8\2\2\u1481\u147f\3\2\2\2\u1481\u1480\3\2\2"+
		"\2\u1482\u02ed\3\2\2\2\u1483\u148b\7\u01fb\2\2\u1484\u1485\7\u01f9\2\2"+
		"\u1485\u148b\7\u01ff\2\2\u1486\u1487\7\u01fe\2\2\u1487\u148b\7\u0202\2"+
		"\2\u1488\u1489\7\u01fc\2\2\u1489\u148b\7\u0202\2\2\u148a\u1483\3\2\2\2"+
		"\u148a\u1484\3\2\2\2\u148a\u1486\3\2\2\2\u148a\u1488\3\2\2\2\u148b\u02ef"+
		"\3\2\2\2\u148c\u1490\7\u01fa\2\2\u148d\u148e\7\u01ff\2\2\u148e\u1490\7"+
		"\u0202\2\2\u148f\u148c\3\2\2\2\u148f\u148d\3\2\2\2\u1490\u02f1\3\2\2\2"+
		"\u1491\u1495\7\u01f8\2\2\u1492\u1493\7\u01f9\2\2\u1493\u1495\7\u0202\2"+
		"\2\u1494\u1491\3\2\2\2\u1494\u1492\3\2\2\2\u1495\u02f3\3\2\2\2\u1496\u149a"+
		"\7\u0200\2\2\u1497\u1498\7\u0201\2\2\u1498\u149a\7\u0201\2\2\u1499\u1496"+
		"\3\2\2\2\u1499\u1497\3\2\2\2\u149a\u02f5\3\2\2\2\u149b\u149c\7\u01eb\2"+
		"\2\u149c\u149d\7\u01ef\2\2\u149d\u149e\7\u01ec\2\2\u149e\u02f7\3\2\2\2"+
		"\u149f\u14a0\tQ\2\2\u14a0\u02f9\3\2\2\2\u02b8\u02fd\u0302\u0309\u030b"+
		"\u0323\u032f\u0334\u0339\u0340\u0342\u034c\u0351\u0359\u035b\u035f\u0363"+
		"\u0368\u036d\u0372\u0378\u0386\u038b\u038e\u0394\u039d\u03ab\u03b3\u03bd"+
		"\u03c0\u03c5\u03ca\u03d1\u03d6\u03e0\u03e7\u03e9\u03ed\u03f3\u03f8\u0403"+
		"\u040d\u0412\u041e\u0423\u0428\u042b\u0439\u0445\u044a\u044f\u0456\u0458"+
		"\u0462\u0467\u046a\u046e\u0473\u0479\u048b\u0490\u0495\u0497\u049e\u04a5"+
		"\u04a8\u04ab\u04ae\u04b9\u04c5\u04c9\u04cc\u04d5\u04dd\u04e5\u04e8\u04ef"+
		"\u04f3\u04fa\u0500\u0529\u0545\u054c\u0551\u055c\u055f\u056a\u0572\u0576"+
		"\u0582\u0585\u058b\u058e\u0593\u0598\u059c\u05a6\u05b0\u05b6\u05c1\u05c6"+
		"\u05ca\u05d2\u05da\u05df\u05e2\u05e4\u05e7\u05f0\u05f5\u05fc\u05ff\u0602"+
		"\u0606\u0609\u0611\u0616\u061b\u0622\u062c\u063c\u0642\u064c\u0656\u065d"+
		"\u0662\u0668\u0672\u0677\u067e\u0683\u0689\u068c\u068f\u06a0\u06a5\u06ae"+
		"\u06b3\u06b9\u06bc\u06c3\u06c6\u06cd\u06d2\u06d6\u06db\u06e0\u06ea\u06f0"+
		"\u06fa\u06ff\u0706\u070c\u0710\u0713\u0716\u0727\u072c\u0734\u0742\u0749"+
		"\u0759\u0762\u0764\u0779\u0789\u0792\u0797\u079b\u079e\u07a8\u07b4\u07ba"+
		"\u07c2\u07c6\u07c9\u07d7\u07db\u07e0\u07e3\u07f0\u07f4\u0800\u0805\u0809"+
		"\u080d\u0813\u0816\u0819\u0834\u083a\u083e\u0844\u0850\u0859\u085b\u0861"+
		"\u0865\u0868\u0871\u087c\u0880\u0883\u0887\u088f\u0898\u08a1\u08a3\u08c2"+
		"\u08c6\u08cd\u08d1\u08d5\u08d9\u08e5\u08e9\u08f7\u08fd\u0904\u0909\u0913"+
		"\u0919\u091b\u0924\u092e\u0933\u0942\u0946\u0949\u094d\u0953\u0958\u095e"+
		"\u0966\u096d\u0972\u0974\u0979\u097e\u0986\u098d\u0991\u0994\u09a0\u09a6"+
		"\u09ae\u09b8\u09c3\u09c6\u09cd\u09d0\u09d7\u09e2\u09e8\u09ec\u09f6\u09f9"+
		"\u09ff\u0a0a\u0a0c\u0a0e\u0a11\u0a15\u0a18\u0a1c\u0a20\u0a25\u0a30\u0a34"+
		"\u0a3c\u0a3f\u0a44\u0a46\u0a4f\u0a59\u0a5e\u0a64\u0a68\u0a6b\u0a73\u0a76"+
		"\u0a7a\u0a7e\u0a83\u0a86\u0a8a\u0a8e\u0a92\u0a9e\u0aac\u0ab1\u0ab5\u0abe"+
		"\u0ac2\u0aca\u0acd\u0ad0\u0ad4\u0ad7\u0ada\u0add\u0ae1\u0aeb\u0af2\u0af9"+
		"\u0afe\u0b03\u0b0a\u0b10\u0b1a\u0b1c\u0b21\u0b25\u0b28\u0b2b\u0b2f\u0b34"+
		"\u0b38\u0b3a\u0b47\u0b4e\u0b5c\u0b5f\u0b69\u0b6d\u0b75\u0b81\u0b8b\u0b90"+
		"\u0b9a\u0ba2\u0ba5\u0bab\u0baf\u0bb4\u0bbe\u0bc3\u0bd0\u0bdc\u0be1\u0beb"+
		"\u0bf0\u0bf2\u0bf7\u0bfb\u0c01\u0c05\u0c12\u0c16\u0c20\u0c23\u0c25\u0c2a"+
		"\u0c33\u0c40\u0c48\u0c51\u0c55\u0c5a\u0c65\u0c67\u0c77\u0c7c\u0c82\u0c88"+
		"\u0c9a\u0ca1\u0ca4\u0cac\u0cb5\u0cb7\u0cbb\u0cbe\u0cc3\u0cc5\u0cc9\u0cd5"+
		"\u0cde\u0ce6\u0ceb\u0cef\u0cf4\u0cf7\u0cff\u0d07\u0d0d\u0d10\u0d13\u0d1b"+
		"\u0d25\u0d31\u0d38\u0d3c\u0d40\u0d43\u0d46\u0d4b\u0d50\u0d53\u0d56\u0d5c"+
		"\u0d5f\u0d65\u0d68\u0d6b\u0d70\u0d73\u0d7b\u0d81\u0d8b\u0d90\u0d99\u0da3"+
		"\u0da7\u0da9\u0dac\u0db8\u0dbc\u0dbf\u0dd3\u0dd8\u0ddd\u0de4\u0de7\u0df0"+
		"\u0df7\u0dfc\u0e00\u0e08\u0e0e\u0e16\u0e19\u0e21\u0e29\u0e2c\u0e2f\u0e38"+
		"\u0e3e\u0e44\u0e46\u0e53\u0e55\u0e5e\u0e60\u0e64\u0e6a\u0e6e\u0e7c\u0e82"+
		"\u0e91\u0e94\u0e9d\u0ea3\u0ea8\u0eb3\u0eb7\u0ebe\u0ec3\u0ec7\u0ecd\u0ed1"+
		"\u0edc\u0ee1\u0ee6\u0eef\u0ef1\u0ef3\u0f04\u0f0c\u0f18\u0f22\u0f2a\u0f33"+
		"\u0f36\u0f3d\u0f45\u0f4c\u0f50\u0f57\u0f5b\u0f60\u0f64\u0f6c\u0f70\u0f77"+
		"\u0f80\u0f8e\u0f9b\u0fa0\u0fb6\u0fba\u0fbd\u0fc4\u0fc7\u0fcb\u0fce\u0fd5"+
		"\u0fd8\u0fde\u0fe1\u0fe5\u0fe8\u0fef\u0ff4\u1002\u1008\u100a\u100e\u1016"+
		"\u1022\u1027\u102c\u1032\u1035\u1039\u1043\u1053\u1057\u1060\u1066\u1074"+
		"\u107f\u1083\u1086\u108f\u1095\u109f\u10a7\u10aa\u10ad\u10b6\u10bb\u10c4"+
		"\u10ca\u10cf\u10d2\u10d7\u10dc\u10e0\u10e6\u10ec\u10f5\u10fa\u1102\u1106"+
		"\u110b\u1111\u1118\u111d\u1124\u1128\u112d\u1135\u1138\u113b\u113e\u1142"+
		"\u1147\u114c\u1150\u1157\u115c\u115e\u1169\u116d\u116f\u117a\u1185\u118e"+
		"\u1191\u1195\u1198\u119c\u11a9\u11ae\u11b6\u11bd\u11c2\u11c6\u11cb\u11d0"+
		"\u11d3\u11da\u11e4\u11ec\u11f0\u11fa\u11fd\u11ff\u1209\u120b\u1211\u1217"+
		"\u1219\u1227\u1229\u1231\u1234\u123d\u1246\u1250\u1254\u1259\u125d\u1260"+
		"\u1264\u126b\u1277\u1282\u1285\u1289\u129c\u12a1\u12a8\u12b5\u12bf\u12c4"+
		"\u12cd\u12d5\u12dd\u12e3\u12e8\u12ed\u12f1\u12f6\u12f9\u12ff\u1303\u1308"+
		"\u1311\u1317\u131c\u1323\u132d\u1331\u1337\u133c\u1341\u1343\u1348\u134c"+
		"\u1351\u1358\u135d\u135f\u1361\u136b\u1370\u1374\u1377\u137b\u1384\u138a"+
		"\u138e\u1390\u1394\u1398\u139c\u13a4\u13ac\u13ae\u13b4\u13b7\u13cf\u13d6"+
		"\u13f7\u13fc\u13ff\u1404\u1406\u140c\u1414\u1419\u1420\u1424\u1428\u142f"+
		"\u1435\u143b\u1441\u1447\u144c\u144e\u1451\u145b\u145e\u1460\u1462\u1470"+
		"\u147b\u1481\u148a\u148f\u1494\u1499";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}